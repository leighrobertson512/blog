<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Art of Technology... Training</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2019-02-26T00:00:00-05:00</updated><entry><title>Studio Code Em Padawans Winter 2019</title><link href="/studio-code-em-padawans-winter-2019.html" rel="alternate"></link><published>2019-02-26T00:00:00-05:00</published><updated>2019-02-26T00:00:00-05:00</updated><author><name>Wray Mills</name></author><id>tag:None,2019-02-26:/studio-code-em-padawans-winter-2019.html</id><summary type="html">&lt;p&gt;Studio Code Em Class&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Jump to &lt;a href="#current"&gt;Current Lesson&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;12-week Session
Tuesdays, February 5 - April 30, 6:30-7:30pm
(no class April 2)&lt;/p&gt;
&lt;p&gt;Students will gain or expand their coding knowledge through a variety of programming languages and projects based on experience level, building from visual-based languages to Python. They will apply practical computer science skills such as source code control, software design, reverse engineering, bug resolution, and coding environments.&lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;h2&gt;Lead Instructor&lt;/h2&gt;
&lt;p&gt;Wray Mills&lt;/p&gt;
&lt;h2&gt;Youngling's Instructor&lt;/h2&gt;
&lt;p&gt;Chris Kefalas&lt;/p&gt;
&lt;h2&gt;Padawan's Instructor&lt;/h2&gt;
&lt;p&gt;Wray Mills&lt;/p&gt;
&lt;h2&gt;Additional Interns/Instructors&lt;/h2&gt;
&lt;p&gt;Alex Noll&lt;/p&gt;
&lt;h1&gt;Pre-Requisites&lt;/h1&gt;
&lt;p&gt;The Padawan section requires previous Code Em experience including these concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary Number System&lt;/li&gt;
&lt;li&gt;Boolean Logic&lt;/li&gt;
&lt;li&gt;Python programming: conditionals, loops, functions and Classes&lt;/li&gt;
&lt;li&gt;Introduction to Git&lt;/li&gt;
&lt;li&gt;Introduction to Linux&lt;/li&gt;
&lt;li&gt;Device Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This class will require 2+ hours of time outside the class. Several sessions will be flipped -- students will be given an assignment to review online (lecture) materials before the next class so that we can spend the time in class actually applying the concepts correctly.&lt;/p&gt;
&lt;h1&gt;Learning Objectives&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;GitHub account and understand basic GitHub concepts of clone, pull, commit and push.&lt;/li&gt;
&lt;li&gt;Can create and run a Python program on their own.&lt;/li&gt;
&lt;li&gt;Understand design thinking and how to apply to planning software.&lt;/li&gt;
&lt;li&gt;Know how to examine simple programs to understand how they work and how to alter.&lt;/li&gt;
&lt;li&gt;Know how to deal with runtime errors and how to resolve.&lt;/li&gt;
&lt;li&gt;Know the different tools needed for coding -- editors, interpreters and execution (runtime).&lt;/li&gt;
&lt;li&gt;Create CLI program(s).&lt;/li&gt;
&lt;li&gt;Know how to branch and PR in GitHub.&lt;/li&gt;
&lt;li&gt;Complete an appropriate level assignment.&lt;/li&gt;
&lt;li&gt;Work in Cloud9&lt;/li&gt;
&lt;li&gt;Work in Jupyter notebooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Day by Day Topics&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Review Hardware and Software&lt;ul&gt;
&lt;li&gt;Leave with GitHub and Cloud9 config&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flipped - (Python) Programming terms&lt;ul&gt;
&lt;li&gt;In class assignment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flipped - (Python) Data Structures and intro to Jupyter.&lt;ul&gt;
&lt;li&gt;In class assignment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flipped - Boolean logic&lt;ul&gt;
&lt;li&gt;In class assignment (Python coded full adder)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flipped - Using (Python) Data structures&lt;ul&gt;
&lt;li&gt;In class assignment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python on a device -- packaging and deployment&lt;/li&gt;
&lt;li&gt;Come to class with project ideas&lt;ul&gt;
&lt;li&gt;Design Thinking project design&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flipped Jupyter Notebooks&lt;ul&gt;
&lt;li&gt;In class assignment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project -- Finalize scope&lt;/li&gt;
&lt;li&gt;Project -- Demo 1&lt;/li&gt;
&lt;li&gt;Project -- Demo 2&lt;/li&gt;
&lt;li&gt;Project -- Final Demo&lt;ul&gt;
&lt;li&gt;Presentation and blog write up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;p&gt;Students should bring their own laptops if possible.
Students should have access to a Cloud9 capable browser outside of class.&lt;/p&gt;
&lt;h1&gt;On the line Resources&lt;/h1&gt;
&lt;h2&gt;On the line Presentations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="decks/intro-to-code.html"&gt;Intro to Code without notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Repos&lt;/h2&gt;
&lt;h2&gt;Related Blog Notes&lt;/h2&gt;
&lt;h2&gt;(GitHub) Assignments&lt;/h2&gt;
&lt;h2&gt;External References&lt;/h2&gt;
&lt;h1&gt;Day 1&lt;/h1&gt;
&lt;h2&gt;Computer Science Review&lt;/h2&gt;
&lt;p&gt;Tubes to Gates, Ada to Python, what do you remember?&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Whiteboard truth tables.&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;Setup with access to this blog, slack, GitHub and Cloud9 environment created.&lt;/p&gt;
&lt;h2&gt;One Thing to Remember&lt;/h2&gt;
&lt;p&gt;Writing code that other humans can understand is pretty much the point of programming languages.&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Flipping next class, so review &lt;a href="decks/intro-to-code.html"&gt;this&lt;/a&gt; before the next class. This
presentation does not include the notes -- see if you remember the
terms and look them up if necessary. Fire up the Python interpreter if
needed to remember lists, tuples, classes and functions (methods).&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Cloud9 environments.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;We started off reviewing this blog and its purpose during this session -- the intent being that we use class time to "code" while we are together to help get students "unstuck". We quickly went through the review -- great recollection of Python programming basics and navigating within the Cloud9 environment. We got new AWS IAM accounts setup and Cloud9 environments.
We'll need to work through some assignments that reinforce earlier binary number system and boolean algebra learnings! We were a little rusty there, but eventually remembered the primary gates and that they can be used to perform mathematical operations. We used paper instead of the whiteboard.&lt;/p&gt;
&lt;h1&gt;Day 2&lt;/h1&gt;
&lt;h2&gt;Diagram your Code&lt;/h2&gt;
&lt;p&gt;It is like English class, but your prose is code.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Peternaur.JPG/90px-Peternaur.JPG" width="90" height="120"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Musical Pair Programming. Starting with a base sketch of a program on paper, students will swap the paper to finish the challenge. Part of the challenge will be to label the code with the terms reviewed in the assignment deck.&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;We'll work on the challenge to only use boolean operators to perform mathematical operations. This challenge will include methods for &lt;code&gt;half_adder&lt;/code&gt; and &lt;code&gt;full_adder&lt;/code&gt;. And we'll also use this to introduce some unit testing concepts. In fact, since we started working some on the challenge to add numbers without use &lt;code&gt;+&lt;/code&gt;, we are going to stop all that coding to write our tests first!&lt;/p&gt;
&lt;h2&gt;One Thing to Remember&lt;/h2&gt;
&lt;p&gt;The sum of A + B = (not A and B) or (A and not B)&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Data Structures with a focus on Classes -- the GitHub assignent link is in the class slack channel.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Musical Code worksheet and tests for full/half adder. GitHub Classroom data assignment.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;We actually jumped around a lot to make sure everyone: 1) is following this blog, 2) has access to slack, 3) can get back on their Cloud9, 4) can run Python code on Cloud9 and 5) can run a Jupyter Notebook server on Cloud9. And we got all this done while also reviewing terms and discussing the binary adder challenge and prepping for this week's assignment which will be posted here soon! We discussed test driven development and I proposed starting with this test for the final binary adder function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_adder&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestAdder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39; Test a binary_adder function.&lt;/span&gt;

&lt;span class="sd"&gt;        Add two binary digits (input as strings). The solution must not use the &amp;#39;+&amp;#39; operator.&lt;/span&gt;

&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;101&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1010&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1111&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1101&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;11100101010&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mb"&gt;0b1101&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mb"&gt;0b11100101010&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As part of the challenge you should add tests for your &lt;code&gt;half_adder(a,b)&lt;/code&gt; and your &lt;code&gt;full_adder(carry_in, a, b)&lt;/code&gt;. Next time we'll discuss the difference between black box testing and clear box testing -- what type of test the above is and why this challenge also needs a clear box text.&lt;/p&gt;
&lt;h1&gt;Day 3&lt;/h1&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;What is it good for? Absolutely everything!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Collegiate_Dictionary.jpg/1024px-Collegiate_Dictionary.jpg" width="200"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Back to the books: dictionaries and indexes. Python dictionaries and keys are rooted in real-world books. We'll take some time to revisit physical books to reinforce programming language data structure terms.&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;We'll continue work on the Elementary Data 1 assignment in class. If the students get through the basic assignment, they can create unit tests to verify their solutions!&lt;/p&gt;
&lt;h2&gt;One Thing to Consider&lt;/h2&gt;
&lt;p&gt;Is a 3D dictionary an actual Webster's Dictionary or a Python dictionary of dictionaries of dictionaries?&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Elementary Data 2 will be the assignment -- link will be in our slack channel when ready.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Elementary Data 1 assignment.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;We made sure again that everyone has access to slack and cloud9. We accepted the assignment and walked through that Jupyter notebook to review the 3 questions for the assignment. Hope ya'll are working on it!! We also re-reviewed the half-adder assignment and reviewed the logic gate circuit for a half adder and full adder -- where the full adder takes two bits and a carry bit to add and produces a sum and carry for the next stage full adder. Please review the code in last week's Actual. Use it to test your full adder assignment.
So, there are two assignments in progress right now!&lt;/p&gt;
&lt;h1&gt;&lt;a name="current"&gt;Day 4&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;More Data&lt;/h2&gt;
&lt;p&gt;Lists, tuples and bears, oh my!&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Divide and conquer or seeing the forest in the trees.&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;We'll go through the Elementary Data 1 assignment to check on progress. I expect we'll need to revisit getting input from a user to populate our Contacts dictionaries. We'll also review a quick way to &lt;em&gt;persist&lt;/em&gt; the data to avoid going through a new Contact list setup everytime. The classtime will be used to make sure we can get through the other 2 parts of the assignment and prep for the next Elementary Data Assignment.&lt;/p&gt;
&lt;h2&gt;One Thing to Consider&lt;/h2&gt;
&lt;p&gt;Big Oh of Log N.&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Elementary Data 2 will be posted by the end of the week.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cards for search.&lt;/li&gt;
&lt;li&gt;Pickle example.&lt;/li&gt;
&lt;/ul&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="raspberry pi"></category><category term="technology"></category></entry><entry><title>Studio Code Em Younglings Winter 2019</title><link href="/studio-code-em-younglings-winter-2019.html" rel="alternate"></link><published>2019-02-25T00:00:00-05:00</published><updated>2019-02-25T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-02-25:/studio-code-em-younglings-winter-2019.html</id><summary type="html">&lt;p&gt;Studio Code Em Class&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Jump to &lt;a href="#current"&gt;Current Lesson&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;12-week Session
Tuesdays, February 5 - April 30, 6:30-7:30pm
(no class April 2)&lt;/p&gt;
&lt;p&gt;Students will be introduced to Computer Science, the Binary Number system, and computer programming&lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;p&gt;Chris Kefalas&lt;/p&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;iPads&lt;/li&gt;
&lt;li&gt;Lightbot&lt;/li&gt;
&lt;li&gt;Hopscotch&lt;/li&gt;
&lt;li&gt;Whiteboard&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Online Resources&lt;/h1&gt;
&lt;p&gt;&lt;a href="decks/code-em.html"&gt;Code Em Deck&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Repos&lt;/h2&gt;
&lt;h2&gt;Related Blog Notes&lt;/h2&gt;
&lt;h2&gt;(GitHub) Assignments&lt;/h2&gt;
&lt;h2&gt;External References&lt;/h2&gt;
&lt;hr&gt;
&lt;h1&gt;Day 1&lt;/h1&gt;
&lt;h2&gt;Intro to Computer Science&lt;/h2&gt;
&lt;p&gt;History of Computer Science, and Computers. Talking about the progress we have made in the last couple decades, and ending with the transistor.&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;We will go over Lightbot first on the whiteboard, and then we will act out how it works by having one person play the programmer, and one person play the robot. The programmer will have to program the "human robot" with instructions in order to get it to move certain area of the room. We will see how putting these instructions in the correct order is crucial, we will also mention the concept of efficiency, and how we can work to make our programs more efficient.&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;Kids will start with using the iPads along with an app called Lightbot. There they have to program a robot using the instructions that Lightbot provides. The first section of Lightbot focuses on sequences, and putting groups of instructions into code blocks, preparing us for procedures.&lt;/p&gt;
&lt;h2&gt;One Thing to Remember&lt;/h2&gt;
&lt;p&gt;Instructions and sequences. The students should be familiar, and comfortable organizing instructions into the correct order to produce the outcome that they want. Lightbot gives us the chance to do this by maneuvering out robot through the obstacle course until he has completed everything.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;We started off with the reveal deck, and went through the history of computers ending our discussion with transistors, and taking a look at the vacuum tubes. We talked a bit about computer programming, and went over Lightbot using the white board.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Day 2&lt;/h1&gt;
&lt;h2&gt;Base 10 and Base 2 Number Systems&lt;/h2&gt;
&lt;p&gt;We reviewed the history of computers, and talked about vacuum tubes, and transistors. Next we introduced how the Binary Number system relates to all this, and computer science.&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;We will start with going over the Base 10 number system which we are familiar with, and know as decimal. Then we will introduce what computers use to speak which is known as the Base 2 system, or the Binary number system. Using the white board we will go through converting 1-10 in decimal to binary and make sure we have a solid understanding of it.&lt;/p&gt;
&lt;h2&gt;Hands On/Coding&lt;/h2&gt;
&lt;p&gt;We will continue our progress with Lightbot. We ended last week with the first and second level of Section 2. We used the white board&lt;/p&gt;
&lt;h2&gt;One Thing to Remember&lt;/h2&gt;
&lt;p&gt;How to convert Decimal numbers to Binary numbers&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;The second day went really well, and we are making good progress on Lightbot.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Day 3&lt;/h1&gt;
&lt;h2&gt;Procedures, Review Binary Number System&lt;/h2&gt;
&lt;p&gt;We will review Binary Numbers, and practice converting&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;h2&gt;Hands-On/Coding&lt;/h2&gt;
&lt;p&gt;We will finish up Lightbot, and our understanding of procedures.&lt;/p&gt;
&lt;h2&gt;One Thing to Remember&lt;/h2&gt;
&lt;p&gt;Procedures keep you DRY!&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;We are rocking! She has a great understanding of the Base 10, and Base 2 number systems. We started with going over those on the whiteboard, and filling in our place values. And finishing with converting decimal numbers to binary digits. She has really enjoyed Lightbot so we stayed on that, and got all the way to the end of the Unloading section, which should be Section 3. I'm sure she will want to finish the last level because she likes the challenge and we couldn't figure it out before class ended, but after that we will move onto Hopscotch because she is totally ready. And I think will really enjoy all the flexibility and creativity that it allows.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;a name="current"&gt;Day 4&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;Why Binary? Objects In Hopscotch&lt;/h2&gt;
&lt;p&gt;Review the Binary Number system one last time, and make sure we have an understanding of how it is relevant to computer science. Move from Lightbot into the Hopscotch iPad app, start with talking about objects, and how they are programmable.&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Conduct a class exercise to physically demonstrate how a transistor works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select 3 kids, 1 transistor with its 3 connectors (base, collector, and emitter).&lt;/li&gt;
&lt;li&gt;Arrange the collector, transistor, and emitter in a line and stand the base beside the transistor, perpendicular to the line.&lt;/li&gt;
&lt;li&gt;Explain that the transistor can only have 1 tennis ball at a time and give her tennis ball to hold.&lt;/li&gt;
&lt;li&gt;Give the collector several tennis balls and explain that she needs to get those balls to the emitter thro ugh the transistor — one ball at a time.&lt;/li&gt;
&lt;li&gt;Explain that the transistor is “closed” because she is holding a tennis ball and therefore blocked.&lt;/li&gt;
&lt;li&gt;So, the base can take away the tennis ball, which will allow the collector to pass balls to the emitter one ball at a time using the “free space” in the transistor.&lt;/li&gt;
&lt;li&gt;The base can stop the flow, by giving the ball back to the transistor — shutting down the collector to emitter flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hands-On/Coding&lt;/h2&gt;
&lt;p&gt;Our first task will be learning how we can arrange instructions to draw shapes with code. Students will start by saying the instructions for this little program out loud. We will then take a look at the various instructions or snippets of code that Hopscotches gives us to carry out this objective of drawing shapes with code.&lt;/p&gt;
&lt;h2&gt;One Thing to Remember&lt;/h2&gt;
&lt;p&gt;Programmable objects in Hopscotch&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iPads&lt;/li&gt;
&lt;li&gt;Reveal deck&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;hr&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="raspberry pi"></category><category term="technology"></category></entry><entry><title>WEMS Spring Tiny Tech</title><link href="/wems-spring-tiny-tech.html" rel="alternate"></link><published>2019-02-25T00:00:00-05:00</published><updated>2019-02-25T00:00:00-05:00</updated><author><name>Christopher Kefalas</name></author><id>tag:None,2019-02-25:/wems-spring-tiny-tech.html</id><summary type="html">&lt;p&gt;WEMS Tiny Tech&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;Students will learn about the history of computing and computer science; they will review the evolving machines and the people behind them. Students will be introduced to the binary building blocks of modern computers: the binary number system, logic gates, and elementary boolean logic. They will learn about computer programming, "coding", and explore the basic concepts through: visual languages, coding games and a text-based language.&lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;h2&gt;Lead Instructor&lt;/h2&gt;
&lt;p&gt;Christopher Kefalas&lt;/p&gt;
&lt;h1&gt;Class Session Learning Objectives&lt;/h1&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;iPads&lt;/li&gt;
&lt;li&gt;Whiteboard&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Class References&lt;/h1&gt;
&lt;h1&gt;On the line Resources&lt;/h1&gt;
&lt;h2&gt;On the line Presentations&lt;/h2&gt;
&lt;h2&gt;Repos&lt;/h2&gt;
&lt;h2&gt;Related Blog Notes&lt;/h2&gt;
&lt;h2&gt;(GitHub) Assignments&lt;/h2&gt;
&lt;h2&gt;External References&lt;/h2&gt;
&lt;hr&gt;
&lt;h1&gt;Day 1&lt;/h1&gt;
&lt;h2&gt;Conditionals &amp;amp; Loops!&lt;/h2&gt;
&lt;p&gt;We will do a quick refresher on Conditionals since we had a snow day last week, and then move onto loops!&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Starting with Kodeable and making sure all the students have a good grasp of Conditionals and all the levels in the &lt;em&gt;Conditionals Canyon&lt;/em&gt; section of the app. Once we are done there we will move over to the next section which is loops! Loops are introduced with three levels, students will practice identifying the patterns in each level and figuring out which instructions are needed in order for the loop to function correctly.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;Why do we use loops?&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iPads&lt;/li&gt;
&lt;li&gt;Whiteboard&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Actual&lt;/h2&gt;</content><category term="computer science"></category></entry><entry><title>YouTube Camp Em 2019</title><link href="/youtube-camp-em-2019.html" rel="alternate"></link><published>2019-02-23T00:00:00-05:00</published><updated>2019-02-23T00:00:00-05:00</updated><author><name>Alex Noll</name></author><id>tag:None,2019-02-23:/youtube-camp-em-2019.html</id><summary type="html">&lt;p&gt;Studio Youtube Class&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Jump to &lt;a href="#current"&gt;Current Lesson&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;4-week Session
Saturdays, March 2 - March 23, 10:00am-12:00pm&lt;/p&gt;
&lt;p&gt;Students will gain or expand their YouTube knowledge by creating their own YouTube channels, recording their own videos, editing their videos, and uploading their content. They will learn practical technological skills such as proper video recording, video editing, video publishing, and uploading videos to the internet.&lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;h2&gt;Lead Instructor&lt;/h2&gt;
&lt;p&gt;Chris Kefalas&lt;/p&gt;
&lt;h2&gt;Additional Interns/Instructors&lt;/h2&gt;
&lt;p&gt;Alex Noll&lt;/p&gt;
&lt;h1&gt;Learning Objectives&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;YouTube account and account maintenance.&lt;/li&gt;
&lt;li&gt;How to properly record a video.&lt;/li&gt;
&lt;li&gt;Understand what makes specific YouTubers famous, how to make viral content.&lt;/li&gt;
&lt;li&gt;How to improve video quality to appear professional.&lt;/li&gt;
&lt;li&gt;Know the different methods of screen capturing.&lt;/li&gt;
&lt;li&gt;Know the different tools needed for video editing.&lt;/li&gt;
&lt;li&gt;How to publish/finalize an edited video.&lt;/li&gt;
&lt;li&gt;How to upload a video to YouTube.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Day by Day Topics&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Proper camera skills&lt;/li&gt;
&lt;li&gt;The makings of a popular video&lt;ul&gt;
&lt;li&gt;Presentation on YouTube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The formula to YouTube success&lt;ul&gt;
&lt;li&gt;Presentation on YouTube&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to make and operate a YouTube account&lt;ul&gt;
&lt;li&gt;Hands-on demos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to come up with video ideas&lt;ul&gt;
&lt;li&gt;Brainstorming session&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to best capture footage depending on a video idea&lt;ul&gt;
&lt;li&gt;Review of Screen Recorders, Camcorders, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to edit videos&lt;ul&gt;
&lt;li&gt;Editing demos with students&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to finalize a video for uploading&lt;ul&gt;
&lt;li&gt;Editing demos with students&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uploading a video to YouTube&lt;ul&gt;
&lt;li&gt;Uploading demo with students.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;p&gt;Students should have access to a device capable of accessing YouTube outside of class.&lt;/p&gt;
&lt;h1&gt;On the line Resources&lt;/h1&gt;
&lt;h2&gt;On the line Presentations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="decks/intro-to-code.html"&gt;Intro to Code without notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Day 1&lt;/h1&gt;
&lt;h2&gt;YouTube Content Creation Introduction&lt;/h2&gt;
&lt;p&gt;Wanna be a YouTube star?!?&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;Setup Google/YouTube accounts with students.&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Brainstorming ideas for video recording next class. Creating students' individual/group YouTube accounts.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Google/YouTube accounts &amp;amp; YouTube video brainstorm worksheets.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;h1&gt;Day 2&lt;/h1&gt;
&lt;h2&gt;Recording your video&lt;/h2&gt;
&lt;p&gt;LIGHTS, CAMERA, ACTION!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/4e/Standby...Lights%21_Camera%21_Action%21_title_card.png/250px-Standby...Lights%21_Camera%21_Action%21_title_card.png" width="90" height="120"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Students will be able to record their footage wherever their desired setting may be, the greens screen will also be available for limitless background possibilities.&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;We will spend the day acting out the students' ideas and recording them as needed.&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Recording a YouTube masterpiece.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Prepping the camera and its equipment (tripod, microphone, SD Card, Green Screen, Photo Lamps,  etc.).&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;h1&gt;Day 3&lt;/h1&gt;
&lt;h2&gt;Editing your videos&lt;/h2&gt;
&lt;p&gt;Clip, Clip, BOOM!&lt;/p&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;We'll finalize recording our raw footage and then import it for editing. Next, the students will begin splicing, dubbing, and cropping their videos.&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;Editing recorded footage to meet length requirements and desired quality.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Prepping equipment for editing &amp;amp; transferring footage.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;h1&gt;Day 4&lt;/h1&gt;
&lt;h2&gt;Uploading your videos&lt;/h2&gt;
&lt;p&gt;Off to the internet!&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;h2&gt;Hands On&lt;/h2&gt;
&lt;p&gt;Students will finalize the editing of their videos, next we will publish each student's video and prepare it for uploading. Finally, each student will add descriptors to their video when uploading to YouTube and then finalize the upload.&lt;/p&gt;
&lt;h2&gt;Assignment&lt;/h2&gt;
&lt;p&gt;To upload a finalized video to YouTube&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Devices for uploading. Printed pages with each student's YouTube channel URL for parents to keep.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;</content><category term="computer science"></category><category term="technology"></category><category term="youtube"></category></entry><entry><title>WEMS Project Summer 2019</title><link href="/wems-project-summer-2019.html" rel="alternate"></link><published>2019-02-21T00:00:00-05:00</published><updated>2019-02-21T00:00:00-05:00</updated><author><name>Wray Mills</name></author><id>tag:None,2019-02-21:/wems-project-summer-2019.html</id><summary type="html">&lt;p&gt;WEMS Projects&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Jump to &lt;a href="#current"&gt;Current Lesson&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;Students will collaborate to design and create a group project to be placed on display.&lt;/p&gt;
&lt;p&gt;February 21st to May 2 (9 sessions)&lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;h2&gt;Lead Instructor&lt;/h2&gt;
&lt;p&gt;Chris Kefalas&lt;/p&gt;
&lt;h1&gt;Class Session Learning Objectives&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;All students understand design thinking and how to apply to planning software.&lt;/li&gt;
&lt;li&gt;All students know how to examine simple programs to understand how they work and how to alter.&lt;/li&gt;
&lt;li&gt;All students know how to deal with runtime errors and how to resolve.&lt;/li&gt;
&lt;li&gt;All students know the different tools needed for coding -- editors, interpreters and execution (runtime).&lt;/li&gt;
&lt;li&gt;All students create CLI program(s).&lt;/li&gt;
&lt;li&gt;All students learn how to work on a join project.&lt;/li&gt;
&lt;li&gt;All students learn how to run Python programs on a Raspberry Pi&lt;/li&gt;
&lt;li&gt;All students learn how a basic chat bot (on slack) works&lt;/li&gt;
&lt;li&gt;All students learn about led (output) and temp/humidity (input) on a device&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Day by Day High Level Plan&lt;/h1&gt;
&lt;p&gt;Planning for 8 days. Last day can be final project wrap-up etc. if needed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cloud9 basic python programs (continuation from code em)&lt;/li&gt;
&lt;li&gt;python programs (CLI) and make sure kids are on student slack&lt;/li&gt;
&lt;li&gt;very high level CI (intro to Travis)&lt;/li&gt;
&lt;li&gt;very high level shared/open python libraries (intro to PyPy)&lt;/li&gt;
&lt;li&gt;raspberry pi … run code on the py via pypy&lt;/li&gt;
&lt;li&gt;raspberry pi … leds and temp humidity&lt;/li&gt;
&lt;li&gt;slackbot&lt;/li&gt;
&lt;li&gt;slackbot plus led/temp code&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Class raspberry pi&lt;/li&gt;
&lt;li&gt;Student Slack Account&lt;/li&gt;
&lt;li&gt;AWS Cloud9 accounts&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Class References&lt;/h1&gt;
&lt;h1&gt;On the line Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/techemstudios"&gt;Techem Github!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;On the line Presentations&lt;/h2&gt;
&lt;h2&gt;Repos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/techemstudios/MyFirstWebsite"&gt;MyFirstWebsite Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related Blog Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="github-part-one.html"&gt;Github Part One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="github-part-two.html"&gt;Github Part Two&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Assignments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/techemstudios/MyFirstWebsite/blob/master/homework/my-first-assignment.md"&gt;Homework Assignment #1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;External References&lt;/h2&gt;
&lt;h1&gt;Day 1&lt;/h1&gt;
&lt;h2&gt;Topic - Raspberry Pi &amp;amp; Clouds&lt;/h2&gt;
&lt;p&gt;Class will start with students recieving a piece of paper with their login information. Using Chromebooks they will navigate to http://wems.techemstudios.com and using the proper user name and class password will log into their accounts. Once their Cloud9 workspace has loaded, they will open a Terminal and &lt;code&gt;git pull&lt;/code&gt;. As a class we will go through the README.md and briefly discuss the plan for the next couple weeks. The remainder of class will consist of working through a couple small Python programs, running them, and making changes. This should put us in a good position for what is planned next week.&lt;/p&gt;
&lt;h2&gt;Out of Desk - Laptop In The Clouds&lt;/h2&gt;
&lt;p&gt;Moving over to the &lt;em&gt;multi-purpose area&lt;/em&gt; we will use human repositories and paper folders to reanact the life cycle of our code as it travels through the Clouds of the Internet and into it's proper home on Github. As our code travels through the wire, at each stop we will go over the different &lt;code&gt;git&lt;/code&gt; commands that are required to get us to the next step. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m "A Commit Message"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Using the Chromebooks students will log into their AWS Cloud9 editor, and start with opening a Terminal. They will issue the command &lt;code&gt;cd MyFirstWebsite&lt;/code&gt; and press the &lt;em&gt;ENTER&lt;/em&gt; key. Next they will type in &lt;code&gt;git pull&lt;/code&gt;, they should spend some time quickly reading the output of that command to see if it worked correctly. One way to check if the command has been successful is by see if they have a new folder called &lt;em&gt;python-exercises&lt;/em&gt;. If they see that folder, they are ready to type &lt;code&gt;cd python-exercises&lt;/code&gt; into the Terminal. Finally, using the mouse they should click open the folder, and open the file called &lt;em&gt;START-HERE.py&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;Students should leave class with a good understanding of what our &lt;em&gt;beginning of class&lt;/em&gt; routine is, and the basic things that we do in Cloud9 like open, save, create a file. As well as how we run, and debug our Python programs. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beginning of Class&lt;/em&gt; routine:
    - Navigate with the Chrome browser to &lt;em&gt;http://wems.techemstudios.com&lt;/em&gt;
    - Find your name on the list of AUTHORIZED USERS and click the link to open your AWS Cloud9 login web page.
    - Type in your username and class password, then click the login button. 
    - If the Cloud9 editor doesn't load when you click login, look for a &lt;em&gt;Services&lt;/em&gt; button at the top of the web page, after clicking it you should see a link for &lt;em&gt;Cloud 9&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Student username and login paper printed output&lt;/li&gt;
&lt;li&gt;Eight &lt;em&gt;fully charged&lt;/em&gt; Chromebooks, always one extra in case of chaos&lt;/li&gt;
&lt;li&gt;One teacher laptop for example and instruction&lt;/li&gt;
&lt;li&gt;One whiteboard for writing commands, and Python syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;We are totally making some progress on AWS Cloud9, using a classroom password, and putting the Chrome web browser into &lt;em&gt;incognito&lt;/em&gt; mode has made the beginning routine a bit quicker. Still a bit of confusion with the file manager in Cloud 9, and navigating around via the Terminal. But I'm confident with practice each week they will have no problem picking it up. &lt;a href="https://github.com/techemstudios/MyFirstWebsite/blob/master/homework/my-first-assignment.md"&gt;Homework Assignment #1&lt;/a&gt; was sent home with students, it simply asks them to make an attempt to log into their Cloud 9 &lt;em&gt;Laptop in the Clouds&lt;/em&gt; from home. also talk to their parents about an e-mail address that we can use for Slack, our classroom code collaboration software. &lt;/p&gt;
&lt;h1&gt;&lt;a name="current"&gt;Day 2&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;More Python Programs and Slack&lt;/h2&gt;
&lt;p&gt;Practice makes perfect and we'll practice some more simple Python programs.&lt;/p&gt;
&lt;h2&gt;Out of Desk - Laptop In The Clouds&lt;/h2&gt;
&lt;p&gt;Lot of clouds, but luckily not much rain. With a few different "stations" setup, we quickly review the different services we are using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chromebooks (on the WEMS network)&lt;/li&gt;
&lt;li&gt;Cloud9 (on the AWS cloud)&lt;/li&gt;
&lt;li&gt;GitHub (somewhere else in the cloud)&lt;/li&gt;
&lt;li&gt;Slack (yet another place on the cloud)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;After the daily "startup" routine, the students will immediately follow along and practice some simple python coding concepts in Cloud9:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit and save a Python file/program.&lt;/li&gt;
&lt;li&gt;Use the Cloud9 runner to execute the program.&lt;/li&gt;
&lt;li&gt;Make their own changes to customize the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The kids can explore &lt;a href="https://github.com/techemstudios/intro_cs"&gt;pyfiglet&lt;/a&gt; for some fun ASCII output.&lt;/p&gt;
&lt;p&gt;We'll also make sure we can log into slack and create a class channel.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;Python is actually named after the comedy troupe Monty Python and not the snake!&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Student username and login paper printed output&lt;/li&gt;
&lt;li&gt;Eight &lt;em&gt;fully charged&lt;/em&gt; Chromebooks, always one extra in case of chaos&lt;/li&gt;
&lt;li&gt;One teacher laptop for example and instruction&lt;/li&gt;
&lt;li&gt;Use multipurpose TV to show commands steps in Cloud 9&lt;/li&gt;
&lt;li&gt;One whiteboard for writing commands, and Python syntax&lt;/li&gt;
&lt;/ul&gt;</content><category term="computer science"></category><category term="github"></category><category term="raspberry pi"></category></entry><entry><title>Studio Camp Em Winter 2019</title><link href="/studio-camp-em-winter-2019.html" rel="alternate"></link><published>2019-02-16T00:00:00-05:00</published><updated>2019-02-16T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-02-16:/studio-camp-em-winter-2019.html</id><summary type="html">&lt;p&gt;Studio Camp Em, Session 1, Minecraft 3D and Design&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Jump to &lt;a href="#current"&gt;Current Lesson&lt;/a&gt;&lt;/h1&gt;
&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;We will take two of our favorite things, 3D Printing + Minecraft, and learn how we can take our designs from pixels to plastic! Students will use laptops to design, and create something in their Minecraft worlds. After we will export that to a special piece of software that allows us to create a type of file that the 3D printer can read. Weather you want to make a huge castle with a mout, or replicate a famous statue, there is no limit to what you can create. If you can build it, we can print it. &lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;h2&gt;Lead Instructor&lt;/h2&gt;
&lt;p&gt;Chris Kefalas&lt;/p&gt;
&lt;h1&gt;Learning Objectives&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Learn and comprehend basic concepts of dimensions&lt;/li&gt;
&lt;li&gt;Review and recognize some 3 dimensional geometric objects&lt;/li&gt;
&lt;li&gt;Use iPad apps to learn the basics of 3D design, and primitive shapes&lt;/li&gt;
&lt;li&gt;Have an understanding of the different components of the 3D printer, how it works, and how to change the filament&lt;/li&gt;
&lt;li&gt;Go through the process of exporting your Minecraft world to the Mineways software&lt;/li&gt;
&lt;li&gt;Prepare your print, and start it with the 3D printer&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;iPads&lt;/li&gt;
&lt;li&gt;Macbooks&lt;/li&gt;
&lt;li&gt;3D Printers&lt;/li&gt;
&lt;li&gt;Minecraft&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Class References&lt;/h1&gt;
&lt;h1&gt;On the line Resources&lt;/h1&gt;
&lt;h2&gt;On the line Presentations&lt;/h2&gt;
&lt;h2&gt;Repos&lt;/h2&gt;
&lt;h2&gt;Related Blog Notes&lt;/h2&gt;
&lt;h2&gt;(GitHub) Assignments&lt;/h2&gt;
&lt;h2&gt;External References&lt;/h2&gt;
&lt;hr&gt;
&lt;h1&gt;Day 1&lt;/h1&gt;
&lt;h2&gt;Minecraft 3D Printing &amp;amp; Design&lt;/h2&gt;
&lt;p&gt;Our focus will be on the 3D printing mostly, and how everything works. Starting with our 3D Printing deck, students will learn about the third dimension, see examples of 3D prints, and learn about different methods that people have invented to print three dimension objects. After a quick discussion, we will hop onto the iPads and work with an app called 123D Design, as well as an app called Makerbot. &lt;/p&gt;
&lt;!--![If only.](images/if.jpg)--&gt;

&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Examine the 3D printers, and get an understanding of how they operate. Start a print so we can see all the moving parts. &lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Start with the iPads and a couple different 3D design applications. We will use the Makerbot iPad software to create different types of customizable prebuilt items. After getting a grasp on that, we will move to 123D Design and start working with the primitive shapes, and our imaginations to design something from scratch! &lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;How the 3D printer operates, and some vocabulary words like &lt;em&gt;third dimension&lt;/em&gt;, &lt;em&gt;extruder&lt;/em&gt;, and &lt;em&gt;filament&lt;/em&gt;. Students should also continue brainstorming what they would like to design, and print out! It never hurts to spend some time sketching out on paper with a pencil your ideas.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;The kids enjoyed the Reveal deck, especially the part about the 3D printer that prints with chocolate instead of plastics. We also took a look at both of the printers, and started a print so we could all see it in action. The MakerBot App was a lot of fun, I think they liked the bracelets the most, but they also made some really cool medals. I think it can be a little overwhelming starting with a blank slate, but we had some fun in 123D Design using different shapes, and learning how we could snap them together to create all sorts of wild things.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Day 2&lt;/h1&gt;
&lt;h2&gt;Minecraft 3D Printing &amp;amp; Design&lt;/h2&gt;
&lt;p&gt;Revisit some of the concepts that we had gone over the last class. Start looking at how we can use Minecraft as a way to design our ideas, and build them. Finally, use a software called Mineways to export them in a format that is acceptable for the 3D printer.&lt;/p&gt;
&lt;!--![If only.](images/if.jpg)--&gt;

&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Instead of using iPads we will all be using the Macbook laptops. Mineways unfortunately only works with the PC version of Minecraft. The kids will have two opportunities to build different things. The first challenge will be to build a house, castle, or structure of some kind. The second challenge will be to be to design and build a huge statue on a superflat world! Next, we will see how we can take those files and move them to Mineways to complete the next step in our process.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;Today we went over the process, which is really four steps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build it&lt;/li&gt;
&lt;li&gt;Export to Mineways for conversation &lt;/li&gt;
&lt;li&gt;Import into Makerbot software for preparation&lt;/li&gt;
&lt;li&gt;Export onto a SD card, and put into the 3D Printer to start your print!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kids should have an understanding of this process, and what it takes for each step to be completed. First we need to create our design, in this instance we will be using Minecraft to create, and build. Then we need to essentially do a &lt;em&gt;simple&lt;/em&gt; file conversation from one format to different format, one that our Makerbot 3D Printer is able to understand. Next we will use the Makerbot software to lay out our design, and prepare it for printing. Lastly, we will get the final file onto an SD card, inserted into the printer and start the print. &lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;I've noticed over the years of teaching this class that different kids enjoy different ways of designing things, seems pretty obvious. But they also prefer certain devices. Being that this group is younger they definitely prefer the iPads for making things. Unfortunately Mineways only does PC Minecraft worlds, so working with the PC version presented some challenges. But they didn't seem too phased, after all it was still Minecraft! Throughout the week I will be printing off their creations in preparation for Saturday. &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;&lt;a name="current"&gt;Day 3&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;&lt;/h2&gt;
&lt;!--![If only.](images/if.jpg)--&gt;

&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;We will take a look over the 3D printer, and learn about it's different parts. The kids will all take turns unloading and loading the filament, also learn what to do if the 3D printer gets jammed.&lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Learn about the process of exporting, importing, and then exporting again! In order for us to make this all work, we need to go through a process of converting our creation into a format that the 3D printer understands. Since we have a Makerbot 3D printer, we will be using their desktop software to prepare our prints.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;h1&gt;Day 4&lt;/h1&gt;
&lt;h2&gt;Minecraft 3D Printing &amp;amp; Design&lt;/h2&gt;
&lt;p&gt;Look at one last piece of software used to design things to 3D Print. The kids will use the Chromebooks, and play around with TinkerCAD. We will start right off with a 30 minute build-a-thon, and then quickly go through our process to speed print our builds! They will learn the different ways that 3D Printing can be slowed down, or sped up. &lt;/p&gt;
&lt;!--![If only.](images/if.jpg)--&gt;

&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;While waiting for our prints, the kids will have the chance to use a unique tool and that is the 3D Printing pen! The cool  thing about the 3D printing pen is that you can make 1D and 2D creations on a piece of paper, or you can very carefully start connecting things and build something 3D!&lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Working with the Chromebooks on a piece of software called TinkerCAD. It's an online web application that lets you use primitive shapes and prebuilt shapes to create anything! It has a couple tools similar to some of the other software we have used. Do a quick 30ish minute random build-a-thon and then speed print our designs in all sorts of colors! &lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;Students should have an understanding of 3D printing, and what you can do with it. There are so many different applications, and we will only continue to see more in the future. They should be comfortable working with shapes in the third dimension, and have learned two different ways we can create modelsx, that can then be 3D printed in all sorts of materials and colors. &lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;h2&gt;Actual&lt;/h2&gt;</content><category term="computer science"></category><category term="coding"></category><category term="3d printing"></category><category term="minecraft"></category><category term="design thinking"></category></entry><entry><title>WEMS Coding Winter 2019</title><link href="/wems-coding-winter-2019.html" rel="alternate"></link><published>2019-02-14T00:00:00-05:00</published><updated>2019-02-14T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-02-14:/wems-coding-winter-2019.html</id><summary type="html">&lt;p&gt;WEMS Coding&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;Students will gain or expand their coding knowledge through a variety of programming languages and projects based on experience level, building from visual-based languages to Python. They will apply practical computer science skills such as source code control, software design, reverse engineering, bug resolution, and coding environments.&lt;/p&gt;
&lt;h1&gt;Instructors&lt;/h1&gt;
&lt;h2&gt;Lead Instructor&lt;/h2&gt;
&lt;p&gt;Chris Kefalas&lt;/p&gt;
&lt;h1&gt;Class Session Learning Objectives&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;All students have a GitHub account and understand basic GitHub concepts of clone, pull, commit and push.&lt;/li&gt;
&lt;li&gt;All students can create and run a Python program on their own.&lt;/li&gt;
&lt;li&gt;All students understand design thinking and how to apply to planning software.&lt;/li&gt;
&lt;li&gt;All students know how to examine simple programs to understand how they work and how to alter.&lt;/li&gt;
&lt;li&gt;All students know how to deal with runtime errors and how to resolve.&lt;/li&gt;
&lt;li&gt;All students know the different tools needed for coding -- editors, interpreters and execution (runtime).&lt;/li&gt;
&lt;li&gt;All students create CLI program(s).&lt;/li&gt;
&lt;li&gt;Repeat students know how to branch and PR in GitHub.&lt;/li&gt;
&lt;li&gt;Repeat students will complete an appropriate level assignment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;On the line Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/techemstudios"&gt;Techem Github!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Repos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/techemstudios/MyFirstWebsite"&gt;MyFirstWebsite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related Blog Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/github-part-one.html"&gt;Github Part One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/github-part-two.html"&gt;Github Part Two&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Previous Classes in this session&lt;/h1&gt;
&lt;p&gt;The summary of &lt;a href="/wems-coding-winter-2019-daily-summaries.html"&gt;our previous classes&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Day 6&lt;/h1&gt;
&lt;h2&gt;GitHub - your online portfolio&lt;/h2&gt;
&lt;p&gt;We'll discuss GitHub, what it is and create an account.&lt;/p&gt;
&lt;p&gt;The students will setup their GitHub account. We'll cover how GitHub is also a public/social place and therefore our "Internet Safety" rules apply to GitHub as well. Also, because GitHub can become a digital portfolio that is used by future schools and employers during an application process, it is actually even more important to maintain a serious presence on GitHub since it is a real-time personal resume.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git it?" src="images/github_screenshots/one.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Using physical paper and file folders, our class activity will be a real-world analogy for GitHub. GitHub maintains all versions of the document (or code) you are editing -- for the activity the "GitHub" person will hold on to many file folders (a &lt;em&gt;repository&lt;/em&gt;), each one representing previous versions with the one on top being the most recent.&lt;/p&gt;
&lt;p&gt;When a student wants to edit the latest, she requests the latest from "GitHub", who will actually present a COPY of the latest for the student to edit.&lt;/p&gt;
&lt;p&gt;She takes the paper from the folder and makes some edits.&lt;/p&gt;
&lt;p&gt;She puts the paper back in the folder, &lt;em&gt;committing&lt;/em&gt; those changes to her copy of the folder.&lt;/p&gt;
&lt;p&gt;She then hands the folder back to "GitHub", &lt;em&gt;pushing&lt;/em&gt; those changes so that they can be included in the latest version of the folder.&lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Using a prepared GitHub repository, students will use the GitHub web editor to make changes to a website. Since GitHub also supports the publishing of websites, the students can immediately make see their changes on a live website. Their take-away from this class is a live website they can edit!&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;GitHub is your online Digital Portfolio.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Create a repo with gh-pages turned on (pointing to /docs). Add a simple HTML/CSS website for the students to edit. We can go ahead and use a custom domain like wems.techemstudios.com to make it easier for the students/parents to access.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;This is the
&lt;a href="/wems-coding-winter-2019-day-6.html"&gt;play by play&lt;/a&gt; for day 6!&lt;/p&gt;
&lt;h1&gt;Day 7&lt;/h1&gt;
&lt;h2&gt;Cloud9 - Coding in the Clouds&lt;/h2&gt;
&lt;p&gt;The students will do some text-based programming using the Python programming language. They will be using Python in an environment they can access from anywhere (with an Internet connection and browser) -- an environment aptly named Cloud9.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Py in the clouds" src="images/py-clouds.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;Starting with a discussion about the origin of the term "Cloud 9", we'll discuss how coding today is actually quite different than it was even 5 years ago. There are more computing services available "on the cloud" while the speed and availability of the Internet has increased. So, using students to represents "computers in the cloud", we can act out how we will be accessing "desktops" in the cloud to do our work.&lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Each student will have his/her own Cloud9 environment. They will each use a separate Tech Em AWS (Amazon Web Services) login to access this environment -- a virtual desktop loaded with everything they need to code in Python (and many other languages), pre-configured so we can focus on learning the language and typing programs. Initially, they need to get used to accessing a code editor and a computer console in their browser. They will learn how to create new Python files, run them, and even learn what to do when there are errors.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;They should know how to create a Python file and run it (in their environment) -- &lt;em&gt;coding is bliss in the cloud&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Prior to class, we created each student's Cloud9 environment. In doing so we also create them an AWS (Amazon Web Services) login in the Tech Em account. They will have a username and a beginning default password along with a unique link to their Cloud9 environment. The first time they access their environment they will need to provide their username and password and immediately change their password.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;As was to be expected, one of the biggest challenges here is "traditional" typing. The students were using our Chromebooks to access Cloud 9. So, while the Chromebooks and Wi-Fi held up nicely, lots of typing on a traditional keyboard can be a challenge. We are often seeing students who can likely type faster using a phone-thumb input than a full-sized qwerty keyboard. We imagine computer input will evolve and for now (much as it evolved from separate keypunch operators to programmings typing in their own code), For now, typing without touchscreen input is an area where programming is like a musical instrument or sport and the key is practice, practice, practice.&lt;/p&gt;
&lt;h1&gt;Day 8&lt;/h1&gt;
&lt;h2&gt;GitHub + Cloud9&lt;/h2&gt;
&lt;p&gt;Different clouds working together. Now we have a "laptop in the cloud" with its own set of folders -- we will learn how to "git" our code from the GitHub cloud onto our Cloud9 environment. Students will explore how to &lt;em&gt;commit&lt;/em&gt;, &lt;em&gt;push&lt;/em&gt; and &lt;em&gt;pull&lt;/em&gt; their changes from Cloud9 to/from GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git it?" src="images/github-repos-flow.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;We will revisit the GitHub activity with a new twist, err, umm. cloud. We have a new player now, Cloud9. This player is not all that different than using a desktop or laptop and Git. We'll continue with the students acting as themselves, Cloud9 and GitHub to pass along documents (code) in folders in order to continue providing that physical representation of all this virtual activity!&lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Students will go back to the Website HTML -- this time, in their Cloud9 environment. They will use the same editing skills from last week and add some new skills to &lt;em&gt;pull&lt;/em&gt; (update) the code from GitHub to Cloud9; &lt;em&gt;commit&lt;/em&gt; their code in their Cloud9 environment and then &lt;em&gt;push&lt;/em&gt; that new code to Cloud9. The "latest in wins" game from 2 weeks ago will continue, but with a twist. Their &lt;em&gt;pushes&lt;/em&gt; will be blocked if they don't have the most recent code. This is intended to drive home the fact that GitHub maintains the primary repository for their code; each of their Cloud9 environments has a copy of what is in GitHub and it is actually up to them to keep their copy up-to-date.&lt;/p&gt;
&lt;p&gt;The passive intent here is to have students experience the issues a team has working on "the same document" at the same time. We will come back to that in future classes to discuss how team organization and additional Git capabilities can be used together to overcome these issues.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;p&gt;A pull a day keeps the conflicts away!&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;For Day 7 setup, the Cloud9 environments that were setup included a copy (clone) of the website repo. Therefore, students will already have that code available. They'll need to immediately &lt;em&gt;pull&lt;/em&gt; from the repo as a start to this lesson.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;Lots of typing, but the students are getting used to coding in a "text-based" environment while also using a text-based command-line interface as part of a development workflow.&lt;/p&gt;
&lt;h1&gt;&lt;a name="day-9"&gt;Day 9&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;Cloud9 + Python&lt;/h2&gt;
&lt;p&gt;We will go back to coding in the clouds. Practice makes perfect and we want to ensure the students remember how to access their coding environment and create their own Python files so they can practice coding at home. They'll work more on running and debugging within the cloud environment. And finally, they'll do a &lt;code&gt;git pull&lt;/code&gt; to grab some python &lt;em&gt;web app&lt;/em&gt; code we have ready for them to test.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python!" src="https://www.python.org/static/community_logos/python-logo-master-v3-TM.png"&gt;&lt;/p&gt;
&lt;h2&gt;Out of Desk&lt;/h2&gt;
&lt;p&gt;This time, it is up to the students to explain to us all the different sites we use in the cloud and how they fit together. Where is GitHub? Where is Cloud9? Where is the chromebook? We can use this as an opportunity to introduce the concept of a computer process so we can talk a bit more specifically about each process and where that process is running (&lt;em&gt;locally&lt;/em&gt; on their chromebook, in the cloud in AWS or in the cloud on GitHub).&lt;/p&gt;
&lt;h2&gt;Hands-On/coding&lt;/h2&gt;
&lt;p&gt;Students will follow along while we create another Python file, edit it and run it. We'll review some basic Python terms and syntax: literals, expressions and statements. We'll review code blocks and how they are delineated in Python. Then we'll review conditions, conditional blocks as well as functions and function definition blocks.&lt;/p&gt;
&lt;h2&gt;One thing to remember&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python is great!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;For Day 9 setup, they'll need to get back on their Cloud9 environment and &lt;em&gt;pull&lt;/em&gt; from the MyFirstWebstie repo to make sure they are in sync.&lt;/p&gt;
&lt;h2&gt;Actual&lt;/h2&gt;
&lt;p&gt;Overall it went pretty well -- our biggest slow down still is getting everyone signed in. Cloud9 and really any IDE has been a little bit overwhelming for kids with all the buttons and options. So we have tried to focus on the File Manager to the left, the Terminal along the bottom, and the text editor in the middle. &lt;/p&gt;
&lt;p&gt;We are not concerned though! I think thatthey will all feel much more comfortable in Cloud9 with practice and we can start really focusing on the code. The process is a bit distracting right now, and not as fun. But once they get it down, it's EZ PZ. We will all just use the same password for now though to limit difficulty on that front.&lt;/p&gt;
&lt;h1&gt;Closing&lt;/h1&gt;
&lt;p&gt;This has been a great session and the kids are using real-world tools and a real-world programming language. They are now armed with the tooling and basic skills to tackle a project. And working on a project is exactly what they need to apply these new skills -- getting lots of practice in this "cloud coding" environment so it becomes as easy as playing Fortnite.&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category></entry><entry><title>WEMS Coding Winter 2019 Daily Summaries</title><link href="/wems-coding-winter-2019-daily-summaries.html" rel="alternate"></link><published>2019-01-26T00:00:00-05:00</published><updated>2019-01-26T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-01-26:/wems-coding-winter-2019-daily-summaries.html</id><summary type="html">&lt;p&gt;WEMS Coding Diary&lt;/p&gt;</summary><content type="html">&lt;h1&gt;WEMS Coding Winter 2019 - Weekly Summary&lt;/h1&gt;
&lt;h2&gt;Day 1 (12/06/2018)&lt;/h2&gt;
&lt;p&gt;For the last couple weeks the kids have wanted to do more iPads, surprising right? We have done &lt;a href="http://lightbot.com"&gt;Lightbot&lt;/a&gt; in the past, but haven't ever heavily focused on the last levels, and the concepts because it takes a while to get through all the levels, and reach these levels. The game probably has over forty levels total. One of the first things we had to make sure the kids understood was Procedures and re-usable code. Lightbot allows you to use Procedure 1 and Procedure 2 as a block of code that can be re-used in (&lt;em&gt;called&lt;/em&gt; by) your &lt;em&gt;main&lt;/em&gt; program. Later in the game we start messing around with using our Procedure 1, as a supporting block of code.&lt;/p&gt;
&lt;h2&gt;Day 2 (12/13/2018)&lt;/h2&gt;
&lt;p&gt;We continued to work on understanding and using Procedures. The cool thing is that when you create a procedure, it might be different from the one your classmate used to beat the level. There can be different ways that you arrange the instructions to complete the level. We also practiced using loops within our procedures to make our programs smaller and more efficient.&lt;/p&gt;
&lt;h2&gt;Day 3 (01/03/2019)&lt;/h2&gt;
&lt;p&gt;This was the last week we played with Lightbot. We did a little refreshing when we got back from break and made sure that we had procedures and loops down. There is another app called CargoBot that is very similar, but pretty much requires you to use &lt;em&gt;prodecures&lt;/em&gt; and &lt;em&gt;loops&lt;/em&gt; at every level. We also learned about a concept called &lt;em&gt;mutual recursion&lt;/em&gt; -- when Procedure1 calls Procedure2 and then Procedure2 calls Procedure1. That was interesting!&lt;/p&gt;
&lt;h2&gt;Day 4 (01/10/2019)&lt;/h2&gt;
&lt;p&gt;Even the tutorial and beginner levels for Cargobot are pretty intense. They really require you to break down the whole operation and split it into different procedures. You have around five Procedures for each level to use, compared to LightBots two. This is where we really learned to practice our problem-solving, and perserverance. Many times when we would start working on a level, we would get a little bit through and figure out that there was actually a better way to solve it and start over. This happens in Lightbot but not in such an impactful way. Cargobot forces you to look at the level, break it down into pieces, and then seperate those pieces into re-usable blocks of code that go into your various Procedures.&lt;/p&gt;
&lt;h2&gt;Day 5 (01/17/2019)&lt;/h2&gt;
&lt;p&gt;Some of the kids at the end of last class who were getting frustrated with Cargobot and started working on Hopscotch. This is the next app we transition to in our objective to teach programming and comes right before the actual typing programming languages. Hopscotch is still a drag and drop visual programming app, but within those drag and drop &lt;em&gt;Rules&lt;/em&gt; as Hopscotch calls them, there are parameters that need to be typed in. We all started on Hopscotch this class and built the basic skelton for a &lt;em&gt;Crossy Road&lt;/em&gt; or what used to be called Frogger!!! We started by programming our up arrow, left arrow, and right arrow to move around our character. Then we programmed two cars that were on a &lt;em&gt;repeat forever loop&lt;/em&gt; to go back and forth in the middle of the screen as our obstacles. And finally we learned about a collision event and programmed the character to restart at the starting point when it collided with either of the cars going back and forth. This was a lot of fun, allowing the kids to add in some personal touch along the way unlike the last two apps had.&lt;/p&gt;
&lt;h2&gt;Day 6 (01/24/2019)&lt;/h2&gt;
&lt;p&gt;We started our adventure through Github and typing on the laptops! We started off going over Github, and talking about how it works, and why we would need to use it. Once everyone was set up on their laptops, we looked through the repository at the different files there. We edited the index.html file which will be our home page for the website, and also looked at our personal pages. The kids should be starting to understand the concept of commiting a change, and that change is now reflected as the most recent version of the file. Including the conflicts that would arise if we all tried to edit, and commit changes at the same time!!!&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="aws"></category><category term="cloud9"></category></entry><entry><title>WEMS Coding Winter 2019 Day 6</title><link href="/wems-coding-winter-2019-day-6.html" rel="alternate"></link><published>2019-01-26T00:00:00-05:00</published><updated>2019-01-26T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-01-26:/wems-coding-winter-2019-day-6.html</id><summary type="html">&lt;p&gt;WEMS Coding Day 6&lt;/p&gt;</summary><content type="html">&lt;h1&gt;WEMS Coding: Kids &amp;amp; Github&lt;/h1&gt;
&lt;p&gt;For class today our goal was to become comfortable with Github and version control. Our first objective -- log into Github. After a couple minutes of "Mr. Chris, wrong password", and me responding with try again, try again. It clicked that something was off, "Oh yeah, sorry. Github required me to use a numeral so the password has a number at the end of it." Finally, we were in, well almost. One laptop logged in, the others all said "Please wait some time, your account was accessed with the wrong password repeatedly, and is now locked." Thinking there is no way we can all do this with just one laptop, let's switch it up. Off to the carpet, or as H. corrected me, "The Multi-Purpose Area" to go over version control in a more visual, engaging way. I handed everyone a piece of paper, and a folder. The paper had some code on it, the couple lines of HTML we were going to be playing around with. The folder was just a normal folder, nothing fancy. I asked L. to play the role of my repository, and she held a folder that said &lt;em&gt;MyFirstWebsite&lt;/em&gt;, this is where we all would commit, and push our code! Next to L., sat a folder that had written on it &lt;em&gt;Github.&lt;/em&gt; I explained how when someone wants to submit code to the folder, or repository, they would code it all up, write on the folder what it contained, or our &lt;em&gt;commit message&lt;/em&gt;, and then push it up to Github. The folder would fly through the air and land on the Github folder, and I would explain that at the Github folder it would &lt;em&gt;ask&lt;/em&gt; Github, "Hey, I got this code, and it's suppose to go to this folder called MyFirstWebsite, will you show me the way?" And with that, the folder was then moved over to folder L. was holding, and now put inside L.'s folder. And I explain that is how we would submit code, And by doing that, the version of the code had now changed, to the newer version. We went kid by kid, each adding the piece of paper to their folder, writing a description on the folder, and then the folder flying to meet Github, and then Github sending it to the &lt;em&gt;MyFirstWebsite&lt;/em&gt; folder that L. was holding. When we had done all the students, I laid all the folders down on the ground, one in front of the other. This allowed the kids to see the history tree that the code had gone through, starting at one version, and now being on the final version that we just submitted to the repository.&lt;/p&gt;
&lt;p&gt;I have got to say, I'm pretty happy that Github locked us out for a bit and we went over to the &lt;em&gt;Multi-Purpose Area&lt;/em&gt; to act out the whole process. Because the kids totally were starting to understand what was going on. We have one folder, or repository, that all of us are submitting code too, and working on together. Back to the table, and on the laptops we go.&lt;/p&gt;
&lt;p&gt;In groups of two the kids log in, with the right password this time, and the Github gates open, we are in! I tell them to go over to the left side of the screen, and they will see the folder we are looking for, &lt;em&gt;MyFirstWebsite&lt;/em&gt;. We all click on it, and then navigate to the folder inside named docs. In there we have a list of HTML files, one for each student, and one called &lt;em&gt;index.&lt;/em&gt; I let all the kids know that we are going to be building a website for WEMS, kind of like an information page. We all navigate to the index file and look over it. It has a heading, and a list of about 5 questions with blanks. I tell the first group, you will fill in the first question, and commit your work, and the second group, you will fill in the second question, and submit your work, and so on. And it was at this time that the truely remarkable happened. They all knew they had this one document, that they all would work on together, but on different laptops. J. starts, and fills in the first blank, writes his commit message, and clicks the green button. He is stoked when the site reloads and he sees his work has been written in stone, it is now official. L. and R. are next, they have two blanks they need to take care of in their sentence. They start working on the first blank, the underscores make it tricky, and after a couple minutes J. pipes up and says "Wait, I can just edit that on mine. I'll do it." So he does, filling in the first blank with the word snack. And submits it. I notice that the word isn't suppose to be snack, it's suppose to be snake. The sentence was, "Our class pet is a [blank] and his name is [blank]. Currently in the repository, after the last commit, "Our class pet is a snack, and his name is Candycane." L. and R. had refreshed after J.'s commit, and added Candycane, the name of the class pet snake. When we see this, everyone starts laughing. H/ speaks up and says he can fix it, and goes to change snack to snake. L. and I. filled in the last two questions, and we all submitted. We all refresh, and there are the new changes! We had a couple conflicts, but I told the kids they just needed to refresh, grab the latest version, and they could go and add their changes and commit. I think one of the best parts was when one of the students said "I commited it!" We moved over to our personal HTML files so that we didn't cause conflict drama, and worked on adding some things about ourselves, writing our commit messaging, and clicking the big green commit button. The kids loved seeing the file be updated, it was now an official change to the document, that they had made, they had a commit with their name on it!&lt;/p&gt;
&lt;p&gt;This whole process of version control, and Github, and Git, command line vs. using the Web UI, or desktop app can be so overwhelming. I really didn't know what to expect, but I just keep going with it, and repeating myself to try to explain it in a slightly different way. I think what really helped was acting it out visually on the carpet. They could really see that they were adding code to the repository in the way that they would put their piece of paper in the folder, write their commit message on it, and push it up to Github. Were it would finally end up in the &lt;em&gt;MyFirstWebsite&lt;/em&gt; folder, and now be updated with their changes. They started to understand how we were making a history of all the changes to the file, and that if we had too, we could just revert back to a commit before if we had made a mistake, like a spelling error. Or, we could fix it on our laptop, and then do &lt;em&gt;another&lt;/em&gt; commit that would update the software, and fix the error. My goal was for them to understand the basic idea of version control, and pick up some of the vocabulary words like commit, commit message, push. And I think seeing it in person, with the folders, and then moving to the laptops and doing it for real, having them all make changes to the same file, at the same time really helped to connect the dots. To start next class we will go over our new text editor we will be using, and then clone the class repository. We were around 23 commits I think when we ended, I know that this will become a competition and we will probably have to see how high we can get that number. I wouldn't be surprised if we break 100 commits next Thursday, and from there onto a 1000!&lt;/p&gt;
&lt;p&gt;You can go check out our simple little site at &lt;a href="http://wems.techemstudios.com"&gt;http://wems.techemstudios.com&lt;/a&gt;! Check back each week to see how we have changed it, and what has been added.&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="aws"></category><category term="cloud9"></category></entry><entry><title>Intro To Code &amp; Robotics</title><link href="/intro-to-code-robotics.html" rel="alternate"></link><published>2018-09-01T00:00:00-04:00</published><updated>2018-09-01T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2018-09-01:/intro-to-code-robotics.html</id><summary type="html">&lt;h1&gt;Intro to Code&lt;/h1&gt;
&lt;h3&gt;Tabs or Spaces?&lt;/h3&gt;
&lt;p&gt;To start off the week, we laid out a basic foundation of programming knowledge through fun apps and games like LightBot which helped the campers get the fundamentals of programming down before moving to the more advanced keyboard based code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="LightBot" src="images/IMG_8047.JPG"&gt;&lt;/p&gt;
&lt;p&gt;After LightBot, we warmed …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Intro to Code&lt;/h1&gt;
&lt;h3&gt;Tabs or Spaces?&lt;/h3&gt;
&lt;p&gt;To start off the week, we laid out a basic foundation of programming knowledge through fun apps and games like LightBot which helped the campers get the fundamentals of programming down before moving to the more advanced keyboard based code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="LightBot" src="images/IMG_8047.JPG"&gt;&lt;/p&gt;
&lt;p&gt;After LightBot, we warmed the campers up with everything they'd need to know to get started with Keyboard Coding! Functions, boxes, and data types galore!&lt;/p&gt;
&lt;p&gt;As the week progressed we moved each camper to their own AWS Cloud9 EC2 instance where they could tinker to their heart's content!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Looking into Monitor" src="images/IMG_8020.JPG"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Robotics&lt;/h1&gt;
&lt;h3&gt;Run Robot, Run!&lt;/h3&gt;
&lt;p&gt;The camp began with students designing and assembling their robots. This year we used Raspberry Pis and custom 3D printed frames allowing for much more customization than the Bombini Bots of old!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Collaborative Robot Design" src="images/IMG_8042.JPG"&gt;&lt;/p&gt;
&lt;p&gt;After configuring their robots for using SSH and VNC, they finally had a method of wireless communication and remote control for their robots!&lt;/p&gt;
&lt;p&gt;Using their VNCs from their iPads, campers were able to load programs onto their robots and modify them as they saw fit!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Robot Test" src="images/IMG_8010.JPG"&gt;&lt;/p&gt;</content><category term="computer science"></category><category term="techcamp"></category><category term="raspberry pi"></category><category term="programming"></category></entry><entry><title>Becoming a YouTube Star and Digital Artist!</title><link href="/becoming-a-youtube-star-and-digital-artist.html" rel="alternate"></link><published>2018-08-24T00:00:00-04:00</published><updated>2018-08-24T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2018-08-24:/becoming-a-youtube-star-and-digital-artist.html</id><summary type="html">&lt;p&gt;Video Making &amp;amp; Digital Arts&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Action!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;It was awesome to see the campers unleash their creativity through their videos!  &lt;/p&gt;
&lt;p&gt;Campers learned the basics of Video Making and Cinematography, as well as the social science of YouTube and how to be successful on the ever-changing platform:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Green Screen" src="images/IMG_0023.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Production Process&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To start, campers had to brainstorm what they wanted in their videos and then how to implement their ideas in their videos    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Brain Blast" src="images/IMG_9972.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Next, the campers had to either film or screen record their videos. This year, the most common video topics were usually Fortnite or PUBG so often times, campers were using Apple's built-in screen recording tools  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After campers got their raw footage, they had to edit them to make them YouTube ready! For this, we used a wide array of tools, however iMovie was a camper favorite.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="YouTube" src="images/IMG_0026.jpg"&gt;
* &lt;strong&gt;Getting Publishing with YouTube&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you have your channel, you'll want to upload your video, uploading is a pretty complex process with many different variables to consider. To start, make sure you've prepared the video you want to upload by editing it and making sure it is the product you want the world to see.  &lt;/p&gt;
&lt;p&gt;After ensuring that your video is ready to be seen, you'll have to go to your main page on YouTube, then, in the top right corner of the page there's an upload button (an upward facing arrow) to click.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Upload Button" src="images/UPBUTTON.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;After going to the upload page, you' be prompted to select the content you want to upload, once selected you have to wait through an uploading process and processing process for your video to actually make its way onto YouTube.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Loading Screen" src="images/Upload.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Next, you'll need to decide on a Title, Description, some Tags for your video, as well as the Video Thumbnail. Make sure your Tags are related to your video and that you include enough so that if a viewer searches a relevant term, they can find your video. You'll also want to keep your title short and relevant, while making your description more descript with the information that's excluded from the title.  &lt;/p&gt;
&lt;p&gt;For your Video's Thumbnail, it's best to verify your YouTube account by providing a phone number, this will allow you to upload your own Thumbnail pictures instead of using the ones that YouTube selects.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="YouTube Verification" src="images/verification.jpg"&gt;
After deciding on your Thumbnail, you're ready to upload. Just hit publish, and then your video is available for the  world to see!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Digital Arts&lt;/strong&gt;
  + For digital arts, we focused less on camera-oriented art and more on digitally created artwork such as animation or logos&lt;/p&gt;
&lt;p&gt;&lt;img alt="Looking at iPad" src="images/IMG_9986.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We started off with logo and label design on Assembly as well as LogoMaker.com, the campers were extremely quick to learn how to use the tools to implement their designs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Collaboration" src="images/IMG_9984.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finally, we moved on to Animation where campers designed their own 3D Models on the computers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="3D Model" src="images/IMG_9975.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We hope our campers enjoy their Digital Artwork and Videos, have a great rest of the summer and good start to the school year!&lt;/p&gt;</content><category term="Digital Arts"></category><category term="YouTube"></category><category term="Cinematography"></category><category term="computer science"></category></entry><entry><title>Intro to Coding 2018</title><link href="/intro-to-coding-2018.html" rel="alternate"></link><published>2018-08-05T00:00:00-04:00</published><updated>2018-08-05T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2018-08-05:/intro-to-coding-2018.html</id><summary type="html">&lt;p&gt;Activities for the week&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Intro to Coding 2018&lt;/h3&gt;
&lt;p&gt;Thanks for a great week everyone!&lt;/p&gt;
&lt;p&gt;Last week, we started out building the foundations of coding with Lightbot and Hopscotch in order to introduce programming concepts such as finding patterns and creating functions to complete this pattern.&lt;/p&gt;
&lt;p&gt;The beginner group spent the first day in Lightbot, which focuses on pattern recognition. The first half of the second day we started with Hopscotch, which emphasis creating functions to use multiple times. In the second half of the day, we started with python, learning the basic syntax as well as a fun graphics library called turtle. Using turtle, we applied the concepts we learned in Lightbot and Hopscotch to draw patterns and shapes on the screen.&lt;/p&gt;
&lt;p&gt;Another skill we worked on this week was improving our typing. We used &lt;a href="typing.com"&gt;typing.com&lt;/a&gt; and &lt;a href="typracer.com"&gt;typeracer.com&lt;/a&gt; to learn proper typing techniques and to practice typing. Typing.com has great lessons and fun games that focus on teaching the proper way to type and help you improve your typing. Typeracer.com is  a website where you can practice typing longer phrases and paragraphs while racing against others.&lt;/p&gt;
&lt;p&gt;Both Lightbot and Hopscotch can be found on the Apple App Store, There is a free trial version of lightbot as well as the full version for $3. Hopscotch is free on the App Store.&lt;/p&gt;
&lt;p&gt;We used an online python editor called &lt;a href="trinket.io/python"&gt;Trinket&lt;/a&gt; this week, which is a great way to easily write python code&lt;/p&gt;
&lt;p&gt;If you are interested in continuing learning python, &lt;a href="http://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076"&gt;Python for Kids&lt;/a&gt; is a great place to start.&lt;/p&gt;</content><category term="python"></category><category term="hopscotch"></category></entry><entry><title>Device Camp 2018</title><link href="/device-camp-2018.html" rel="alternate"></link><published>2018-07-27T00:00:00-04:00</published><updated>2018-07-27T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2018-07-27:/device-camp-2018.html</id><summary type="html">&lt;h2&gt;Summer 2018 Device Engineering Camp&lt;/h2&gt;
&lt;p&gt;For all the code and more cool projects, visit https://github.com/davismohar/TechEmRpiCode  &lt;/p&gt;
&lt;p&gt;The kids are now experts at using Raspbian wih the Raspberry Pis!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Looking at Python" src="images/IMG_9586.JPG"&gt;  &lt;/p&gt;
&lt;p&gt;Throughout the Device Camp, we used the terminal and learned useful commands to navigate effortlessly through the pi and …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Summer 2018 Device Engineering Camp&lt;/h2&gt;
&lt;p&gt;For all the code and more cool projects, visit https://github.com/davismohar/TechEmRpiCode  &lt;/p&gt;
&lt;p&gt;The kids are now experts at using Raspbian wih the Raspberry Pis!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Looking at Python" src="images/IMG_9586.JPG"&gt;  &lt;/p&gt;
&lt;p&gt;Throughout the Device Camp, we used the terminal and learned useful commands to navigate effortlessly through the pi and to write our programs in Python. On the first day of camp, the campers set up their raspberry pi devices. They wired breadboards and coded in Python 2 in order to turn on a LED light.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="LED Breadboard" src="images/IMG_9571.JPG"&gt;  &lt;/p&gt;
&lt;h4&gt;Connecting LEDs to the Raspberry Pi &amp;amp; Breadboard&lt;/h4&gt;
&lt;p&gt;During the second day of camp, the campers added more LEDs to their breadboards and learned how to make their LEDs respond to events in games such as Minecraft and snake. By the end of the day, the breadboards were covered in LEDs!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Tinkering with Hardware" src="images/IMG_9579.JPG"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Engineering the code of Raspberry Pi Games&lt;/h4&gt;
&lt;p&gt;The snake game (Wormy) that comes pre-installed on the Pis was a fan favorite this week, so we wrote custom code for the game in python to make the game easier or harder, as the campers saw fit, or to turn on our LEDs when we got points. Another fan favorite this week was editing the code for Tetris to make it harder. Campers changed the shape and size of all of the pieces as well as changing how the game played.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Python" src="images/IMG_9570.JPG"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It was awesome to see how comfortable the kids were with using the Raspberry Pi as the Device Camp progressed. The hands-on, &lt;strong&gt;'learn by doing'&lt;/strong&gt; approach achieved inspiring results. Navigating to and from all the directories, the Python prompt, running Python programs using sudo... -the campers would recall the commands they have been learning and using, so they flew (with ease!) through the process of typing instructions to have the pi carry them out.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To say the least, witnessing the skills these campers learned was an impressive sight!&lt;/strong&gt;  &lt;/p&gt;
&lt;hr&gt;</content><category term="raspberry pi"></category><category term="techcamp"></category><category term="computer science"></category><category term="terminal"></category><category term="python"></category><category term="coding"></category></entry><entry><title>Website Redesign Maggie 2018</title><link href="/website-redesign-maggie-2018.html" rel="alternate"></link><published>2018-07-10T00:00:00-04:00</published><updated>2018-07-10T00:00:00-04:00</updated><author><name>Maggie Liu</name></author><id>tag:None,2018-07-10:/website-redesign-maggie-2018.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Our interns worked hard over the past couple of weeks to update and redesign Tech Em Studios’ website. To kickoff this redesign, it was all pens and paper; the interns worked to design what they wanted each page to look like on paper. With the plans for the redesign …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Our interns worked hard over the past couple of weeks to update and redesign Tech Em Studios’ website. To kickoff this redesign, it was all pens and paper; the interns worked to design what they wanted each page to look like on paper. With the plans for the redesign established, they went to work on the code (HTML, CSS, and JS). As a team, they worked using a forked github repo from our old website to make changes without affecting the live site. There were many bugs to fix as modifications were made, and the interns worked as a team to divide and conquer the tasks of the various pages. They worked using Slack to communicate and share resources. Below, our intern Maggie describes her experiences working on this project. We are excited to present our new and improved website!&lt;/p&gt;
&lt;h2&gt;Homepage&lt;/h2&gt;
&lt;p&gt;&lt;img alt="homepage" src="images/homepage.png"&gt;  &lt;/p&gt;
&lt;h1&gt;Mission Not-Quite-Impossible&lt;/h1&gt;
&lt;h2&gt;TOP SECRET – MISSION IMPOSSIBLE&lt;/h2&gt;
&lt;p&gt;Date: June 25th, 2018.&lt;/p&gt;
&lt;p&gt;Time: 0800.&lt;/p&gt;
&lt;p&gt;Subject: TOP SECRET – MISSION IMPOSSIBLE.&lt;/p&gt;
&lt;p&gt;From: TechEm Studios.&lt;/p&gt;
&lt;p&gt;To: Interns A, M, R, W.&lt;/p&gt;
&lt;p&gt;Greetings, all. You do not know me, and I do not know you, but you &lt;em&gt;must&lt;/em&gt; trust me. Our organization is sending you on a near-impossible mission. THIS IS NOT A DRILL, I REPEAT, THIS IS NOT A DRILL. It’s your first day here, and we do not expect you to be completely familiar with the mission structure, but on behalf of the organization, I thank you for taking up this enormous task.
You may find the details of the mission below. For now, I must sign off. There are a few miniature humans that I must take care of. Should you have any questions, feel free to send a messenger pigeon. Not a passenger pigeon; those are extinct.
Interns, I wish you all the best of luck. Farewell, and godspeed.&lt;/p&gt;
&lt;p&gt;Mission details: redesign the TechEm site, found &lt;a href="http://techemstudios.com/"&gt;here&lt;/a&gt;.
Missions basics: utilize HTML/CSS/Javascript skills in order to bring a new start to the dreaded TechEm website.
Mission difficulty: near impossible.&lt;/p&gt;
&lt;h2&gt;MISSION REPORT&lt;/h2&gt;
&lt;p&gt;Date: July 9th, 2018.&lt;/p&gt;
&lt;p&gt;Time. 1357.&lt;/p&gt;
&lt;p&gt;Subject: MISSION REPORT&lt;/p&gt;
&lt;p&gt;From: Intern M.&lt;/p&gt;
&lt;p&gt;To: TechEm Studios.&lt;/p&gt;
&lt;p&gt;Chief:
The mission has been completed. We interns have risen above the difficulty, and we now present to you the newest version of the site, found &lt;a href="http://techemstudios.com/"&gt;here&lt;/a&gt;. We didn’t know how much you expected, but we risked everything, hacking away through the night, in order to produce something that would satisfy you. You may be surprised to hear that we received help from an inside informant, Agent G, who was of the utmost help and greatly augmented our chance of success.
But we’re not here to talk about that. Below, I have attached three documents on the mission, each detailing a different part of the experience. Chief, I have not slept in three days. Please forgive me as I sign off.
-      Intern M&lt;/p&gt;
&lt;h3&gt;Document 1: Collaboration&lt;/h3&gt;
&lt;p&gt;At first, it seemed like we four interns were all the same: young, scared, and inexperienced. However, it quickly came to my attention that we all excelled in different fields and were passionate about different topics. Intern A, for instance, had never used HTML before but could learn in a single day. Intern R had been in contact with the language but needed a refresher, while Intern W was our go-to for questions on HTML, CSS, and Javascript. Meanwhile, I preferred to write the descriptors on the site. Even though we seemed a bit incomplete alone, we worked together and, through our amazing synergy, completed this impossible mission.
It would have been hard alone, and when we first started, it was. How could we all work on the same Github repository when Github doesn’t show who’s on and who’s not? How could we all work together when we didn’t even know each other? How, how, how? Well, as it turned out, we could simply tell each other that we were working on a page, and the others would not touch the page until it became free again. This was so Github did not cancel out anyone’s hard work. It also turned out that, while we still don’t know much about each other, we can still be friends and laugh together. What unusual friendships forged through trial and error.&lt;/p&gt;
&lt;h3&gt;Document 2: Issues&lt;/h3&gt;
&lt;p&gt;I would be lying if I said we ran into absolutely zero issues during this mission. In fact, we ran into &lt;em&gt;a lot&lt;/em&gt; of issues. It would take an entire day for me to finish. Some of the more memorable (read: death-defying) ones include: pictures, Javascript, and buttons.
Pictures, pictures, pictures. No website would be complete without pictures, but gosh darn are they hard to tame! Image after image, trial after trial. We manipulated CSS well into the night, as the clock ticked down, red and urgent. We hard-coded the images in, placed them exactly where we wanted them to be, and it all seemed fine – until we tested the mobile site.
The mobile site itself was an issue. How did something that looked so great on desktop look so bad on mobile? We added media query after media query (although I was not the one who did so), until at the end, the mobile site looked almost as good as the desktop version. &lt;em&gt;Almost&lt;/em&gt;.
Javascript. Ah, that one Java-like language that I should have learned but didn’t. Nope, I had nothing to do with the Javascript, but from what I remember, Agent G and Interns A and W worked on that relentlessly, rushing for time, yet trying so hard to maintain quality. I admire them, and in the end, everything worked out fine.
Now we come to the buttons. The dreaded, terrible buttons. I worked closely with these little monsters, and what I learned was that no one – &lt;em&gt;no one&lt;/em&gt; – could figure out the spacing. See, it was weird, we could space the homepage buttons perfectly, but the contact page buttons just would not obey. We stressed our hair out over it, but suddenly, miraculously, after we had left it off for a few days, it had been fixed! Mysterious benefactor, Intern M thanks you with all her heart.&lt;/p&gt;
&lt;h3&gt;Document 3: Learnt&lt;/h3&gt;
&lt;p&gt;I really want to say that I learnt HTML. Of course, being such a serious organization, I’m sure I would get yelled at for that. I must have learned something other than HTML during these days, but what? Is my memory really so bad that I cannot remember?
No, not yet. What did I learn? I learnt how to, first off, use ‘learnt’ and ‘learned’ interchangeably, but more so, I learnt how to open up.
When I first entered the company, I thought I knew nothing. I felt incompetent (and sometimes I still do), like everyone else knew more than me, was better than me. But I soon learned that we were all one of the same: young, scared, and inexperienced. We didn’t know more than each other; heck, we barely even &lt;em&gt;knew&lt;/em&gt; each other.
And so we came together, united in our know-nothing. We came together, one of the same, and we learned that, no matter who we were, we could do it. We grew together, learned together, fell down and got up together. We helped each other up from the fall, and in the end, we crossed the finish line together.
You said, Chief, that this was an impossible mission. We learned that it was not. It was entirely and completely possible, but we just had to learn how to make it so.
And so we did.&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="technology"></category></entry><entry><title>Website Redesign Rishi 2018</title><link href="/website-redesign-rishi-2018.html" rel="alternate"></link><published>2018-07-10T00:00:00-04:00</published><updated>2018-07-10T00:00:00-04:00</updated><author><name>Rishi Patel</name></author><id>tag:None,2018-07-10:/website-redesign-rishi-2018.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Our interns worked hard over the past couple of weeks to update and redesign Tech Em Studios’ website. To kickoff this redesign, it was all pens and paper; the interns worked to design what they wanted each page to look like on paper. With the plans for the redesign …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Our interns worked hard over the past couple of weeks to update and redesign Tech Em Studios’ website. To kickoff this redesign, it was all pens and paper; the interns worked to design what they wanted each page to look like on paper. With the plans for the redesign established, they went to work on the code (HTML, CSS, and JS). As a team, they worked using a forked github repo from our old website to make changes without affecting the live site. There were many bugs to fix as modifications were made, and the interns worked as a team to divide and conquer the tasks of the various pages. They worked using Slack to communicate and share resources. Below, our intern Rishi describes his experiences working on this project. We are excited to present our new and improved website!&lt;/p&gt;
&lt;h2&gt;Homepage&lt;/h2&gt;
&lt;p&gt;&lt;img alt="homepage" src="images/homepage.png"&gt;  &lt;/p&gt;
&lt;h2&gt;Website Redesign&lt;/h2&gt;
&lt;p&gt;“Anyone on main.css? What about classes.html? How do you implement a modal for the calendar?” These questions (and many more) became the basis for real-world website redesign. But we didn’t start with code – we started with a pencil and notebook! Yes, we knew from the beginning that we were going to start the new website from scratch and needed a foundation for both framework and design; both aspects would be reflected across all pages. We jotted down the biggest and smallest details from the old website to see what needed changing; the net neutrality alert was definitely one of them… After extensively reviewing the old website, we created a design frame for each page.&lt;/p&gt;
&lt;p&gt;I have worked in software development projects before in school, but one thing felt different at Tech Em than in the classroom: collaboration. Collaboration is profound in the real-world, and it’s safe to say that communicating with team members at the studio felt more natural – less forced, if you will. Using the power of talk (and Slack, of course), I knew what was expected of this website; already, the team was heading in the right direction.&lt;/p&gt;
&lt;p&gt;From there, we were off to the races! We had all previously learned the HTML, CSS, and Javascript basics and were transforming a template that we found to suit our conceived design on paper. Personally, I am more design-oriented and naturally enjoy creative work (a big reason why I enjoy Tech Em!); that being said, I was excited to play with the HTML and CSS to find what looked the best.&lt;/p&gt;
&lt;p&gt;There were many hurdles to clear before the website was finished. This was my first time using GitHub for a real-world project, and at first, I was a bit confused by the lexicon of words in the GitHub realm; some of my favorites include “Fork” and “Pull-Request.” Another challenge was waiting for some of the changes to appear, particularly changes made in the main CSS file; nevertheless, the incredible powers of Inspect Element allowed us to see instant changes before committing anything in GitHub. As far as technicality, most issues were in design work (unwanted wrapping of text, positioning text and objects in desired locations, unresponsive elements, calendar modal, logo size, etc.). We never found our challenges to be disheartening (we actually found them quite funny!); we kept striving ahead and used excellent peer collaboration to fix all design and framework flaws.
It’s evident that for every challenge, there indeed was a solution; and not only was there a solution to make it right, but there was a solution to make it right for us. As we neared the end of the redesign, we were nitpicking the smallest details on the site, ensuring that what end-users saw was a completely refurbished Tech Em Studios. Gone were the pictures from 2013, and in came quality photos from recent camps; gone were the old colors, and in came the modern, personalized Tech Em colors; gone was the old framework, and in came a brand new site that reflected a modern Tech Em Studios and expressed “The Art of Technology.”&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="technology"></category></entry><entry><title>Minecraft 3D &amp; 3D Devices Camp</title><link href="/minecraft-3d-3d-devices-camp.html" rel="alternate"></link><published>2018-07-06T00:00:00-04:00</published><updated>2018-07-06T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2018-07-06:/minecraft-3d-3d-devices-camp.html</id><summary type="html">&lt;p&gt;Minecraft in 3D, Devices in 3D&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Build it, Print it!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;It was a great experience to see creative minds design complex builds in Minecraft and create intricate switching devices in Minecraft!  &lt;/p&gt;
&lt;p&gt;Campers learned the basics of 3D printing, including designing and the actual printing process. Below are the steps we completed to perform this:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Printer" src="images/IMG_9274.JPG"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The 3D Print process&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Campers created their own unique design on Minecraft.    &lt;/li&gt;
&lt;li&gt;We used the program Mineways to turn their Minecraft creations into a file that the printer can understand.  &lt;/li&gt;
&lt;li&gt;The file was then sent to the 3D Printer and printed into a unique 3D object that they could take home.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Yoda" src="images/IMG_9271.JPG"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;From the final camp email: You can get a sample of the projects we did from our site. Login to our secure site from our homepage or from this link: https://secure.techemstudios.com/enrolled_children. If logging in for the first time, use your square receipt id as your password (or use the password reset feature or contact us if you have trouble). You can easily change your password once logged in. From this site, you can download a zipfile containing a 3D Design file or Standard Triangle Language file ("stl") your child created.  &lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3D Devices&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;We started off the camp on the Raspberry Pis with Python coding on Python Games where campers modified the games to their liking as they saw fit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Python Games" src="images/IMG_9239.JPG"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next, we took our Python skills to everyone's favorite game, Minecraft! Campers were able to make their own Minecraft Mods and changes to the game.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Pi Minecraft" src="images/IMG_9248.JPG"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finally, we took our skills to LED Pendants where campers were able to program their own patterns onto the LED Pendants to take home with them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="LED Pendant" src="images/IMG_9283.JPG"&gt;&lt;/p&gt;
&lt;p&gt;We hope our campers enjoy their 3D builds and devices.&lt;/p&gt;
&lt;p&gt;Have a great rest of the summer!&lt;/p&gt;</content><category term="minecraft"></category><category term="techcamp"></category><category term="3D printing"></category><category term="computer science"></category></entry><entry><title>Minecraft &amp; Game Design Camp</title><link href="/minecraft-game-design-camp.html" rel="alternate"></link><published>2018-06-29T00:00:00-04:00</published><updated>2018-06-29T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2018-06-29:/minecraft-game-design-camp.html</id><summary type="html">&lt;h1&gt;Summer Camps - Minecraft &amp;amp; Game Design&lt;/h1&gt;
&lt;h3&gt;&lt;code&gt;6/25/2018 - 6/28/2018&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This week was a great start to the Summer Camp season! The Minecraft camp entailed Minecraft Modding and circuit building with redstone, while campers in Game Design put together mobile games and PC games. In both camps, students learned …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Summer Camps - Minecraft &amp;amp; Game Design&lt;/h1&gt;
&lt;h3&gt;&lt;code&gt;6/25/2018 - 6/28/2018&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This week was a great start to the Summer Camp season! The Minecraft camp entailed Minecraft Modding and circuit building with redstone, while campers in Game Design put together mobile games and PC games. In both camps, students learned core fundamentals of Computer Science, friends were made, and everyone had a blast!  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/2018/6_25_18_afternoon2.jpg" alt="unity" style="width: 640px;"/&gt;  &lt;/p&gt;
&lt;h1&gt;Minecraft Camp&lt;/h1&gt;
&lt;p&gt;During the Minecraft camp, we learned &lt;em&gt;software&lt;/em&gt; techniques by learning how to code and use Minecraft mods on Raspberry Pis and laptops. We also learned how computer &lt;em&gt;hardware&lt;/em&gt; works by learning how to create circuits in the Minecraft iPad app. Below gives a little more detail on what we did to learn both hardware and software fundamentals.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware&lt;/strong&gt;: campers learned how to use redstone and other items in Minecraft to build working circuits that served a purpose (i.e. setting a trap for creepers, automatic door openers, etc).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: campers learned the basics of coding using Python, a programming language to build and tweak mods in Minecraft. As well, some campers learned how to perform Minecraft modding using the Java programming language.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For more information on Minecraft and saftey tips for your child, check out the blog,&lt;/strong&gt; &lt;a href="http://blog.techemstudios.com/minecraft-for-parents.html"&gt;Minecraft for parents&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Creating Minecraft Mods&lt;/h2&gt;
&lt;p&gt;Enchanted bridges, LEDs that respond to your game, exploding minecarts... These were just a few of the mods from the week! Campers learned the ways of Minecraft Modding by learning core principles of programming. They modified and deployed code written in either Java or Python.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/2018/6_25_18_morning2.jpg" alt="unity" style="width: 520px;"/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;To use mods written in Python, students used Python and the Raspberry Pi. The Raspberry Pi is an interactive learning tool for modding. Campers wired up their Pi to a breadboard with LEDs. From here they wrote Python code to have their Minecraft character control the physical LEDs!  &lt;/p&gt;
&lt;p&gt;Below are steps to mirror the environment (using Python or Java) your child worked on during the modding sessions in Minecraft Camp. Feel free to ask the Tech Em team any questions on the process &lt;a href=""&gt;class-info@techemstudios.com&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;h3&gt;Python Modding&lt;/h3&gt;
&lt;p&gt;Get started with Python Modding on a computer or a Raspberry Pi (after installing the OS). 
&lt;iframe src="https://docs.google.com/presentation/d/1-7Fdm66mEfuiEAsiZjE_lRD8oTRGe0oDRMhDMjUbSWk/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;  &lt;/p&gt;
&lt;h3&gt;Java Modding&lt;/h3&gt;
&lt;p&gt;Most mods written in Java are executed through Eclipse IDE. Check out the slides below to get started.  &lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/d/19Z8Q7-M_X4YKn52Rlijwlv2zmWInVMudchGzFaxpHt0/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;h2&gt;Building Circuits With Redstone&lt;/h2&gt;
&lt;p&gt;The campers learned how to build simple binary logic gates using the famous, redstone in Minecraft.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/2018/6_25_18_morning.jpg" alt="unity" style="width: 620px;"/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;Campers built a few binary logic gates (AND, OR, NOT gates) with redstone, redstone torch, redstone lamp, repeaters, and a lever in their inventory. The lever is used as our switch. The lever has two states, ON or OFF (1 or 0, hence &lt;em&gt;binary&lt;/em&gt;). The lever is used to provide a starting point for current, or send a signal through the redstone dust. Think of the redstone dust as a road for the current to run on, like a wire. In minecraft, increasing the amount of redstone logic gates increases the amount of functions you can have it perform (i.e. opening gates or even creating elevators). This directly mirrors computer logic to increase functionality and memory, the more logic gates, the more circuits, the more things a computer can do!    &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="minecraft logic" src="images/minecraft-screen-gate.jpg"&gt;&lt;br&gt;
&lt;em&gt;A few logic gates represented in Minecraft.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Game Design Camp&lt;/h1&gt;
&lt;p&gt;To continue working on your game design from Hyperpad at home, feel free to email &lt;a href=""&gt;class-info@techemstudios.com&lt;/a&gt;. You will be sent a link to download a zipped file of the game, then prompted to open this up with Hyperpad.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The above is easier to have Hyperpad already installed; Hyperpad is only available as an iPad app&lt;/em&gt;.  &lt;/p&gt;
&lt;h2&gt;Tips on Publishing&lt;/h2&gt;
&lt;p&gt;Once you decide to publish your game, go ahead a run though what a user (not yourself) might think of your game as you play it. Ask your yourself questions: is it too difficult? Is it obvious where to go? Is it too easy? Does there need to be more obstacles or traps? etc. Then, get someone else to test out your game, just as in class, and get there feedback. Use this feedback to add or remove from your game. The more you run through this process, the better off you'll be! After you publish your game, you will likely receive feedback from the Hyperpad community. This is great, because it increases the pool of people you can reach to test out your game. Take the community's comments in-stride, but I encourage you to use any feedback to make your game better, and re-publish. You'll end up with an great game!  &lt;/p&gt;
&lt;h2&gt;What We Did&lt;/h2&gt;
&lt;p&gt;The camp was split into a couple groups. One group worked on the app, Hyperpad, while the other worked wih Unity.  &lt;/p&gt;
&lt;p&gt;Hyperpad allowed campers to experience event-driven programming and learn the basics of game logic. The app can feel a little advanced, but we quickly overcame this hurdle with &lt;em&gt;Design Thinking&lt;/em&gt; in mind. This is a user-centered approach, the basics of it explained in &lt;em&gt;Tips on Publishing&lt;/em&gt;. Essentially, we approached designing our games with questions and a plan at-hand. An important step in the process is testing. Through testing, the camp helped each other improve their games, as well as learn new tricks from one another.  &lt;/p&gt;
&lt;p&gt;Unity has a little more advanced game development environment. In this group a 2D Pong game quickly morphed into a Mario-infused Pong game, multiplayer!  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/2018/6_25_18_afternoon.jpg" alt="unity" style="width: 640px;"/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;Please feel free to contact us if you have any issues or need help getting started with the game design tools we used during the week.  &lt;/p&gt;
&lt;p&gt;We hope to see you again this summer!  &lt;/p&gt;</content><category term="minecraft"></category><category term="modding"></category><category term="coding"></category><category term="hyperpad"></category><category term="design thinking"></category><category term="game design"></category><category term="computer science"></category></entry><entry><title>Code Em Winter 2018</title><link href="/code-em-winter-2018.html" rel="alternate"></link><published>2018-01-09T00:00:00-05:00</published><updated>2018-01-09T00:00:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2018-01-09:/code-em-winter-2018.html</id><summary type="html">&lt;p&gt;Concepts and Homework&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Week of January 8th, 2018&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;This blog will be used for both the Tuesday and Thursday night class. I will try to clearly show separations between each night where needed.  &lt;/p&gt;
&lt;h2&gt;Happy New Year!&lt;/h2&gt;
&lt;p&gt;&lt;img alt="welcomeoctocat" src="images/welcometocat.png"&gt;  &lt;/p&gt;
&lt;h2&gt;What We'll Do&lt;/h2&gt;
&lt;p&gt;During this winter session of Code Em we will learn by doing! We will learn new concepts and solidify concepts we have come across before by taking a project-based approach during the twelve weeks. To name a few, project topics can include (not limited to): device building and programming with the &lt;a href="https://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt;, robot creations, 3D printing, &lt;a href="http://blog.techemstudios.com/how-to-make-a-raspberry-pi-soundboard.html"&gt;Pi Soundboard&lt;/a&gt;, Python game design with &lt;a href="http://pygame.org/news"&gt;Pygame&lt;/a&gt;, web applications, ethical hacking with Pi Zero or &lt;a href="https://www.kali.org/"&gt;Kali Linux&lt;/a&gt;, Minecraft Modding with Java, Alexa skills, &lt;a href="http://blog.techemstudios.com/make-a-raspberry-pi-powered-alexa.html"&gt;PiLexa&lt;/a&gt; and visual-based programming projects like &lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt; and &lt;a href="https://www.gethopscotch.com/"&gt;Hopsctoch&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The goal is to have one or several awesome projects by the end of our twelve weeks together. After completing projects, we will make sure we are comfortable enough with the stuff we learn to continue beyond the class.  &lt;/p&gt;
&lt;p&gt;While working on projects, students will have the opportunity to gain or expand their knowledge through a variety of programming languages and projects based on experience level, building from visual-based languages to text-based, like Python etc. They will learn source code control, software design, reverse engineering, bug resolution, and coding environments. &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;Whether we work in groups or individually during the weeks, we will always work with someone, i.e. instructors/mentors. To ensure this, we will use two key resources for help and teamwork: &lt;a href="http://blog.techemstudios.com/slack.html"&gt;Slack&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;; both great tools for team collaboration. Slack is a messaging app and GitHub will serve as a place to save and keep track of all project work. We will use Slack to ask questions and collaborate on projects. We will use GitHub to save all our work to, keep track of projects, as well as help one another to solve any issues. &lt;strong&gt;You will need an accessible email account.&lt;/strong&gt; Which bring us to our first assignment!  &lt;/p&gt;
&lt;h2&gt;Assignment 1&lt;/h2&gt;
&lt;p&gt;Create a new account for &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; and &lt;a href="https://github.com/join?source=header-home"&gt;GitHub&lt;/a&gt; --you will need to verify the email address you sign up with for both. Don't forget your usernames and passwords! Once you have your own Slack and GitHub account, email your usernames to class-info@techemstudios.com or joe@techemstudios.com, so we can add you to the class' Slack team. For those that already have both accounts, just make sure you can log into them! For more direction on joing the team on Slack, check out the intro to slack blog &lt;a href="http://blog.techemstudios.com/slack.html"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/slack-logo.jpg" alt="slackin" style="width: 200px;"/&gt; &lt;img src="images/github.jpg" alt="githubin" style="width: 200px;"/&gt;  &lt;/p&gt;
&lt;p&gt;Next week, we will narrow down project ideas and get our hands dirty.  &lt;/p&gt;
&lt;h3&gt;The Random Number Game&lt;/h3&gt;
&lt;h4&gt;What is Code?&lt;/h4&gt;
&lt;p&gt;On Thursday night, we took the random number game we have all played before and put it into a Python program using the chromebooks. Think of &lt;em&gt;code&lt;/em&gt; or &lt;em&gt;coding&lt;/em&gt; as a way to represent something, just in a different way. Here, we simply took a real-world game and used Python to represent it. Code is a way for conveying information between people; in this class, between people and machines. Code helps us communicate. You use code everyday without thinking about it, i.e. when you talk with someone, or when you write or read something --speech and text are considered code. So, you have been coding almost all of your life! Throughout class, we'll learn different ways to &lt;em&gt;code&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;We briefly talked about the fastest way to guess the correct number in a random number guessing game. We can divide the range of numbers in half on each guess. If the range is between 1 and 100, we can guess 50 first. If 50 is higher than the number picked, we now know the number is between 1 and 50, so we cut the range of possibilities in half! Then we can divide the range further by asking if the number is 25, and so on. This technique is how computers search through an ordered list, &lt;strong&gt;binary search&lt;/strong&gt;.  &lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;m thinking of a number between 1 and 100.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GameRunning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;GameRunning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Guess a number between 1-100: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;GameRunning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;You guessed correctly!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;GameRunning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your guess was too high!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;GameRunning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your guess was too low!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you begin to write a program, it can seem overwhelming at first. We will learn some techniques in a general software development process and learn how to break up large problems into small parts to tackle them individually. We'll do a deep dive into all the syntax, methods, data types and more, involved with programming languages throughout the session. For now, I'll try to lay out each part of this program in a plain way:  &lt;/p&gt;
&lt;p&gt;Looking at the program above...&lt;br&gt;
&lt;code&gt;number = random.randint(1, 100)&lt;/code&gt; tells the program to choose a random integer between the range of 1 and 100 and put it into a variable, &lt;code&gt;number&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;The next line uses Python's &lt;code&gt;print()&lt;/code&gt; function. This function tells the program to display to the screen whatever is inside the parentheses. So, when the program is executed, the user understands the computer is &lt;em&gt;thinking&lt;/em&gt; of a number between 1 and 100.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;GameRunning = True&lt;/code&gt; is a variable equal to True. We will use this to either end the game or keep playing the game.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;while GameRunning:&lt;/code&gt; is a loop (something that repeats). Any indented line underneat this will repeat as long as GameRunning is True.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;guess = int(raw_input("Guess a number between 1-100: "))&lt;/code&gt; Displays to the user what is in between the quotes, pauses the program, and waits for the user to enter an integer.  &lt;/p&gt;
&lt;p&gt;The next three &lt;em&gt;blocks of code&lt;/em&gt; are &lt;strong&gt;conditional statements&lt;/strong&gt;. These check whether the user chooses the correct number, a number higher, or a number lower than the random number originally picked. The program will keep waiting for the user to enter a number, until they enter the exact number chosen by the program in the beginning. Then the program will end, because of our condition: &lt;strong&gt;if&lt;/strong&gt; the &lt;code&gt;guess&lt;/code&gt; is exactly equal to &lt;code&gt;number&lt;/code&gt;, &lt;strong&gt;then&lt;/strong&gt; &lt;code&gt;GameRunning = False&lt;/code&gt;.  &lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python -&lt;/strong&gt; a programming language relatively easy to understand and write.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable -&lt;/strong&gt; associates a name (variable) to a value (expression), so &lt;code&gt;&amp;lt;variable&amp;gt; = &amp;lt;expr&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loop -&lt;/strong&gt; Something that repeats.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Condition -&lt;/strong&gt; Tells the program to make a decision based on if something is True or False.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Binary Search -&lt;/strong&gt; How a computers searches through an ordered list.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Relational Operators -&lt;/strong&gt; Python compares what's on the left to what's on the right; usually used in a condition statement.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Equal to: &lt;code&gt;==&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Less than: &lt;code&gt;&amp;lt;&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Greater than: &lt;code&gt;&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't worry if this all seems foreign to you (or you feel rusty)! Together, we'll learn by doing and practice, until it becomes second-nature.  &lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h3&gt;Day Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Week of January 15th, 2018&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.google.com/doodles/martin-luther-king-jr-day-2018"&gt;MLK Day&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Start Projects&lt;/h2&gt;
&lt;p&gt;This week, we started work on a few different goals. As is the case for almost every Tech Em class, there are varying levels of experience. We broke off into groups based on experience level and interest:  &lt;/p&gt;
&lt;p&gt;New students (new to Code Em) started work on a &lt;em&gt;starter&lt;/em&gt; project to create a calculator program in Python with the end goal of using &lt;a href="https://docs.python.org/2/library/turtle.html"&gt;Turtle graphics&lt;/a&gt; to &lt;em&gt;draw&lt;/em&gt; out the result. Students started work on their foundation in computer science and coding with an introduction to coding using the &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; programming language.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/joetechem/c72df34a62fd416e1a0dc122bffa3335"&gt;Here is a link to the calculator program on GitHub&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;We will be working with Python quite a bit throughout class. It is free and available at &lt;a href="https://www.python.org/"&gt;python.org&lt;/a&gt;. You can continue to work on this project and/or practice more with Python at home by downloading Python from the link.  &lt;/p&gt;
&lt;p&gt;Returning Code Em students grouped up to either work on building a minecraft server on a Raspberry Pi, or started plans for a hands-on hardware project involving the &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-zero/"&gt;Raspberry Pi Zero&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Other students started work on a visual-based coding app, &lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;General Objective Outline&lt;/h2&gt;
&lt;p&gt;Every project needs a plan. To ge the most out of each project, each day we will work on following an objective list. Another end-goal for each project is to create an easy-to-follow tutorial on whatever project you are working on. After each project is finished, we will publish these tutorials to the &lt;a href="http://blog.techemstudios.com/"&gt;Tech Em blog page&lt;/a&gt; so others can replicate the steps you took!  &lt;/p&gt;
&lt;p&gt;Documenting your projects as you work on them will do a few useful things; help you understand what your are doing, keep track of where you are in the process, and help validate your project. The key is to log your work, so that other interested folks can learn what you did by following steps you took to get the same result. Similar to science experiments! --which you may have learned about already.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Assignment 2&lt;/h2&gt;
&lt;p&gt;Make sure you have a GitHub and Slack account you can log into, and that you have been added to our class Slack Team. If you need help getting on the team, send an email to class-info@techemstudios.com.  &lt;/p&gt;
&lt;p&gt;Once on the Slack team, post your first message to break the ice! Post a relevant tech fact or personal experience in the &lt;code&gt;# code_em&lt;/code&gt; channel (e.g. I have been learning HTML on my own, or I prefer to use an iPad over a laptop, or my basketball team won a game recently, etc.)  &lt;/p&gt;
&lt;p&gt;Next week, we'll get started on creating our own GitHub repositories for each group to contribute to.  &lt;/p&gt;
&lt;p&gt;Enjoy the snow!!!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;week of 01/22/2018&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Practice!&lt;/h2&gt;
&lt;p&gt;If you do not have access to Python at home, you can download it free from &lt;a href="https://www.python.org/"&gt;python.org&lt;/a&gt;, or in an internet browser via &lt;a href="https://www.pythonanywhere.com/"&gt;PythonAnywhere.com&lt;/a&gt;. For either options, you can follow instructions on help setting up your environment to practice at home &lt;a href="http://www.allendowney.com/wp/books/think-python-2e/"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;h3&gt;Project Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scratch Project  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We continued building our Scratch program portfolio by coding mini interactive games.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Turtle Calculator    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The link to the &lt;a href="https://gist.github.com/joetechem/e5a213b8d44e8c6ca71fd8224ac64df3"&gt;GitHub gist&lt;/a&gt;. This gist outlines all the steps for the groups working on the Python Turtle Calculator project, completed during class. There are some challenges found here, where the groups from Tuesday and Thursday night can check out for more practice as well. We also took our first steps in learning Version Control via GitHub.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Robot Project  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We laid out a list of all the materials we need for the project: Pi Zero, pimoroni pHAT, DC motors, wheels, etc. Students create their own sketches of unique design builds. We'll incorporate 3D design and printing for this project  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minecraft Pi Server  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This group fired up a Raspberry Pi and tested their script setup for a running server. We also tested connecting to the server from other devices; outcome: success! &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All groups continued their documentation of steps taken to help prepare for creation of the project's &lt;a href="https://open-source-guide.18f.gov/making-readmes-readable/"&gt;README&lt;/a&gt; and brainstormed their next project endeavour, e.g. website app, minecraft modding, music and sound projects etc.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;to be continued: day four &amp;amp; five&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;week of 02/12/2018&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Quick Review &amp;amp; Look of Python&lt;/h2&gt;
&lt;p&gt;Thursday night we did a quick a review and quickly went over some core concepts in Python. Though we only scratched the surface of some, we will get to those in more detail in the following projects. First, we dove into the Python Interpreter, a place where you can quickly try out and test ideas without having to create, save, and run a program. We also introduced some useful built-in functions, like &lt;code&gt;type()&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;By the end of our last project, we practiced many of these concepts already. The point of the &lt;em&gt;quick&lt;/em&gt; review and intro was to ensure we are ready to move on to bigger things, confidently!  &lt;/p&gt;
&lt;h4&gt;Concept Highlights&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Types (found in every language):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integers (INT)  &lt;/li&gt;
&lt;li&gt;FLOATs  &lt;/li&gt;
&lt;li&gt;STRINGs (STR)  &lt;/li&gt;
&lt;li&gt;Boolean (BOOL)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Structures:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists  &lt;/li&gt;
&lt;li&gt;Dictionaries  &lt;/li&gt;
&lt;li&gt;Tuples  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below, the content we went over during the first part of class:  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQOz_zbnRaEQZRCRuZ5f3feEzvudkCIxoRUHkUfhRzgoJloihVmNqVG6kVyfK-p0YV7SI4S06dbE7Uj/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="640" height="496" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;h2&gt;Program Planning&lt;/h2&gt;
&lt;p&gt;We talked about pseudocode as a way to plainly write out what is happening, line-by-line in a program. We will get to a point where this is second-nature. We also sketched a quick &lt;em&gt;program flow&lt;/em&gt; of part of our next mini-project, a temperature converter program complete with temperature warnings, where we will add a user interface to interact with.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/flow.jpg" alt="flow" style="width: 400px;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;h2&gt;Assignment 6&lt;/h2&gt;
&lt;p&gt;We started drawing out our program's flow towards the end of class, so finish flow drawing outside of class. See if you can make a program flow for another program you've already created or a new one.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Seven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;week of 02/19/2018&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We picked up where we left off last week, understanding a program's &lt;em&gt;flow&lt;/em&gt;. The simple temperature program takes input, handles the input, and outputs the result. Instead of laying out formal steps, we checked out how this program would look with &lt;em&gt;pseudocode&lt;/em&gt;. Pseudocode is simply writing (in English) a desrciption of what a program does.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Receive user input, a temperature in Celsius.
Convert the celsius temperature into fahrenheit.
Output the fahrenheit temperature.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking at a program in plain english can help you begin to write it in a computer programming language, like Python:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A function that takes celsius temp input,&lt;/span&gt;
&lt;span class="c1"&gt;# converts the input into fahrenheit,&lt;/span&gt;
&lt;span class="c1"&gt;# then outputs the fahrenheit temperature.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What is the Celsius temperature? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The temperature is &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; degrees fahrenheit.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Assignment  7&lt;/h2&gt;
&lt;p&gt;Add conditionals to the temperature converter program by adding temperature warnings, based on whether the fahrenheit temperature output is hot or cold. Check out the program flow diagram from earlier.  &lt;/p&gt;
&lt;p&gt;Part of the pseudocode might look something like: "if fahrenheit is more than 90, then return temperature warning."  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eight&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;week of 02/25/2018&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Mad Libs&lt;/h2&gt;
&lt;p&gt;You can create fun, interactive programs! The class got started with an executable program asking input for a series of nouns, verbs, and adjectives. The program then inserts those answers into a story. Students received some funny results! We then changed up the program to make it our own.  &lt;/p&gt;
&lt;p&gt;The mad libs program:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter a food: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;adj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter a adjective:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;adj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter another adjective: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;noun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter a noun: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;verb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter a verb present ending in ing: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;noun2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter a noun plural: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;noun3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter another noun plural: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;With a new beginning and a fresh piece of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Full of inspiration and &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adj1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; thoughts, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lets begin this year with a &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adj2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Gone are the days of regret and &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;verb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;These rooms full of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;noun2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It&amp;#39;s time to move with courage, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Full of confidence and &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;noun3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Let&amp;#39;s begin this year with a &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;adj2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;noun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By setting expressions as a value in a variable, we can see how that is useful for when we manipulate them later.  &lt;/p&gt;
&lt;h2&gt;Assignment 8&lt;/h2&gt;
&lt;p&gt;Create your own version of a Mad Libs in Python. Bonus: save this program in your own GitHub repository.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Nine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;week of 03/05/2018&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;User Interface&lt;/h2&gt;
&lt;p&gt;So far our programs' output has been text-based. There are several tools to use in Python to have your programs output be &lt;em&gt;aesthetically&lt;/em&gt; pleasing. One of which is a &lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2011/assignments/graphics.py"&gt;simple graphics library&lt;/a&gt; written by John Zelle. Students from the fall session of Code Em probably remember checking this out. This program uses a fundamental concept in programming, &lt;strong&gt;Object-oriented&lt;/strong&gt; programming/design (OO). We first dove in by writing a program that registers mouse clicks. Look to &lt;a href="http://blog.techemstudios.com/code-em-fall-2017.html"&gt;last session's blog&lt;/a&gt;, starting at Day Nine.  &lt;/p&gt;
&lt;h2&gt;Adding a GUI to our Temperature Converter&lt;/h2&gt;
&lt;p&gt;After reviewing some basics of OO, we started to set up some graphical user interface (GUI) for our simple temperature converter program; complete with text input from a user and clickable buttons.  &lt;/p&gt;
&lt;p&gt;We will finish this next week, and move onto final projects.  &lt;/p&gt;
&lt;h3&gt;The temp converter gui code&lt;/h3&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/joetechem/cecf74583b2ff859ec2a7012a20aaa5f.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;h2&gt;The &lt;span style="color:red"&gt;R&lt;/span&gt;&lt;span style="color:orange"&gt;O&lt;/span&gt;&lt;span style="color:yellow"&gt;Y&lt;/span&gt;&lt;span style="color:green"&gt;G&lt;/span&gt;&lt;span style="color:blue"&gt;B&lt;/span&gt;&lt;span style="color:purple"&gt;I&lt;/span&gt;&lt;span style="color:violet"&gt;V&lt;/span&gt; Guessing Game&lt;/h2&gt;
&lt;p&gt;A fun program where we learned a little more about what we can do with lists, functions, loops, random, and importing modules. Below are the steps in the terminal we took during class to get started. Check out the repo &lt;a href="https://github.com/joetechem/roygbiv"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;h4&gt;Terminal commands to get started with roygbiv&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/joetechem/roygbiv  
&lt;span class="nb"&gt;cd&lt;/span&gt; roygbiv
geany v2_roygbiv.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we run &lt;strong&gt;v2_roygbiv.py&lt;/strong&gt;, we got an idea of how the game works. Then, we added new features to the game with a few lines of code to change the user experience. Inside the &lt;strong&gt;src&lt;/strong&gt; folder, you can see each feature added in steps.  &lt;/p&gt;
&lt;h2&gt;Assignment 9&lt;/h2&gt;
&lt;p&gt;Explore drawing graphics using &lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2011/assignments/graphics.py"&gt;graphics.py&lt;/a&gt;. Make a program or two, which use objects from this file to output any graphic. You can copy and paste the code into a file called, graphics.py. Be sure your program knows where to grab graphics.py (you can save it in the same directory/folder). &lt;em&gt;AND/OR&lt;/em&gt; If you were not able to take the temp converter gui handout home with you, click the GitHub gist above to get it running at home. You will see it has a basic look to it; tweak the code to add colors, or other features, and upload your file to your own GitHub repo.  &lt;/p&gt;
&lt;p&gt;For those that have not created a GitHub account and are not on the Tech Em Students Slack team, please do so! This will be important for saving and keeping up to date with projects, as we are approaching the end. See earlier on this page for more details. In short, once you have created a GitHub account, email your username class-info@techemstudios.com, and you will be added as a collaborator to our class project and added to the class Slack team.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Ten&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;week 03/12/2018&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Python SlackBot&lt;/h2&gt;
&lt;h3&gt;Class Project's Starting Steps&lt;/h3&gt;
&lt;p&gt;As we continue to merge our project endeavours, we started class this week with a discussion on &lt;strong&gt;voice-controlled personal assistants&lt;/strong&gt;. In other words, &lt;a href="https://developer.amazon.com/alexa"&gt;Amazon Alexa&lt;/a&gt;, &lt;a href="https://www.apple.com/ios/siri/"&gt;Apple Siri&lt;/a&gt;, &lt;a href="https://www.microsoft.com/en-us/windows/cortana"&gt;Windows Cortana&lt;/a&gt;, etc. These and others like it, have been developed (and continuing to be developed) to help users (humans) interact with technology a little more naturally, with voice.  &lt;/p&gt;
&lt;p&gt;One of our final projects we'll be working on together will follow closely in-line to the above. Instead of voice-controlled, yours will be a &lt;em&gt;text-controlled&lt;/em&gt; personal assistant, which runs on a Raspberry Pi!! To achieve this, we will learn how to use tools used by &lt;strong&gt;real&lt;/strong&gt; software developers!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;We'll get to know these tools well, during the coming weeks.&lt;/em&gt;    &lt;/p&gt;
&lt;h2&gt;Command-Response Program&lt;/h2&gt;
&lt;h3&gt;Create your own Local ChatBot&lt;/h3&gt;
&lt;p&gt;Our first step in developing our DIY personal assistant, involved us writing a program that receives input (we'll call these &lt;em&gt;commands&lt;/em&gt;), processes them, then returns a response. In short, you will conduct a program to return a response based on user input.  &lt;/p&gt;
&lt;p&gt;--just like the widely used personal assistants (Alexa, Cortana, and Siri) mentioned before.  &lt;/p&gt;
&lt;h4&gt;The starting code for the python command response program&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Put your commands here&lt;/span&gt;
&lt;span class="c1"&gt;# Keep the values lowercase&lt;/span&gt;
&lt;span class="n"&gt;COMMAND1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;what?&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Your handling code goes in this function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Determine if the command is valid. If so, take action and return&lt;/span&gt;
&lt;span class="sd"&gt;        a response, if necessary.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;COMMAND1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Huh?&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Why thank you, I don&amp;#39;t know what else to say.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, I am sirexa, your own personal bot. Awaiting your command.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;sirexa -&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This starter template knows how to respond to only one command, &lt;code&gt;COMMAND1&lt;/code&gt;. So, when we ran this code, typed in &lt;code&gt;what?&lt;/code&gt;, and hit the enter key, it would respond with &lt;code&gt;huh?&lt;/code&gt;. For anything &lt;code&gt;else&lt;/code&gt; you enter, the program responds with a generic "I don't know" response, because you have not coded it to handle more than one command!  &lt;/p&gt;
&lt;p&gt;Just as when a real &lt;em&gt;user-controlled&lt;/em&gt; personal assistant is powered on, it continously waits for user input to respond to. So, in our program, we have a Python &lt;code&gt;while&lt;/code&gt; loop which also continously waits for user input/more commands. &lt;/p&gt;
&lt;p&gt;We spent the rest of class making our chatbots &lt;em&gt;smarter&lt;/em&gt;, by adding more commands and &lt;strong&gt;handlers&lt;/strong&gt; to respond to those commands.  &lt;/p&gt;
&lt;h4&gt;Here is an example of how we added more commands and handlers&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;COMMAND1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;what?&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;COMMAND2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;what are you waiting for?&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;COMMAND1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Huh?&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;COMMAND2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I am waiting for students to add more commands!&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Why thank you, I don&amp;#39;t know what else to say.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Assignment 10&lt;/h2&gt;
&lt;p&gt;Voice-controlled assistants are able to stop waiting for user input once they are told to (i.e. &lt;em&gt;"Alexa, stop"&lt;/em&gt;). Code your command-response program to stop running, by adding a "quit" command that makes the program stop running. Add this code to your own GitHub repository.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eleven &amp;amp; Twelve&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;weeks March 19th &amp;amp; 26th&lt;/code&gt;  &lt;/p&gt;
&lt;h1&gt;The Power of Python!!!&lt;/h1&gt;
&lt;h2&gt;Class SlackBot Project&lt;/h2&gt;
&lt;h4&gt;Team Collaboration&lt;/h4&gt;
&lt;p&gt;As we discussed during the previous weeks, &lt;em&gt;we'll be working on together will follow closely in-line to the above. Instead of voice-controlled, yours will be a &lt;/em&gt;text-controlled&lt;em&gt; personal assistant, which runs on a Raspberry Pi!! To achieve this, we will learn how to use tools used by &lt;strong&gt;real&lt;/strong&gt; software developers!&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Our first steps were to edit code in your individual command-response program &lt;em&gt;(see the python code from last week)&lt;/em&gt;. The next steps are to aggregate everyone's code onto one single GitHub repository. This will allow us to actively co-operate on our class project while in class, as well as anywhere!  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;h1&gt;SlackBot Project Overview&lt;/h1&gt;
&lt;iframe &lt;iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQ0EBi3gmQsNgBQK2nGpMi7Qj5oQiHN7md128YW5DIi11PvGC0L7B41LhDO-g8mGYRDPZNBEluWLgwi/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="640" height="496" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;Before moving on, I strongly recommend checking out the slides above. This outlines some of the flow of the project, helps to remind you of what we did during class, and should help you to continue working on the project even beyond class; from anywhere in the world!  &lt;/p&gt;
&lt;p&gt;We talked about in class; we can think of a GitHub repository (repo) simply as a folder. We &lt;em&gt;cloned&lt;/em&gt; (copied) the repo for our Slackbot project, &lt;strong&gt;code_em&lt;/strong&gt; onto the computer you use in class. The picture below can hopefully help visualize what is going on when you clone a repo, make local changes to it, then submit your changes to be updated on the GitHub repo.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pull-push" src="images/github-repos-flow.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;On the left, represents the folder where our class project resides on GitHub. The folder on the right represents your cloned version of the class project, which resides on your computer. These folder communicate with one another when you tell it to by using the git commands (these can be found in the slides above), &lt;em&gt;git pull&lt;/em&gt; (updates &lt;strong&gt;your&lt;/strong&gt; folder with changes your classmates made) and &lt;em&gt;git push&lt;/em&gt; (sends your changes to the GitHub folder).  &lt;/p&gt;
&lt;h4&gt;Then, a sequence of events is kicked off:&lt;/h4&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/IMG-3004.jpg" alt="circle" style="width: 700px;"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;substitute "Actor" for student&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;This project helped you to further understand how we can use GitHub to work in teams, learn more tools real software developers use, the Internet of Things (IoT), shed a light on how voice-enabled personal assistants (Alexa, Siri, etc.) can be modified by developers like &lt;strong&gt;you&lt;/strong&gt;, and further shows how Python can be used to perform all sorts of things!  &lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="http://register.techemstudios.com/item/code-em"&gt;Register.TechEmStudios.com&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="raspberry pi"></category><category term="technology"></category></entry><entry><title>Code Em Fall 2017</title><link href="/code-em-fall-2017.html" rel="alternate"></link><published>2017-09-27T00:00:00-04:00</published><updated>2017-09-27T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-09-27:/code-em-fall-2017.html</id><summary type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;09/21/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Code Em Kick Off&lt;/h3&gt;
&lt;p&gt;We started with the usual introductions to break the ice. Code Em has newcomers as well as veterans, so we'll work together to get everyone on the same page of our computer science adventures. Throughout the fall, we will learn effective …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;09/21/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Code Em Kick Off&lt;/h3&gt;
&lt;p&gt;We started with the usual introductions to break the ice. Code Em has newcomers as well as veterans, so we'll work together to get everyone on the same page of our computer science adventures. Throughout the fall, we will learn effective ways to think (best approaches to tackle problems), become affluent with coding via the Python programming language, and we will learn how to apply the same tools, used by software engineers in the real world.  &lt;/p&gt;
&lt;h4&gt;GitHub &amp;amp; Slack&lt;/h4&gt;
&lt;p&gt;We will be harnessing GitHub during each class. This is a site used by software developers to collaborate on the build and upkeep of projects. For Code Em, you will &lt;em&gt;push&lt;/em&gt; all files/projects you are working on to your own repository (folder). Your repository will continuously be updated as we move forward in the class. When you use GitHub, you essentially have a portfolio of your work you can access outside of class. This will be a great start to feel comfortable on how to use GitHub. Especially when we begin working on the same projects together, we'll get a feel for how real software engineers develop applications. Visit &lt;a href="https://github.com/"&gt;GitHub.com&lt;/a&gt;, sign up with your email account, create a GitHub username/password (write it down somewhere, so you remember it!), and click &lt;strong&gt;Sign Up for GitHub&lt;/strong&gt;. GitHub will send you a verification email to the email you signed up with. Click the link to verify and you will be ready to git!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;More detailed instructions can be found on the &lt;a href="http://blog.techemstudios.com/github-part-one.html"&gt;Tech Em blog page&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; is a messaging app for teams of large companies, i.e. Google; and small startups, i.e. Tech Em Studios. Slack will be used in class for questions about material we are learning in class, questions on projects, and communicating with your peers. You will not only have the current instructors as your resource, you will have the whole &lt;a href="http://techemstudios.com/about-us.html"&gt;Tech Em Team&lt;/a&gt;! You will receive an email from Slack, which holds an invitation to join the Tech Em Students Slack team.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;More details on joining Slack can be found on the &lt;a href="http://blog.techemstudios.com/slack.html"&gt;Tech Em blog page&lt;/a&gt;&lt;/em&gt;.  &lt;/p&gt;
&lt;h3&gt;What we Learned&lt;/h3&gt;
&lt;h4&gt;How to Think&lt;/h4&gt;
&lt;p&gt;More than learning to code, we will learn how to think, or how to approach and solve problems (in general) in efficient ways.  &lt;/p&gt;
&lt;h4&gt;Quick Computer History&lt;/h4&gt;
&lt;p&gt;What are computers? Early computers were "tools" (mechanical devices) people used to them solve math problems. Modern computers are devices that can be programmed to carry out a task. We started at the &lt;em&gt;prehistory&lt;/em&gt; era with Tally Sticks. We ended with the Babbage Machine (marked transition from calculation to computation) and Ada Lovelace, considered to be the first computer programmer. We discussed the difference of hardware to software and what makes a program, a program.  &lt;/p&gt;
&lt;h4&gt;Python&lt;/h4&gt;
&lt;p&gt;Python is a programming language that is easy to write, understand and used for a growing variety of applications. We dove into Python, by creating small snippets of code in the interpreter, a place to quickly test ideas rather than creating and executing an entire program. We explored data types (found in all languages) and created a program with variables.  &lt;/p&gt;
&lt;h5&gt;Download Python&lt;/h5&gt;
&lt;p&gt;To practice at home, you can download Python for free from &lt;a href="https://www.python.org/downloads/"&gt;python.org&lt;/a&gt;. On the chromebooks/&lt;a href="https://github.com/dnschneid/crouton"&gt;crouton&lt;/a&gt; we are using thi session, we will focus on &lt;strong&gt;Python 2.7&lt;/strong&gt;. If you download the latest Python (3.6), there are a few changes we can easily handle for what we are performing in class. So, it is up to you, which version you would like.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;09/26/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;We made our first repository on GitHub! This will be the place where we can upload all of our projects, so we can get to it beyond the class.  &lt;/p&gt;
&lt;h3&gt;Fetch, Decode, Execute&lt;/h3&gt;
&lt;p&gt;What happens when you fire up your favorite program? Consider a CD with your favorite game on it. This CD has tons of instructions already written on it, waiting to be read by your computer. When you insert the game, the CPU follows this process: &lt;strong&gt;Fetch&lt;/strong&gt; the first instruction; &lt;strong&gt;Decode&lt;/strong&gt; the instruction, translated into binary for the computer to understand; and finally, &lt;strong&gt;Execute&lt;/strong&gt; The computer carries out the instruction. Since there is more than one instruction, this process repeats to get the rest. The process repeats, from the moment you turn on your computer and does so with lightning-fast speed!  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In Python, a line that begins with a pound sign (#)  &lt;/span&gt;
&lt;span class="c1"&gt;# is known as a comment.  &lt;/span&gt;
&lt;span class="c1"&gt;# Comments are ignored by the program and are  &lt;/span&gt;
&lt;span class="c1"&gt;# considered &amp;quot;notes&amp;quot; to the programmer(s).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Expressions &amp;amp; Statements&lt;/h3&gt;
&lt;p&gt;We already saw this last week, but we'll put &lt;em&gt;names to faces&lt;/em&gt;. &lt;code&gt;print("Hello World!")&lt;/code&gt; is an example of a statement, a complete thought. A statement is a unit of code that does something, like creating a variable or returning the value of the variable. An expression is a combination of values, variables, and operators.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# example of a statement  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="mi"&gt;17&lt;/span&gt;

&lt;span class="c1"&gt;# examples of Expressions  &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lamb&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;lamb&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Variable and String Concatenation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Set two variables, first_name and last_name each equal to a string:  &lt;/span&gt;
&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ada&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lovelace&amp;quot;&lt;/span&gt;  
&lt;span class="c1"&gt;# Now combine the values using string CONCATENATION&lt;/span&gt;
&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;  
&lt;span class="c1"&gt;# Next, we&amp;#39;ll make a new variable that has a custom message for its value.  &lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The final output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello Ada Lovelace!&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# title() is a built-in function we used to capitalize the first letters of the strings in the full_name variable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Assignment One&lt;/h3&gt;
&lt;p&gt;Make an account on GitHub, and verify it from the email you received from GitHub. Create another Python program that concatenates variables and strings (similar to what we did above).  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/03/2017&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We did a quick review of what we've learned so far by typing &lt;em&gt;snippets&lt;/em&gt; of code into the Python interpreter, to get quick results. At the end of class we went though a brain teaser activity together to summarize everything.  &lt;/p&gt;
&lt;h3&gt;User Input&lt;/h3&gt;
&lt;p&gt;We can easily take input from the user in a program. This can add a bit of fun while coding and running your program. We have all at one point used an app or game that handles input from the user, i.e. a website requesting your username/email and password, etc. In Python, there is a built-in function to handle user input:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python 2.7&lt;/span&gt;
&lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Python 3+&lt;/span&gt;
&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command pauses your program and waits for the user to enter some text. After the user hits enter, we can have Python conveniently store it in a variable to make it easy to work with. Here's the example from class:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;How tall are you?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;What is your favorite animal?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our challenge was to handle all the information the user types in by returning a set a statements that makes sense of it all using concatenation (what we learned last week).  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;So, you are named &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, you are &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; tall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;and your favorite animal is a &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we use the function &lt;code&gt;input()&lt;/code&gt; or &lt;code&gt;raw_input()&lt;/code&gt;, Python automatically thinks the information entered by the user is a string. For instance, what if we wanted to add two numbers typed in by the user:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Give me a number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;number2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Give me another number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say the user typed in the number &lt;code&gt;5&lt;/code&gt; and the number &lt;code&gt;10&lt;/code&gt;. This returns...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;510&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not quite the answer we were looking for! Instead of adding the numbers, Python &lt;em&gt;squished&lt;/em&gt; them together. Why? Python thinks the numbers are strings. We can easily fix this by using another built-in function, &lt;code&gt;int()&lt;/code&gt;, short for integer. Maybe you remember INT from the first day. INT, or integer is one of four data types found in just about every programming language; it is a whole number, so it does not have a decimal point.  &lt;/p&gt;
&lt;h3&gt;Assignment Two&lt;/h3&gt;
&lt;p&gt;See if you can create a simple program that takes two numbers from the user and adds them together. Use the &lt;code&gt;int()&lt;/code&gt; function to do this. We'll go over the answer in class next week.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Four&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/12/2017&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Happy Ada Lovelace Day!!!  &lt;/p&gt;
&lt;h3&gt;Computational Thinking&lt;/h3&gt;
&lt;p&gt;Essentially, a useful way to approach and solve any problem. We will learn how to take real-world problems and make them "computable", or put them in program form in order to solve it. We started with an example on cleaning a whole house. Let's say your house is a complete mess! You are tasked with cleaning your whole house by a certain time. At first, this may seem overwhelming. However, if we take a computational thinking approach, we can &lt;em&gt;systematically&lt;/em&gt; begin to tackle this problem. Below are the general steps we took to how we could complete the task of cleaning the whole house.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Computational Thinking  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decomposition  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decompose: break down: divide &amp;amp; conquer  &lt;/li&gt;
&lt;li&gt;Break down a problem into smaller problems  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generalize   &lt;ul&gt;
&lt;li&gt;Be able to see the big picture  &lt;/li&gt;
&lt;li&gt;See how the smaller tasks make up the larger task  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recognize Patterns  &lt;ul&gt;
&lt;li&gt;Look for familiar things  &lt;/li&gt;
&lt;li&gt;Be able to see parts that repeat  &lt;/li&gt;
&lt;li&gt;Don't Repeat Yourself --&amp;gt; &lt;strong&gt;DRY&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithm Design  &lt;ul&gt;
&lt;li&gt;Make a plan to tackle the problem  &lt;/li&gt;
&lt;li&gt;Carry out the plan  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Computer System Layers&lt;/h3&gt;
&lt;p&gt;When we are working in one layer, we do not need to concern ourselves with the information in the surrounding layers. This way, we can just focus on what needs to be done in the moment. Think of abstraction as a mental model; a way to think about something. Have the unnecessary details hidden, so we can leave only the information we need to complete our goal.  &lt;/p&gt;
&lt;p&gt;Abstraction Examples:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Person Driving a Car  &lt;/li&gt;
&lt;li&gt;The only thing they need to focus on is the road ahead.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is unnecessary to worry about details of how the engine or electronics of the car work.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast Food Restaurant  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;At many restaurants, the names of meals have corresponding numbers.  &lt;/li&gt;
&lt;li&gt;The food prep has been trained to recognize the meal number, not worry about the full name.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Functions&lt;/h3&gt;
&lt;p&gt;We've already seen functions in action. For example, one of Python's built-in functions (already made and ready to be used), the &lt;code&gt;print()&lt;/code&gt; function, which we know returns the information we put inside of the parentheses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;--&amp;gt; &lt;code&gt;'Hello World'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;--&amp;gt; &lt;code&gt;123&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;A function is like a mini program that goes off and performs a specific task. The task of the &lt;code&gt;print()&lt;/code&gt; function is to display a value, or sequence of values. We can &lt;strong&gt;call&lt;/strong&gt; a function by using the function's name, followed by a set of parentheses.  &lt;/p&gt;
&lt;p&gt;For another example, we can create a variable that holds a value,  and we can display that value using the print() function.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Greetings!&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Same goes for the &lt;code&gt;raw_input()&lt;/code&gt; function; which we know from Day Three, pauses the program and waits for the user to type in some information. The values we give (or &lt;strong&gt;pass&lt;/strong&gt;) to a function inside the parentheses, are called &lt;strong&gt;arguments&lt;/strong&gt;.  &lt;/p&gt;
&lt;h3&gt;Turtle Graphics&lt;/h3&gt;
&lt;h4&gt;Interface Design&lt;/h4&gt;
&lt;p&gt;Python's turtle program (or &lt;strong&gt;module&lt;/strong&gt;), is a program that holds a slew of functions waiting to be used. All we have to do is put &lt;code&gt;import turtle&lt;/code&gt; towards the top of any python file we create and now, we can write instructions that display images using turtle graphics! Rather than explain the turtle module from scratch, take a look at the official python documentation on Turtle Graphics:  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an import turtle, give it the command turtle.forward(15), and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves. Give it the command turtle.right(25), and it rotates in-place 25 degrees clockwise."&lt;/em&gt; -&lt;a href="https://docs.python.org/3.3/library/turtle.html?highlight=turtle"&gt;Python 3.3.7 Doc&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Here's the first program we wrote together using turtle graphics:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;turtle&lt;/span&gt;

&lt;span class="c1"&gt;# name your turtle&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# tell your turtle where to go&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# so the window doesn&amp;#39;t disappear right away, add:&lt;/span&gt;
&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# or turtle.exitonclick()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Think of the "turtle" as a pen, marker, etc. We are giving this writing tool instructions to draw lines on a separate window (or piece of paper) --similar to our brain giving instructions to our hand to write or draw&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Above, we called &lt;strong&gt;methods&lt;/strong&gt; to tell our turtle where to go. Methods are like functions, but use different syntax. Calling a method is like making a request (&lt;em&gt;or command&lt;/em&gt;). You are telling frank (or whatever you named your turtle) to move forward, x-amount and turn, x-amount, and so on.  &lt;/p&gt;
&lt;h3&gt;Assignment Four&lt;/h3&gt;
&lt;p&gt;The example above creates a right angle. Create a python program that uses turtle graphics to make a complete square. You may at first, find your are repeating a set of instructions. Remember to stay &lt;strong&gt;DRY&lt;/strong&gt;, don't repeat yourself. You can use a loop function holding the instructions that repeat; making the amount you type, less.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Five&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/17/2017&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Solution to assignment four:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;turtle&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;### With a &amp;quot;for&amp;quot; loop ###&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;repeats the indented instructions underneath, 4 times.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;### Get the same solution with a &amp;quot;while&amp;quot; loop ###&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# However, this while loop repeats forever&lt;/span&gt;
&lt;span class="c1"&gt;# a while loop runs, as long as...&lt;/span&gt;
&lt;span class="c1"&gt;# we&amp;#39;ll learn later a few techniques to stop while loops&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Loops&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; statement is a loop, because the flow of execution runs through the body (anything indented below it), then loops back to the top. In the case above, the loop repeats four times.  &lt;/p&gt;
&lt;p&gt;A &lt;code&gt;while&lt;/code&gt; loop runs as long as, or &lt;em&gt;while&lt;/em&gt;, a certain condition is &lt;em&gt;True&lt;/em&gt;.  &lt;/p&gt;
&lt;h3&gt;Encapsulation&lt;/h3&gt;
&lt;p&gt;This is where we'll practice recognizing patterns. What if we wanted to reuse our code that draws a square, more than once? Our challenge is to put our square code into a reusable function. So, we'll define our own function rather than using a built-in one i.e. one of the "powers" of programming, we can create anything we want! First, we'll start by giving our function a name, "square".  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;turtle&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# name the function, with a generic parameter so we can use the function for more than one turtle&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Reusable function to draw a square.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# call the function, with the name of the turtle as the argument&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# create a new turtle to see how we can use the same function&lt;/span&gt;
&lt;span class="n"&gt;ally&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ally&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Above, we used &lt;strong&gt;encapsulation&lt;/strong&gt; by wrapping up a piece of code (or for loop &lt;em&gt;code block&lt;/em&gt;), then placed it inside a function. Why encapsulate? To stay &lt;strong&gt;DRY&lt;/strong&gt;, reuse code. "t" can now be any turtle. We call the same function; except, we pass the new turtle's name as an argument inside the parentheses of the new function. When we get to having more than one turtle use the function we created, we don't need to concern ourselves at this point with the code that makes the function do what it does; we're just happy it works. We only need to concern ourselves with creating multiple turtles which use the same function, and pass the arguments we want. We are communicating just the information that needs to be exchanged. In other words, we &lt;em&gt;encapsulate&lt;/em&gt; the details &lt;em&gt;inside&lt;/em&gt; the function. This is a useful tool to keep in mind as we get into larger programs. This idea of &lt;strong&gt;hiding the unnecessary details to focus on the goal at hand&lt;/strong&gt; is familiar to us, because it is the idea of abstraction.  &lt;/p&gt;
&lt;h3&gt;Generalization&lt;/h3&gt;
&lt;p&gt;We added a new parameter, "length" to the &lt;code&gt;square()&lt;/code&gt; function. Instead of specifying a set length, &lt;code&gt;100&lt;/code&gt; in the loop, we leave the value open to change. In other words, we'll make the function more "general" and less specific.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;turtle&lt;/span&gt;

&lt;span class="c1"&gt;# tell python the names of your turtles&lt;/span&gt;
&lt;span class="n"&gt;frank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ally&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;albert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Reusable function to draw a square.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# changed 100 to the generic term, length&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# call the function like last time, now with two arguments:&lt;/span&gt;
&lt;span class="c1"&gt;# turtle name, length of the line&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;albert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding a parameter to a function is called generalization. This way, we can use it across more situations. Before, the square was always the same size. Now, we can make it any size we want; moreover, have several different "turtles" to draw several different squares of varying sizes.  &lt;/p&gt;
&lt;h3&gt;Assignment Five&lt;/h3&gt;
&lt;p&gt;Use turtle graphics to &lt;em&gt;draw&lt;/em&gt; the answer in a simple calculator program. Here's what the program needs (the "specs"):  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take the user's input for two different numbers  &lt;/li&gt;
&lt;li&gt;take the user's input on what to do with the two numbers i.e. which operator?&lt;/li&gt;
&lt;li&gt;handle the user's input above with condition statements&lt;/li&gt;
&lt;li&gt;display the answer to the user with turtle graphics  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Day Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/24/2017&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We ensured our programming talents so far by walking through steps to fire up a Python program, display text to screen, create/handle variables, and define our own function.    &lt;/p&gt;
&lt;h3&gt;Slackbot&lt;/h3&gt;
&lt;p&gt;We briefly saw a demo of the Slackbot, &lt;em&gt;Sirexa&lt;/em&gt;. We can sum up Sirexa to be a simple command-response program housed in a few python files. We can type commands to the bot via Slack (the messaging app we are using to collaborate) and it will return the response we programmed it to! We will fully dive into this project next week during class.  &lt;/p&gt;
&lt;p&gt;Example code for the calculator program using turtle graphics:  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/8dab08f959052ea0d13f6285e5bdb1d4.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h3&gt;Day Seven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/07/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Command-Response&lt;/h2&gt;
&lt;p&gt;We have all used, heard, or have seen (commercials) devices that are invoked by a user through voice, i.e. Alexa, Siri, Cortana, OK Google, etc. We used what we've learned so far, to create a simple Python program that waits for our own custom commands and responds to those commands.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;A simple command response program.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Put your commands here&lt;/span&gt;
&lt;span class="c1"&gt;# Keep the values lowercase&lt;/span&gt;
&lt;span class="n"&gt;COMMAND1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;what?&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Your handling code goes in this function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Determine if the command is valid. If so, take action and return&lt;/span&gt;
&lt;span class="sd"&gt;        a response, if necessary.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;COMMAND1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Huh?&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Why thank you, I don&amp;#39;t know what else to say.&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi, I am sirexa, your own personal bot. Awaiting your command.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;sirexa -&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can easily have our "bot", respond to more commands by setting new variables, &lt;code&gt;COMMAND1&lt;/code&gt;, &lt;code&gt;COMMAND2&lt;/code&gt;, etc. and create new condtion statements in the same way &lt;code&gt;COMMAND1&lt;/code&gt; is handled.  &lt;/p&gt;
&lt;p&gt;So this runs great on our chormebooks! What if we wanted to interact with the bot from anywhere and have our friends try it out too? Enter, "Sirexa", a &lt;em&gt;Slackbot&lt;/em&gt; we can interact with using the Slack app. Oh, and it runs on a Raspberry Pi! This command-response program is part of our larger project, programming our own Slackbot. The pi is hooked up to a breadboard, which has LEDs that we can tell Sirexa to turn on and off. There is a temperature-humidity sensor hooked up as well, so we can ask the slackbot to return those current values. On top of that, you can ask/tell Sirexa a command created by your classmate and they can ask it yours! We can do this by collaborating on the same repository on GitHub. You just edit your own python file located in your folder of the repo, and send the updated file. &lt;a href="http://blog.techemstudios.com/github-part-two.html"&gt;More details on our Slackbot Project&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;We got started by &lt;em&gt;cloning&lt;/em&gt; the &lt;a href="http://github.com/wray/code_em"&gt;code_em repository&lt;/a&gt; onto our chromebooks. You can think of cloning as "downloading"; however, when we clone the repository, we can make edits locally (on our computer) and submit those edits back to the original repository (located on GitHub). This way, we are not limited to editing and sending our changes while we are in class, you can do so outside of class as well. This can be a lot to take in, so we will practice the process during the remainder of the weeks.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eight&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/14/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Temperature Converter Program&lt;/h2&gt;
&lt;p&gt;We made a program that converts a celsius temperature to fahrenheit. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Pause the program and wait for user to enter celsius temp&lt;/span&gt;
&lt;span class="n"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter the celsius temperature: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# convert celsius --&amp;gt; fahrenheit&lt;/span&gt;
&lt;span class="n"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;celsius&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  

&lt;span class="c1"&gt;# return the fahrenheit&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The fahrenheit temperature is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The challenge was to add conditional statements that return temperature warnings based on the value of &lt;code&gt;fahrenheit&lt;/code&gt;.  &lt;/p&gt;
&lt;h2&gt;Update Your Commands to Sirexa&lt;/h2&gt;
&lt;p&gt;We talked about in class; we can think of a GitHub repository(repo) simply as a folder. Last week, you &lt;em&gt;cloned&lt;/em&gt; the repo for our Slackbot project, &lt;strong&gt;code_em&lt;/strong&gt; onto the computer you use in class. The picture below can hopefully help visualize what is going on when you clone a repo, make local changes to it, then submit your changes to be updated on the GitHub repo.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pull-push" src="images/github-repos-flow.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;After you finish making the changes you want, you'll need to &lt;em&gt;push&lt;/em&gt; (or send them) to the repository on GitHub. Because we are all working on the same repository, we will need to &lt;em&gt;pull&lt;/em&gt;, or get the changes others have made.  &lt;/p&gt;
&lt;h3&gt;Assignment Six&lt;/h3&gt;
&lt;p&gt;From your homebase, create new commands for Sirexa by editing &lt;strong&gt;your&lt;/strong&gt; slacklib.py file (either directly on GitHub or by cloning the repo), update your changes, and test out your changes via Slack.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Nine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/21/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Objects&lt;/h2&gt;
&lt;p&gt;We learned a little about Object-oriented programming (OOP). The basic idea of OOP is to see a complex system as the interaction of &lt;strong&gt;objects&lt;/strong&gt;. Simply, objects &lt;em&gt;know stuff&lt;/em&gt; and they can &lt;em&gt;do stuff&lt;/em&gt; (Zelle, 2010). OOP is perfect for modeling the world around us.  &lt;/p&gt;
&lt;p&gt;"Do we see any objects in the room?" --Yes! Every&lt;strong&gt;thing&lt;/strong&gt; is an object, the world is full of them! You are an object. In other words, you know stuff and you can do stuff, like breath, speak, formulate thoughts, etc. In short, we can model the real-world by telling Python what things are and what they can do.  &lt;/p&gt;
&lt;p&gt;Each &lt;strong&gt;object&lt;/strong&gt; is contained in a larger &lt;strong&gt;class&lt;/strong&gt;. You are an object and you are part of the class, human. Think of a heirarchy: The human class is part of a higher class, Mammals. Mammals is part of a another class, Animate (or Living) and Animate is part of the class, Things.  &lt;/p&gt;
&lt;p&gt;Object-oriented can take a minute to get a handle on, so we learned by doing. This was Thanksgiving week, so we practiced by modeling a turkeys. Check out the slides below.  &lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQmuimfkwZ0Ikv0GHMZHMtSmUGdM1HnzDRqHd64PiO0BAe7HhFmOWFvBOsv5z0sQe-n6VecqNUIr8qJ/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="640" height="496" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;h3&gt;Assignment Seven&lt;/h3&gt;
&lt;p&gt;Try modeling another real-world example of your choice in a Python program.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Ten&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/28/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Coding Graphics&lt;/h2&gt;
&lt;p&gt;We dove more into object-oriented by programming simple graphics to appear on the screen. In short, we learned how we can line up a few commands to draw shapes and fill those shapes with colors once we execute those commands. We started by drawing a circle to the screen. Luckily, we used our concept of abstraction! We did not have to create any new classes or objects from scratch. All we had to do was pull from a python file, &lt;a href="http://mcsp.wartburg.edu/zelle/python/"&gt;graphics.py&lt;/a&gt; that already has everything we need (programmers are lazy, in a good way!).  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graphics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# Creates a place on the screen where our graphics will appear&lt;/span&gt;
&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphWin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shapes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;### Draw a red circle centered at point (300, 300)&lt;/span&gt;
&lt;span class="c1"&gt;### with radius 45&lt;/span&gt;
&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;circ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;circ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;circ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we run the program above, this is what we get:  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/circle.jpg" alt="circle" style="width: 240px;"/&gt;  &lt;/p&gt;
&lt;h3&gt;Assignment Eight&lt;/h3&gt;
&lt;p&gt;Draw other shapes to the screen. Just make sure the graphics.py is in the same directory as your program.  &lt;/p&gt;
&lt;p&gt;Remember, if you have any questions outside of class on these assignments or the stuff we're learning class, send them in Slack!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eleven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;12/05/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Getting Graphics to Respond (i.e. getting mouse clicks)&lt;/h2&gt;
&lt;p&gt;We used the same graphics.py to create a program that handles input from the user, in the form of mouse clicks.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graphics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphWin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Click Me!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMouse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;You clicked at: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the program is run, we can click anywhere on the window and the python shell returns the coordinates where we clicked. This can be useful for if you were creating an interface with buttons and wanted the buttons to appear at specific points on the screen. We can see at the &lt;code&gt;for&lt;/code&gt; loop, the program waits for 10 mouse clicks from the user, then stops.    &lt;/p&gt;
&lt;p&gt;We went a little further with mouse clicks and created a program that asks for three points for the user to click. Once the third point is clicked, the program fills space inbetween the points to make a triangle.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphWin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Draw a Triangle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCoords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Click on three points&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Draw the three vertices of the triangle.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Set the variables for the three points&lt;/span&gt;
    &lt;span class="c1"&gt;# Have the Python listen for the mouse click event by the user&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMouse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMouse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMouse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Use Polygon object to draw the triangle&lt;/span&gt;
    &lt;span class="n"&gt;triangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;peachpuff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOutline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cyan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Wait for another click to exit&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Click anywhere to quit.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMouse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="images/triangle.jpg" alt="circle" style="width: 300px;"/&gt;&lt;/p&gt;
&lt;h3&gt;Assignment Nine&lt;/h3&gt;
&lt;p&gt;Change up the triangle code to draw a shape with more than three sides!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Twelve&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;12/12/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;Computer Science Pioneers&lt;/h2&gt;
&lt;p&gt;We have already learned about Charles Babbage (created the babbage machine; marked the transition from calculation to computation), Ada Lovelace (first computer programmer). Today, we talked about a couple more important figures in computer science. Alan Turing, invented an abstract mathematical model, called the &lt;a href="https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/turing-machine/one.html"&gt;Turing Machine&lt;/a&gt;. Ever heard of the &lt;a href="http://csunplugged.org/the-turing-test/"&gt;Turing Test&lt;/a&gt;? The most prestigious award given in the CS field is named after Alan Turing.   &lt;/p&gt;
&lt;p&gt;&lt;img src="images/turing-test.jpg" alt="circle" style="width: 300px;"/&gt;  &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="http://csunplugged.org/the-turing-test/"&gt;CSunplugged&lt;/a&gt;  
&lt;/p&gt;

&lt;p&gt;Another important figure, Grace Hopper. She was a Computer Scientist, US Navy Admiral, and developed programming languages that simplified technology, which made it easier for more people to check out computing. Her work helped &lt;a href="https://www.space.com/34885-grace-hopper-biography.html"&gt;NASA communicate with Apollo astronauts&lt;/a&gt;, and still aids scientists is keeping track of launched spacecraft.  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/grace-hopper.jpg" alt="circle" style="width: 300px;"/&gt;  &lt;/p&gt;
&lt;p align="center"&gt;
  &lt;a href="https://eandt.theiet.org/content/articles/2013/12/google-doodle-for-cobol-programming-language-inventor/"&gt;Engineering &amp; Technology&lt;/a&gt;  
&lt;/p&gt;

&lt;h2&gt;Requesting Data from the Internet&lt;/h2&gt;
&lt;p&gt;We ended this session with learning how to grab information from the internet and how to handle that information; all with just a few lines of Python code. To perform this, we used the &lt;a href="https://pypi.python.org/pypi/requests"&gt;requests&lt;/a&gt; module.&lt;br&gt;
We know there are quite a few numbers in the number, &lt;a href="https://en.wikipedia.org/wiki/Pi"&gt;Pi&lt;/a&gt;. Perhaps, an infinite amount. Let's say we wanted to figure out if our birthday, or a friend's birthday in the form of &lt;em&gt;mmddyy&lt;/em&gt; (month/day/year), is contained in the first million digits of pi. We could copy the million digits from a source, paste it into a Python program, then search the list of numbers; however, that would take up a lot of space. Instead, we can grab the information we need directly from the source. Here's what our code looked like:  &lt;/p&gt;
&lt;h3&gt;Direct Request to Web Source&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://https://raw.githubusercontent.com/ehmatthes/pcc/master/chapter_10/pi_million_digits.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Status code:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pi_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pi_string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Enter your birthday, in the form mmddyy: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pi_string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your birthday appears in the first million digits of pi!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your birthday does not appear in the first million digits of pi.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's happening:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;r.status_code&lt;/code&gt; returns a code whether or not our request to website was successful.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pi_string = r.text&lt;/code&gt; and &lt;code&gt;rs.strip()&lt;/code&gt; converts the data into plain text form.  &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;while True&lt;/code&gt; loop block, checks if what the user types in, is found within the text.  &lt;/p&gt;
&lt;p&gt;This simple program, &lt;strong&gt;greatly&lt;/strong&gt; reduces the time it would take if you were to scan the million digits to find your birth date (&lt;em&gt;at least&lt;/em&gt;, saves a few minutes!). This is yet another way we can see how programming can make our lives easier. We see this everyday; for example, when you surf the internet or use an app, there are millions of these types of &lt;em&gt;requests&lt;/em&gt; for data, to display exactly what you are looking for.  &lt;/p&gt;
&lt;p&gt;Please feel free to ask us questions on &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; or email class-info@techemstudios.com. Stay tuned for our &lt;a href="http://techemstudios.com/"&gt;winter/spring class schedule&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Enjoy the Holidays!!!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Dale, Nell &amp;amp; John Lewis. Computer Science: Illuminated. 4th ed., Jones and Bartlett Publishers, LLC, 2011.  

Dawson, Michael. Python Programming for the Absolute Beginner. Third ed., Course Technology, 2010.  

Downey, Allen B. Think Python: How to Think Like a Computer Scientist. O&amp;#39;Reilly Media, 2015.  

Matthes, Eric. Python Crash Course: A Hands-On, Project-Based Introduction to Programming. 4th ed., William Pollock, 2016.  

Zelle, John M. Python Programming: an Introduction to Computer Science. Franklin, Beedle &amp;amp; Associates, 2010.  
&lt;/pre&gt;&lt;/div&gt;</content><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="computer science"></category><category term="raspberry pi"></category></entry><entry><title>Build Your Own Laptop 2017</title><link href="/build-your-own-laptop-2017.html" rel="alternate"></link><published>2017-08-21T00:00:00-04:00</published><updated>2017-08-21T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-08-21:/build-your-own-laptop-2017.html</id><summary type="html">&lt;h3&gt;Build Your Own Laptop&lt;/h3&gt;
&lt;h4&gt;Pi-Top&lt;/h4&gt;
&lt;p&gt;&lt;img alt="pi top building" src="images/summer_camps/pi-top/build.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The steps we completed to build the Pi-Tops can be found on the Tech Em Studios blog, &lt;a href="http://blog.techemstudios.com/pitop-building.html"&gt;&lt;strong&gt;PiTop Build&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;h3&gt;Raspberry Pi Projects&lt;/h3&gt;
&lt;p&gt;Before we dove into assembling our laptops, we conducted a series of hardware and software projects on the Raspberry Pi. Students used breadboards …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Build Your Own Laptop&lt;/h3&gt;
&lt;h4&gt;Pi-Top&lt;/h4&gt;
&lt;p&gt;&lt;img alt="pi top building" src="images/summer_camps/pi-top/build.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The steps we completed to build the Pi-Tops can be found on the Tech Em Studios blog, &lt;a href="http://blog.techemstudios.com/pitop-building.html"&gt;&lt;strong&gt;PiTop Build&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;h3&gt;Raspberry Pi Projects&lt;/h3&gt;
&lt;p&gt;Before we dove into assembling our laptops, we conducted a series of hardware and software projects on the Raspberry Pi. Students used breadboards to create multiple projects involving LEDs, switch devices (buttons), jumper cables, and resistors.  &lt;/p&gt;
&lt;p&gt;Several projects we completed during camp:    &lt;br&gt;
&lt;img alt="pi top building" src="images/summer_camps/pi-top/8.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;LEDs &amp;amp; Temperature Humidity Sensor&lt;/h4&gt;
&lt;p&gt;After setting up our Pis, we wired up LEDs and jumper cables on the breadboards. Without software (programs, i.e. instructions written for the computer by humans), hardware will not perform any action on its own. To control the LEDs, we created a few programs in Python to turn the LEDs on, and off. The challenge was to determine what code to add, so all LEDs could be controlled in one instance. To keep with the theme of ON/OFF, LED light shows were created. It was great to see all students find different paths to reach the same solution! We learned Morse code and implemented the practice in a Python program to relay messages coded in Morse to output on the LEDs.  &lt;/p&gt;
&lt;p&gt;Check out &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-for-io-lessons.html"&gt;&lt;strong&gt;Notes on Setting Up Pis for IO Lessons&lt;/strong&gt;&lt;/a&gt; for information on Raspberry Pi setup and Breadboard/LED setup and &lt;a href="http://blog.techemstudios.com/rpi-temp-and-humidity-sensing.html"&gt;&lt;strong&gt;RPI Temperature and Humidity Sensing&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pi top building" src="images/summer_camps/pi-top/unnamed.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Minecraft Python Mods&lt;/h4&gt;
&lt;p&gt;Of course, camp would not be complete without Minecraft! Campers wrote Python code to change aspects of the Minecraft gameplay experience.  &lt;/p&gt;
&lt;p&gt;For the programs we wrote in class and more, go to &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-to-use-minecraft-api.html"&gt;&lt;strong&gt;Notes on Setting up pis to use Minecraft API&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Internet of Things (IoT)&lt;/h4&gt;
&lt;p&gt;To introduce machine-to-machine communication through the internet, students installed a hardware monitor on the Raspberry Pi called Cayenne. With Cayenne, we were able to monitor the pi's status on a web browser and mobile application.  &lt;/p&gt;
&lt;p&gt;Steps to reproduce at home: &lt;a href="http://blog.techemstudios.com/how-to-install-a-hardware-monitor-on-the-raspberry-pi.html"&gt;&lt;strong&gt;How to Install a Hardware Monitor on the Rapsberry Pi&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pi top building" src="images/summer_camps/pi-top/9.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Raspberry Pi Soundboard&lt;/h4&gt;
&lt;p&gt;We used resistors (essentially, controls the flow of electricity in a circuit), and learned how to use switching devices to create a soundboard. We wrote code to have each button on the breadboard produce its own sound.  &lt;/p&gt;
&lt;p&gt;More on the project can be found here, &lt;a href="http://blog.techemstudios.com/how-to-make-a-raspberry-pi-soundboard.html"&gt;&lt;strong&gt;How to Make a Raspberry Pi Sounboard&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pi top building" src="images/summer_camps/pi-top/IMG_0232.JPG"&gt;  &lt;/p&gt;
&lt;hr&gt;</content><category term="computer science"></category><category term="raspberry pi"></category><category term="hardware"></category><category term="pi-top"></category></entry><entry><title>How to Install a Hardware Monitor on the Raspberry Pi</title><link href="/how-to-install-a-hardware-monitor-on-the-raspberry-pi.html" rel="alternate"></link><published>2017-08-10T00:00:00-04:00</published><updated>2017-08-10T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2017-08-10:/how-to-install-a-hardware-monitor-on-the-raspberry-pi.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Installing Cayenne&lt;/h3&gt;
&lt;p&gt;To start, Cayenne is an IoT type hardware monitor in which you can check up on your Pi's status (Temperature, CPU load, GPU load, GPIO pins used, and much more!) from your mobile phone, or any web browser! Installation is as simple as creating an account and then …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Installing Cayenne&lt;/h3&gt;
&lt;p&gt;To start, Cayenne is an IoT type hardware monitor in which you can check up on your Pi's status (Temperature, CPU load, GPU load, GPIO pins used, and much more!) from your mobile phone, or any web browser! Installation is as simple as creating an account and then running a few commands in your Pi's terminal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cayenne" src="images/cayennedashboard.JPG"&gt;&lt;/p&gt;
&lt;h4&gt;Step-By-Step Instructions for Setting Up Cayenne&lt;/h4&gt;
&lt;p&gt;For starters, you'll need to create an account at &lt;a href="www.mydevices.com/cayenne"&gt;www.mydevices.com/cayenne&lt;/a&gt;, after this you'll want to log in, and the click on add new, followed by Device/Widget.&lt;/p&gt;
&lt;p&gt;&lt;img alt="1st Step" src="images/deviceadd.JPG"&gt;&lt;/p&gt;
&lt;p&gt;On the next page, you'll need to select Raspberry Pi, under Single Board Computers. The following page will include links to the mobile apps, should you want to setup from the mobile app, or it'll provide you with the commands to run in your Pi's Terminal. For this tutorial, we used the commands in the terminal: &lt;code&gt;wget https://cayenne.mydevices.com/dl/rpi_8hg1hglupv.sh&lt;/code&gt; , followed by &lt;code&gt;sudo bash rpi_8hg1hglupv.sh -v&lt;/code&gt; . Allow your Pi to fully install everything and it should be ready for on-the-move monitoring!&lt;/p&gt;
&lt;p&gt;&lt;img alt="1st Command" src="images/IMG_0543.JPG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2nd Command" src="images/IMG_0544.JPG"&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="computer science"></category><category term="raspberry pi"></category><category term="IoT"></category><category term="software"></category></entry><entry><title>How to make a Raspberry Pi Soundboard</title><link href="/how-to-make-a-raspberry-pi-soundboard.html" rel="alternate"></link><published>2017-08-10T00:00:00-04:00</published><updated>2017-08-10T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2017-08-10:/how-to-make-a-raspberry-pi-soundboard.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;How to Setup a Soundboard&lt;/h3&gt;
&lt;p&gt;For this tutorial, you'll need a Raspberry Pi, Breadboard, bunches of cables and buttons, and an output speaker (through HDMI or the 3.5mm output). Once you have everything, you're good to go. You'll have a lot of code to input, but you can also …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;How to Setup a Soundboard&lt;/h3&gt;
&lt;p&gt;For this tutorial, you'll need a Raspberry Pi, Breadboard, bunches of cables and buttons, and an output speaker (through HDMI or the 3.5mm output). Once you have everything, you're good to go. You'll have a lot of code to input, but you can also find the code here: &lt;a href="http://cdn.makezine.com/make/33/soundboard.py"&gt;http://cdn.makezine.com/make/33/soundboard.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;as for the many lines of code...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; import pygame.mixer
from &lt;span class="nb"&gt;time&lt;/span&gt; import sleep
import RPi.GPIO as GPIO
from sys import &lt;span class="nb"&gt;exit&lt;/span&gt;

GPIO.setmode&lt;span class="o"&gt;(&lt;/span&gt;GPIO.BCM&lt;span class="o"&gt;)&lt;/span&gt;
GPIO.setup&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;, GPIO.IN&lt;span class="o"&gt;)&lt;/span&gt;
GPIO.setup&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;, GPIO.IN&lt;span class="o"&gt;)&lt;/span&gt;
GPIO.setup&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;, GPIO.IN&lt;span class="o"&gt;)&lt;/span&gt;

pygame.mixer.init&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;48000&lt;/span&gt;, -16, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;sndA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pygame.mixer.Sound&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.wav&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;sndB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pygame.mixer.Sound&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.wav&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;sndC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pygame.mixer.Sound&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.wav&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;soundChannelA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pygame.mixer.Channel&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;soundChannelB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pygame.mixer.Channel&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;soundChannelC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pygame.mixer.Channel&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Sampler Ready.&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; True:
   try:
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;GPIO.input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; True&lt;span class="o"&gt;)&lt;/span&gt;:
         soundChannelA.play&lt;span class="o"&gt;(&lt;/span&gt;sndA&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;GPIO.input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; True&lt;span class="o"&gt;)&lt;/span&gt;:
         soundChannelB.play&lt;span class="o"&gt;(&lt;/span&gt;sndB&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;GPIO.input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; True&lt;span class="o"&gt;)&lt;/span&gt;:
         soundChannelC.play&lt;span class="o"&gt;(&lt;/span&gt;sndC&lt;span class="o"&gt;)&lt;/span&gt;
      sleep&lt;span class="o"&gt;(&lt;/span&gt;.01&lt;span class="o"&gt;)&lt;/span&gt;
   except KeyboardInterrupt:
      exit&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After putting the code into a text editor, you'll need to get some .wav files to have play each time you hit a button, one place for some funny .wav files is: &lt;a href="http://cdn.makezine.com/make/33/pd_sound_effects.zip"&gt;http://cdn.makezine.com/make/33/pd_sound_effects.zip&lt;/a&gt;. After downloading, or creating you own .wav files, just put their file names on lines 13, 14, &amp;amp; 15. After completing these steps, you have some wiring to do.&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiring" src="images/wiring.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In the diagram shown, no breakout boards were used, but you can see the positive coming off of the 3v3 pin to the positive rail of the breadboard. After the positive, you'll need a ground, in the diagram, it's the 3rd pin on the right. Now you'll want to place down all of your buttons. After placing down all of your buttons, you'll need a positive from the positive rail connect to each button at the top pin of the button. After connecting the positives for each button, you'll need the GPIO cables for each button, as well as a 10K resistor, both of which are connected to the bottom pin of the button. The resistors have to connect to the negative rail, while the GPIO cables connect to pins 23, 24, and 25. After wiring everything up, you can return to the Terminal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="our wiring" src="images/IMG_0547.JPG"&gt;&lt;/p&gt;
&lt;p&gt;You need to make sure to have all of your .WAV files and your .py file all in the same folder, preferably on your desktop. For this tutorial, we named our folder "soundboard", in the Terminal, you'll need to change your directory to the Desktop, and then to your folder, using: &lt;code&gt;cd Desktop&lt;/code&gt; and &lt;code&gt;cd soundboard&lt;/code&gt;, after this, run &lt;code&gt;sudo python soundboard.py&lt;/code&gt;. After running, wait until your Terminal says Sampler Ready and then you're good to go!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sampler Ready" src="images/IMG_0551.JPG"&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="computer science"></category><category term="raspberry pi"></category><category term="hardware"></category><category term="wiring"></category></entry><entry><title>Digital Arts Summer Camp</title><link href="/digital-arts-summer-camp.html" rel="alternate"></link><published>2017-08-04T00:00:00-04:00</published><updated>2017-08-04T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-08-04:/digital-arts-summer-camp.html</id><summary type="html">&lt;h1&gt;Digital Arts&lt;/h1&gt;
&lt;h2&gt;By Josef Seiler and Forest Kim&lt;/h2&gt;
&lt;h2&gt;Future Entrepreneurs&lt;/h2&gt;
&lt;p&gt;This week, campers were able to make up their own company and create logos for them.  First, they got to learn a little about graphic design through iOS apps such as Assembly.  With a little practice, off they went making …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Digital Arts&lt;/h1&gt;
&lt;h2&gt;By Josef Seiler and Forest Kim&lt;/h2&gt;
&lt;h2&gt;Future Entrepreneurs&lt;/h2&gt;
&lt;p&gt;This week, campers were able to make up their own company and create logos for them.  First, they got to learn a little about graphic design through iOS apps such as Assembly.  With a little practice, off they went making excellent images for their companies!   &lt;/p&gt;
&lt;p&gt;&lt;img alt="k" src="images/digital_arts/k.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Define your Company&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Company Logo  &lt;/li&gt;
&lt;li&gt;Design a creative logo that draws people in&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus: create hidden images in your logo that displays the company's focus  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D product design or 3D object that defines your company  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once they were set on what their logo was, they got to transfer their idea to the 3D world and print them out in the real world!  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commercial  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Using videography and animation techniques learned in class&lt;/li&gt;
&lt;li&gt;As another way to show off their companies, campers made commercials in order to advertise. Some used drawn animations and some used stop motion!   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="motion" src="images/digital_arts/motion.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="marker" src="images/digital_arts/marker.jpg"&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Company Jingle  &lt;/li&gt;
&lt;li&gt;Orchestrate a catchy tune for the company  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="img" src="images/digital_arts/IMG_1162.JPG"&gt;  &lt;/p&gt;
&lt;h2&gt;Photography Scavenger Hunt&lt;/h2&gt;
&lt;p&gt;We learned a few core photography techniques: centering objects, lining up your horizon, lighting, as well as digital imaging tricks. Students used these tips and tricks to conduct a photography scavenger hunt to capture the items below.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A person (could be a whole person or someone’s hand/shoe etc.)  &lt;/li&gt;
&lt;li&gt;Something in Nature (bird, plant, rock, bug, etc.)   &lt;/li&gt;
&lt;li&gt;Food item  &lt;/li&gt;
&lt;li&gt;Hardware (keyboard, mouse, monitor, iPad, tv, etc.)  &lt;/li&gt;
&lt;li&gt;Colorful car  &lt;/li&gt;
&lt;li&gt;Umbrella  &lt;/li&gt;
&lt;li&gt;Tech Em Sign  &lt;/li&gt;
&lt;li&gt;3D print   &lt;/li&gt;
&lt;li&gt;Water bottle  &lt;/li&gt;
&lt;li&gt;Book   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Campers were tasked with editing these images using the app, iPhoto Editor (or another app) and organizing these images together in a unique way.  &lt;/p&gt;
&lt;h2&gt;Books Alive!&lt;/h2&gt;
&lt;p&gt;Students took there favorite story or book, and made it into a movie! Some groups learned how to combine multiple animations to create a fluid movie, while others made stop-motion videos to retell the story of their favorite book.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="seuss" src="images/digital_arts/seuss.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The students at Digital Arts camp created impressive projects! Throughout the week, students presented some of their work to learn building from constructive feedback.  &lt;/p&gt;
&lt;p&gt;You can find all of your child's projects including 3d files, movies, animations, and logo designs by logging into the Tech Em Studios site. Just navigate to Classes, then to Art &amp;amp; Technology Camp. Here, there is a compressed folder with the projects from camp.  &lt;/p&gt;
&lt;p&gt;Please let us know if you have any questions or need help getting to your child's projects.  &lt;/p&gt;
&lt;p&gt;We posted a few commercials and stop-motion projects from camp on the &lt;a href="https://www.youtube.com/channel/UCy9pBQirIqjOpqHkPen2deQ"&gt;Tech Em Studios&lt;/a&gt; Youtube channel.  &lt;/p&gt;
&lt;p&gt;Enjoy the rest of summer!  &lt;/p&gt;
&lt;hr&gt;</content><category term="techcamp"></category><category term="art"></category><category term="3d printing"></category><category term="digital design"></category><category term="iMovie"></category><category term="YouTube"></category></entry><entry><title>Mobile Apps Summer Camp</title><link href="/mobile-apps-summer-camp.html" rel="alternate"></link><published>2017-08-04T00:00:00-04:00</published><updated>2017-08-04T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-08-04:/mobile-apps-summer-camp.html</id><summary type="html">&lt;h1&gt;Mobile Apps&lt;/h1&gt;
&lt;h2&gt;By Josef Seiler and Alex Noll&lt;/h2&gt;
&lt;h3&gt;There's an app for that&lt;/h3&gt;
&lt;p&gt;At the start of the camp, each camper designed the User Interface of their app. While most campers designed individually, others worked together to make the first drafts of the User Interface.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/b.jpg"&gt;   &lt;/p&gt;
&lt;p&gt;Campers continued their coding progression …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Mobile Apps&lt;/h1&gt;
&lt;h2&gt;By Josef Seiler and Alex Noll&lt;/h2&gt;
&lt;h3&gt;There's an app for that&lt;/h3&gt;
&lt;p&gt;At the start of the camp, each camper designed the User Interface of their app. While most campers designed individually, others worked together to make the first drafts of the User Interface.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/b.jpg"&gt;   &lt;/p&gt;
&lt;p&gt;Campers continued their coding progression by moving on to Apple's Swift language, with each camper experimenting with the app, Swift Playgrounds before advancing to Codea.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/l.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The campers moved on to Codea to make their own game. On top of this, campers learned web programming and made their own Hello World posts.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/codea.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Mobile App Design Process&lt;/h2&gt;
&lt;p&gt;The process we learned during camp this week was a mixture of a few guides on first steps to design a mobile application, one written by &lt;a href="https://www.forbes.com/sites/allbusiness/2013/10/30/how-to-build-your-first-mobile-app-in-12-steps-part-1/#1915d6383377"&gt;Forbes contributor&lt;/a&gt;, Melanie Haselmayr. This offers a versatile and conventional approach to building a mobile app across different operating systems. Another referenced guide was published by Tim Ferriss on &lt;a href="http://mashable.com/2013/07/13/top-selling-app/#dGuCHzh.xZqV"&gt;Mashable&lt;/a&gt;. This article was important to pull information from, for it has a design thinking approach to app design. In other words, the design process started with asking who the potential audience is for the app, as well as what makes the already successful apps, successful. Focus first on what people already like or don't like and start your design from that information.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/g.jpg"&gt;  &lt;/p&gt;
&lt;h2&gt;Starting Guidelines to Develop a Mobile App&lt;/h2&gt;
&lt;iframe src="https://docs.google.com/presentation/d/1I9n3wTS86vCd4Gzfb5I_rBkXhCjuKPwpF8pHvC2IF4k/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;Following the guidelines above, students divided themselves up into teams of two, to create at least three ideas for a mobile app. Clever schemes for apps surfaced! Without disclosing too much information, students came up with app ideas on art sharing, an Ebay &amp;amp; Etsy combination, Lego building, and virtual reality apps. At the end of camp, these ideas and more were pitched to their peers in presentation form, holding descriptions of the potential apps, what the user interface model looks like, and justification for the app.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/a.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Programming Languages we Learned&lt;/h2&gt;
&lt;p&gt;Most of the campers initially had few or no experience programming. After camp, every student had learned core programming principles using the Playgrounds apps to learn the Swift language, Codea to learn the Lua language, and Pythonista to learn the Python language. Phew! There are plenty more languages out there, we learned about these three during camp:    &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/j.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Swift&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;2014&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;Swift is a programming language used widely for thousands of apps already developed, and ones that are currently being developed. Just like the name suggests, Swift produces lightning-fast software. It is a powerful and intuitive programming language for several operation systems, the most popular being iOS and macOS. Students dove into Swift with the Swift Playgrounds app.  &lt;/p&gt;
&lt;h3&gt;Lua&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;1993&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The Lua programming language can be summed up into being versatile, embeddable, fast, portable, powerful, simple, and small. All these terms can be encompassed by one term, efficient. Which is what computer science is always striving to advance for. Students learned how to write lines of Lua code using Codea. We learned how to display simple boxes(buttons) and text to the screen, controlling object moving from tilting a device, and how to get a sprite image to register that it is being dragged and dropped. We then exported our code, packaged for Xcode (development environment for MacOS, iOS, watchOS, and tvOS), and finally to their own &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; repository (essentially a folder to house their code).  &lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;1991&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Last, but not least, students compared how they've written code so far (using Swift and Lua) to the Python programming language (a personal favorite amongst Tech Em staff). Campers worked together to create the logic behind a simple calculator program using the app, &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;. We modified Python code to change the look (user interface) of the calculator program.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="images/mobile_apps/e.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Please let us know if you or your child have questions on how to continue with learning how to develop a mobile app.  &lt;/p&gt;
&lt;p&gt;Enjoy the rest of the summer!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://register.techemstudios.com/"&gt;One more week of summers camps to go&lt;/a&gt;  &lt;/p&gt;</content><category term="techcamp"></category><category term="coding"></category><category term="computer science"></category><category term="mobile"></category><category term="apps"></category><category term="python"></category><category term="lua"></category><category term="swift"></category></entry><entry><title>YouTube &amp; 3D Gaming/VR Camp</title><link href="/youtube-3d-gamingvr-camp.html" rel="alternate"></link><published>2017-07-29T00:00:00-04:00</published><updated>2017-07-29T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-07-29:/youtube-3d-gamingvr-camp.html</id><summary type="html">&lt;p&gt;Recap of the YouTube camp and 3D Gaming/Virtual Reality camp.  &lt;/p&gt;
&lt;h1&gt;Summer 2017 YouTube Camp&lt;/h1&gt;
&lt;h2&gt;By Josef Seiler and Alex Noll&lt;/h2&gt;
&lt;p&gt;Ideas on how to become a star on YouTube were shared among campers before the camp even started! We got underway with learning general guidelines on how to create …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recap of the YouTube camp and 3D Gaming/Virtual Reality camp.  &lt;/p&gt;
&lt;h1&gt;Summer 2017 YouTube Camp&lt;/h1&gt;
&lt;h2&gt;By Josef Seiler and Alex Noll&lt;/h2&gt;
&lt;p&gt;Ideas on how to become a star on YouTube were shared among campers before the camp even started! We got underway with learning general guidelines on how to create a bolster a YouTube channel. First, by creating a catchy name, thumbnail, avatar, and onto making an impressive banner. Students learned details count. For instance, when it comes to the banner for a channel, it is a good idea to have the image reflect the channel's content and display any social media to further follower traction.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="init" src="images/youtube_lect.jpg"&gt;  &lt;/p&gt;
&lt;h2&gt;Design Thinking &amp;amp; Brainstorming&lt;/h2&gt;
&lt;p&gt;An ever-present process taught and implemented in a range of classes at Tech Em. This is a user-centered approach to design and is used in a variety of settings. Students began this process by gathering ideas on what makes a good YouTube video and channel by exploring (with guidance) YouTube. Notes were taken on three different videos with a couple general questions: What things would you use in your videos/channels, and what would you leave out. This feedback was shared among campers. The process continued with gathering direct feedback from peers on videos/animations created during the week.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ideas" src="images/youtube_design.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Students were tasked with creating three ideas for videos they would share with the world and at least four details on those ideas.  &lt;/p&gt;
&lt;p&gt;Group and individual teams formed, followed by channel creations and film making. Some students used the green screen and cameras on tripods, while others used game capture software (&lt;a href="https://obsproject.com/"&gt;Open Broadcaster Software&lt;/a&gt;) and animation apps. In all cases, campers learned videography techniques --proper lighting, sound, and video editing; using iMovie and Windows Live Movie Maker.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="green" src="images/youtube_greenscreen.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="editing" src="images/youtube_3d.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Impressive YouTube channels and videos emerged each day of the camp!  &lt;/p&gt;
&lt;h2&gt;Computer &amp;amp; Internet Safety&lt;/h2&gt;
&lt;p&gt;YouTube is a wonderful avenue for learning, sharing videos and ideas; however, it is well worth it to be cautious and do your homework before diving in. Technology instructor, Chris shared his useful tips to campers on how to do just that. The computer safety presentation can be found &lt;a href="https://docs.google.com/presentation/d/1lJvTJYlD7aN2kW3RDKmoKvHd8Q-TOKdG8H45cWhkQUE/edit#slide=id.p"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;How to Produce YouTube Content&lt;/h2&gt;
&lt;h4&gt;By: Alex Noll&lt;/h4&gt;
&lt;h3&gt;Lights, Camera, Action!&lt;/h3&gt;
&lt;p&gt;Once you have your channel, you'll want to upload your video, uploading is a pretty complex process with many different variables to consider. To start, make sure you've prepared the video you want to upload by editing it and making sure it is the product you want the world to see.  &lt;/p&gt;
&lt;p&gt;After ensuring that your video is ready to be seen, you'll have to go to your main page on YouTube, then, in the top right corner of the page there's an upload button (an upward facing arrow) to click.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Upload Button" src="images/UPBUTTON.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;After going to the upload page, you' be prompted to select the content you want to upload, once selected you have to wait through an uploading process and processing process for your video to actually make its way onto YouTube.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Loading Screen" src="images/Upload.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Next, you'll need to decide on a Title, Description, some Tags for your video, as well as the Video Thumbnail. Make sure your Tags are related to your video and that you include enough so that if a viewer searches a relevant term, they can find your video. You'll also want to keep your title short and relevant, while making your description more descript with the information that's excluded from the title.  &lt;/p&gt;
&lt;p&gt;For your Video's Thumbnail, it's best to verify your YouTube account by providing a phone number, this will allow you to upload your own Thumbnail pictures instead of using the ones that YouTube selects.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="YouTube Verification" src="images/verification.jpg"&gt;
After deciding on your Thumbnail, you're ready to upload. Just hit publish, and then your video is available for the  world to see!  &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Summer 2017 3D Gaming &amp;amp; Virtual Reality Camp&lt;/h1&gt;
&lt;h2&gt;HTC Vive&lt;/h2&gt;
&lt;p&gt;Creates immersive experiences of all kinds! By rotating in ten minute shifts, campers explored virtual reality using a Vive headset and controllers. Students began with a lecture on what virtual reality is and how it works.&lt;/p&gt;
&lt;p&gt;Google Earth VR was the first app explored. We moved onto creating music in VR and designing 3D objects. Creating 3D objects in virtual reality is a lot like sculpting a structure in the real world.  &lt;/p&gt;
&lt;p&gt;Needless to say, quiet students became quickly animated once the VR headset was on!&lt;/p&gt;
&lt;p&gt;&lt;img alt="vr" src="images/vr_building.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="3dvr" src="images/vr_3d.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Since virtual reality is such an immersive experience, students were asked to share their thoughts on the subject, as well as what game or experience in VR would they share with the world. Below are some of their reflections.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="reflections" src="images/vr_hippy.jpg"&gt;  &lt;/p&gt;
&lt;h2&gt;Game Design with Hyperpad and Unity&lt;/h2&gt;
&lt;h2&gt;Hyperpad&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.hyperpad.com/"&gt;Hyperpad&lt;/a&gt; is a visual-based game development tool. It is driven with event handling and is great for those new to programming as well as veterans.&lt;/p&gt;
&lt;p&gt;Students learned how to create their games by using the Design Thinking process (similar to YouTube camp!). We began work in Hyperpad with sketches on paper of level-design. Campers learned basic game logic and computer programming principles by creating a platformer-style game on Hyperpad.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="unity" src="images/vr_unity.jpg"&gt;  &lt;/p&gt;
&lt;h2&gt;Unity&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/"&gt;Unity&lt;/a&gt; is a creation engine for gaming. We learned some basics of 3-D game development using this tool. This has become a leading choice for creating games and experiences to deploy in virtual reality. If your child would like to continue exploring this game design tool, contact us for help and check out the &lt;a href="https://docs.unity3d.com/Manual/index.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Campers got started with Unity by creating a 2D Pong game, and on to advanced concepts in 3D by controlling a sphere using camera positioning and learning about 3D terrain.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="group" src="images/youtube_group.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Don't hesitate to contact us for any questions!  &lt;/p&gt;
&lt;p&gt;Happy video-making and gaming.  &lt;/p&gt;</content><category term="youtube"></category><category term="video"></category><category term="content production"></category><category term="3dprinting"></category><category term="vr"></category><category term="hyperpad"></category><category term="unity"></category><category term="techcamp"></category></entry><entry><title>Minecraft &amp; Robotics</title><link href="/minecraft-robotics.html" rel="alternate"></link><published>2017-07-13T00:00:00-04:00</published><updated>2017-07-13T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2017-07-13:/minecraft-robotics.html</id><summary type="html">&lt;h1&gt;Minecraft 3D Camp&lt;/h1&gt;
&lt;h3&gt;Can we build it?&lt;/h3&gt;
&lt;p&gt;At the beginning of the camp, students got their hands on their iPads and immediately started with a competitive build challenge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="build challenge" src="images/BuildC.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Students continued to compete in build challenges throughout the week, one of the most notable was the redstone camp, where some campers …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Minecraft 3D Camp&lt;/h1&gt;
&lt;h3&gt;Can we build it?&lt;/h3&gt;
&lt;p&gt;At the beginning of the camp, students got their hands on their iPads and immediately started with a competitive build challenge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="build challenge" src="images/BuildC.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Students continued to compete in build challenges throughout the week, one of the most notable was the redstone camp, where some campers worked together to create their own redstone contraptions&lt;/p&gt;
&lt;p&gt;&lt;img alt="Redstone Challenge" src="images/GroupRedstone.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Robotics&lt;/h1&gt;
&lt;h3&gt;Bombini Bot, GO!&lt;/h3&gt;
&lt;p&gt;The camp began with students taking their new Bombini Bots out of their boxes and examining their Arduinos. Upon receiving their new hardware, students needed to piece their robots together&lt;/p&gt;
&lt;p&gt;&lt;img alt="Robot Tire" src="images/TWIMG1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After constructing their robots, the students quickly learned how to use Scratch and Arduino to program their Robots to move around the studio and complete various tasks.&lt;/p&gt;
&lt;p&gt;To finish off the camp, campers needed to run their robots through a gauntlet of tests and eventually faced off in a hockey match!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Robot Hockey" src="images/robothockey.jpg"&gt;&lt;/p&gt;</content><category term="computer science"></category><category term="techcamp"></category><category term="arduino"></category><category term="bombinibot"></category><category term="programming"></category><category term="3dprinting"></category></entry><entry><title>Raspberry Pi Camp &amp; Alexa Camp</title><link href="/raspberry-pi-camp-alexa-camp.html" rel="alternate"></link><published>2017-07-03T00:00:00-04:00</published><updated>2017-07-03T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-07-03:/raspberry-pi-camp-alexa-camp.html</id><summary type="html">&lt;h1&gt;Raspberry Pi Camp&lt;/h1&gt;
&lt;p&gt;The camp started with students taking their new Raspberry Pi out of the box! To configure their Pi, students executed commands in the terminal. For more information on the terminal commands, check out this &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-for-io-lessons.html"&gt;blog&lt;/a&gt;.      &lt;/p&gt;
&lt;p&gt;After configuring the initial setup, campers explored the operating system by checking …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Raspberry Pi Camp&lt;/h1&gt;
&lt;p&gt;The camp started with students taking their new Raspberry Pi out of the box! To configure their Pi, students executed commands in the terminal. For more information on the terminal commands, check out this &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-for-io-lessons.html"&gt;blog&lt;/a&gt;.      &lt;/p&gt;
&lt;p&gt;After configuring the initial setup, campers explored the operating system by checking out the Python gaming module, Pygame. They conducted modding challenges for a few games written in Python, as well as modifying code for &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-to-use-minecraft-api.html"&gt;Minecraft (Pi version)&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="setup" src="images/summer_camps/raspberry-pi/device-terminal.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Campers learned how to connect external devices to the Raspberry Pi, using a ribbon cable connected to a breadboard ("plugboard"). From here, campers connected LEDs, temperature humidity sensors, clicking devices (buttons), and more. But, making the connections of these devices and learning to make complete circuits is one thing... We learned quick, hardware does nothing until you program it to do so. Enter, programming with Python!&lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="images/summer_camps/raspberry-pi/IMG_0219.jpg"&gt;   &lt;/p&gt;
&lt;p&gt;Students wrote several programs to display &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-for-io-lessons.html"&gt;messages in Morse code through with the LEDs&lt;/a&gt;, return the value of the temperature-humidity sensor, send an &lt;a href="http://blog.techemstudios.com/some-code-for-rpi-temp-sensing.html"&gt;email&lt;/a&gt; when the temperature reached a certain value, and have the &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-to-use-minecraft-api.html"&gt;LEDs turn on when your Minecraft character reaches a certain point on the map&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="python" src="images/summer_camps/raspberry-pi/IMG_0945.jpg"&gt;   &lt;/p&gt;
&lt;p&gt;Please let us know if you and your child have any questions on repeating the process we completed in camp or other cool projects you can do with the Raspberry Pi.  &lt;/p&gt;
&lt;h2&gt;Raspberry Pi Camp Slide Show&lt;/h2&gt;
&lt;h4&gt;(https://www.facebook.com/techemstudios/)&lt;/h4&gt;
&lt;iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Ftechemstudios%2Fvideos%2F2027288504170339%2F&amp;show_text=0&amp;width=560" width="560" height="417" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;h1&gt;Alexa Camp&lt;/h1&gt;
&lt;h3&gt;Alexa, can you hear me?&lt;/h3&gt;
&lt;p&gt;Students got their foot in the door of Cloud programming by learning how to build skills for Amazon's voice service, Alexa! Students learned the flow of events in order to make Alexa respond to user input. We started by writing down ideas for skills to create, and moved forward with trivia style skills. From testing your knowledge of horses and math, to Star Wars characters and cats, campers developed fun skills and even had one published during the week of camp!&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/RVA?src=hash"&gt;#RVA&lt;/a&gt; has skills! What do you know about cats? Try this Tech Em student&amp;#39;s skill and find out! &lt;a href="https://t.co/7zKPGXa2zq"&gt;https://t.co/7zKPGXa2zq&lt;/a&gt; &lt;a href="https://twitter.com/AlexaRVA"&gt;@AlexaRVA&lt;/a&gt; &lt;a href="https://twitter.com/jpfrago"&gt;@jpfrago&lt;/a&gt; &lt;a href="https://t.co/bBkMt0ob8v"&gt;pic.twitter.com/bBkMt0ob8v&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tech Em Studios (@TechEmRVA) &lt;a href="https://twitter.com/TechEmRVA/status/880811091827326980"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Students went on to designing and coding fact skills to educate the public on the Orioles baseball team, rabbits, soccer and more! Alexa Dots were sent home to show friends and family their amazing skills.    &lt;/p&gt;
&lt;h1&gt;Alexa Camp Slide Show&lt;/h1&gt;
&lt;h4&gt;(https://www.facebook.com/techemstudios/)&lt;/h4&gt;
&lt;iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Ftechemstudios%2Fvideos%2F2027279167504606%2F&amp;show_text=0&amp;width=560" width="560" height="372" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;We are so proud of what the Tech Em campers have accomplished this week!  &lt;/p&gt;
&lt;p&gt;Please let us know if you or your child have any questions on the steps for publishing their skills.  &lt;/p&gt;</content><category term="alexa"></category><category term="raspberry pi"></category><category term="minecraft"></category><category term="modding"></category><category term="computer science"></category><category term="techcamp"></category></entry><entry><title>Make a Raspberry Pi Powered Alexa</title><link href="/make-a-raspberry-pi-powered-alexa.html" rel="alternate"></link><published>2017-06-29T00:00:00-04:00</published><updated>2017-06-29T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2017-06-29:/make-a-raspberry-pi-powered-alexa.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Process for Building Your PiLexa&lt;/h3&gt;
&lt;p&gt;To start, you'll need a USB microphone, keyboard, mouse and speaker (connected via HDMI or the 3.5mm audio connector), and about an hour of time. Just to begin, you'll want to be running the latest version of Raspbian and you'll need an Amazon Developer …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Process for Building Your PiLexa&lt;/h3&gt;
&lt;p&gt;To start, you'll need a USB microphone, keyboard, mouse and speaker (connected via HDMI or the 3.5mm audio connector), and about an hour of time. Just to begin, you'll want to be running the latest version of Raspbian and you'll need an Amazon Developer account as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pieces" src="images/IMG_0036.JPG"&gt;&lt;/p&gt;
&lt;h4&gt;Step-By-Step Instructions for Setting Up Alexa&lt;/h4&gt;
&lt;p&gt;Once you have everything ready, you'll need to be on developer.amazon.com and click on the alexa tab. Once there, you'll then click on the Alexa Voice Service. Next, click on the register a product button and choose device in the subfolder. You can set your Device Type ID and Display Name to whatever you want, but next you'll need to set your security profile description to also, whatever you want. You'll want to take note of your Client ID and Client Secret, as you'll need them later. Next you'll need to configure your web settings with the allowed origin as &lt;code&gt;https://localhost:3000&lt;/code&gt; and then for your allowed return url you'll need &lt;code&gt;https://localhost:3000/authresponse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="1st Step" src="images/IMG_3033.JPG"&gt;&lt;/p&gt;
&lt;p&gt;Now that you have what you need from Amazon, it's time to get to configuring your Pi. On your Pi, you'll want to open up one terminal for now and type in "cd Desktop" , followed by &lt;code&gt;git clone https://github.com/alexa/alexa-avs-sample-app.git&lt;/code&gt; and press enter. Once that's done, you need to type &lt;code&gt;cd ~/Desktop/alexa-avs-sample-app&lt;/code&gt;. After that, type &lt;code&gt;nano automated_install.sh&lt;/code&gt; and press enter.&lt;/p&gt;
&lt;p&gt;Next you'll fill in your Product ID, Client ID, and Client Secret. Afterward you'll need to &lt;code&gt;cd ~/Desktop/alexa/alexa-avs-sample-app&lt;/code&gt; and press enter, then followed by &lt;code&gt;. automated_install.sh&lt;/code&gt; and press enter. At this point you should fill in each option that follows as needed.&lt;/p&gt;
&lt;p&gt;This following process requires three separate open terminals for each set of commands and must be done in sequential order. For the first terminal, type in &lt;code&gt;cd ~/Desktop/alexa-avs-sample-app/samples&lt;/code&gt; and press enter, then type in &lt;code&gt;cd companionService &amp;amp;&amp;amp; npm start&lt;/code&gt; and press enter.&lt;/p&gt;
&lt;p&gt;The next terminal will require the following two commands &lt;code&gt;cd ~/Desktop/alexa-avs-sample-app/samples&lt;/code&gt; with Enter, and then &lt;code&gt;cd javaclient &amp;amp;&amp;amp; mvn exec:exec&lt;/code&gt; with Enter. You'll want to make sure you're logged into your Amazon account and deal with any Java pop-ups that may occur.&lt;/p&gt;
&lt;p&gt;This is the last step, in which we will start the wake word engine so that your Pi will respond when you say "Alexa". To do this, in your third terminal you'll type in &lt;code&gt;cd ~/Desktop/alexa-avs-sample-app/samples&lt;/code&gt; and press Enter. and then, type in &lt;code&gt;cd wakeWordAgent/src &amp;amp;&amp;amp; ./wakeWordAgent -e kitt_ai&lt;/code&gt; and Press Enter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Finished" src="images/IMG_3078.JPG"&gt;&lt;/p&gt;
&lt;p&gt;Congratulations your PiLexa should be up and running, should you want to improve your diy echo's ability to understand you, you may want to type in &lt;code&gt;alsamixer&lt;/code&gt; , use f6 to select the audio device, and then adjust volume settings. To save your adjustments hit ESC, and then in a terminal type &lt;code&gt;sudo alsactl store&lt;/code&gt; and press Enter.  &lt;/p&gt;
&lt;p&gt;For even more information on the subject, definitely check out this article on LifeHacker, it provides visual demonstrations and a bit of trouble-shooting as well :&lt;a href="http://lifehacker.com/how-to-build-your-own-amazon-echo-with-a-raspberry-pi-1787726931"&gt;http://lifehacker.com/how-to-build-your-own-amazon-echo-with-a-raspberry-pi-1787726931&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Stay Tuned for the Chromebook-Ubuntu Powered Alexa!&lt;/h3&gt;
&lt;p&gt;&lt;img alt="teaser" src="images/IMG_0225.JPG"&gt;  &lt;/p&gt;</content><category term="computer science"></category><category term="raspberry pi"></category><category term="hardware"></category><category term="Echo"></category><category term="Alexa"></category></entry><entry><title>PiTop Building</title><link href="/pitop-building.html" rel="alternate"></link><published>2017-06-27T00:00:00-04:00</published><updated>2017-06-27T00:00:00-04:00</updated><author><name>Alex Noll</name></author><id>tag:None,2017-06-27:/pitop-building.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Process for Building Your PiTop&lt;/h3&gt;
&lt;p&gt;The PiTop comes in the box with the chassis to house the custom PCB, Raspberry Pi, Keyboard and Trackpad, as well as all of the cables. Once you've unboxed your PiTop, you just need to obtain a 2nd or 3rd generation Raspberry Pi, and you're …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Process for Building Your PiTop&lt;/h3&gt;
&lt;p&gt;The PiTop comes in the box with the chassis to house the custom PCB, Raspberry Pi, Keyboard and Trackpad, as well as all of the cables. Once you've unboxed your PiTop, you just need to obtain a 2nd or 3rd generation Raspberry Pi, and you're all good to go.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PiTop unboxing" src="images/IMG_3300.JPG"&gt;&lt;/p&gt;
&lt;p&gt;The base of the PiTop comes out of the box seperated from the keyboard and screen.The needed cables and screws are stored in seperate bags and the PiTop includes one extra of each screw, should you lose one.&lt;/p&gt;
&lt;p&gt;&lt;img alt="parts needed" src="images/IMG_3283.JPG"&gt;&lt;/p&gt;
&lt;h4&gt;Step-By-Step Instructions for Building your PiTop&lt;/h4&gt;
&lt;p&gt;Once you've prepped everything you need (Your Pi, your chassis, screws, and cables ), you can begin building the PiTop. To start, you'll want to install four brass spacers and bolts onto both the Pi and the custom PCB, a miniature socket wrench may be helpful, but it can be done without one as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pi Securing" src="images/IMG_3316.JPG"&gt;&lt;/p&gt;
&lt;p&gt;After you've installed the spacers, you'll want to prep the chassis for installation by removing the magnetic rails from the underside of the chassis. While focused on the chassis, you'll want to slide the screen and lid into the hinges on the base and then tighten it with the screws at the bottom of each hinge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PiTop Underside" src="images/IMG_3269.JPG"&gt;&lt;/p&gt;
&lt;p&gt;Following the attachment of the screen and lid, you'll need eight of the silver spacers so you can install the custom PCB and Raspberry Pi onto the rails, starting with the PCB, you'll place it on the left side of the rail system and align the pins with the battery slots in the aluminum base. If properly plugged in, the brass spacers will begin to show on the underside of the rails, here you will use the silver spacers to screw in the spacers using a provided allen wrench.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Aligning PCB" src="images/IMG_3297.JPG"&gt;&lt;/p&gt;
&lt;p&gt;You will repeat the above process with the Raspberry Pi, without the process of aligning the pins. Move the Pi over to the right-hand side of the rail system, but not so far as to obstruct the USB ports (as you will need them later for the keyboard). Now you should connect the Pi with the PCB using the provided HDMI cable, Ribbon Cable (which should be routed through the provided cable management), and the USB cord for powering the Pi.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cabling" src="images/IMG_3310.JPG"&gt;&lt;/p&gt;
&lt;p&gt;After wiring the Pi with the PCB, you should prep the keyboard for installation and wire the power button connector to the PCB, while wiring the Keyboard connector to the bottom left USB port on the Pi.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Keyboard" src="images/IMG_3282.JPG"&gt;&lt;/p&gt;
&lt;p&gt;Upon connecting all of the wires, slide in your acrylic PiTop base, and boot it up. Congratulations, you've finished a PiTop!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Completion" src="images/IMG_3293.JPG"&gt;&lt;/p&gt;
&lt;p&gt;For more information, such as where to get your own PiTop or additional parts check out the following links below :
&lt;a href="https://www.adafruit.com/product/3065"&gt;https://www.adafruit.com/product/3065&lt;/a&gt;
and
&lt;a href="https://pi-top.com/"&gt;https://pi-top.com/&lt;/a&gt;&lt;/p&gt;</content><category term="computer science"></category><category term="raspberry pi"></category><category term="hardware"></category></entry><entry><title>Minecraft Modding &amp; Mobile Gaming Camp</title><link href="/minecraft-modding-mobile-gaming-camp.html" rel="alternate"></link><published>2017-06-26T00:00:00-04:00</published><updated>2017-06-26T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-06-26:/minecraft-modding-mobile-gaming-camp.html</id><summary type="html">&lt;h1&gt;Minecraft Modding&lt;/h1&gt;
&lt;p&gt;Campers learned the ways of Minecraft Modding by learning core principles of programming. There are tons of languages used for programming. Campers modified and deployed code written in either Java or Python.  &lt;/p&gt;
&lt;p&gt;Enchanted bridges, exploding minecarts and anvils, coordinate trackers and working Minecraft clocks... These were just a …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Minecraft Modding&lt;/h1&gt;
&lt;p&gt;Campers learned the ways of Minecraft Modding by learning core principles of programming. There are tons of languages used for programming. Campers modified and deployed code written in either Java or Python.  &lt;/p&gt;
&lt;p&gt;Enchanted bridges, exploding minecarts and anvils, coordinate trackers and working Minecraft clocks... These were just a few of the mods written and controlled by campers!  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/modding/modding-python.jpg" alt="name" style="width: 340px;"/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;The campers worked together to complete build challenges incorporating Minecraft mods. The mods worked on during camp produced some great problem solving sessions and exciting results in Minecraft!  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/modding/modding.jpg" alt="name" style="width: 340px;"/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;Below are the steps to mirror the environment (using Python and/or Java) your child worked on during Minecraft Modding. Feel free to ask the Tech Em team any questions on the process.  &lt;/p&gt;
&lt;h2&gt;Setting the Stage for Modding&lt;/h2&gt;
&lt;h4&gt;Using Forge and Java&lt;/h4&gt;
&lt;p&gt;Essentially all mods written in Java, are edited and deployed through the Eclipse IDE.  &lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/d/19Z8Q7-M_X4YKn52Rlijwlv2zmWInVMudchGzFaxpHt0/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;h4&gt;Using Forge and Python&lt;/h4&gt;
&lt;iframe src="https://docs.google.com/presentation/d/1-7Fdm66mEfuiEAsiZjE_lRD8oTRGe0oDRMhDMjUbSWk/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;h1&gt;Mobile Gaming&lt;/h1&gt;
&lt;p&gt;The campers learned a user-centered design approach throughout the camp, to create amazing games! Campers learned what it takes to make a well balanced game. Starting out with figuring what makes a game fun (or not fun!) for the player of the game, then onto using programming concepts, problem solving tools, and testing each other's game to give/receive feedback.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src="images/summer_camps/mobile-gaming/gaming-letter.jpg" alt="name" style="width: 340px;"/&gt;  &lt;/p&gt;
&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;Campers published their games on the Hyperpad Hub. Hyperpad was the primary app we used to design games.  &lt;/p&gt;
&lt;p&gt;Thanks for a great first week of Summer camps!  &lt;/p&gt;
&lt;p&gt;The Tech Em Team  &lt;/p&gt;
&lt;p&gt;&lt;img alt="third" src="images/summer_camps/mobile-gaming/gaming-table.jpg"&gt;  &lt;/p&gt;</content><category term="minecraft"></category><category term="modding"></category><category term="hyperpad"></category><category term="design thinking"></category><category term="game design"></category><category term="computer science"></category></entry><entry><title>Tabling Event at East Coast Triathlon Festival</title><link href="/tabling-event-at-east-coast-triathlon-festival.html" rel="alternate"></link><published>2017-05-08T00:00:00-04:00</published><updated>2017-05-08T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-05-08:/tabling-event-at-east-coast-triathlon-festival.html</id><summary type="html">&lt;h3&gt;Tabling Event East Coast Triathlon Festival&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;Tech Em Studios Sponsors Endorphin Fitness&lt;/h4&gt;
&lt;p&gt;On May 7th, Tech Em Studios participated in a tabling event at the East Coast Triathlon Festival (ECTF)! This was a full day event sponsored in part by Tech Em Studios. The endurance competition started bright and early …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Tabling Event East Coast Triathlon Festival&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;Tech Em Studios Sponsors Endorphin Fitness&lt;/h4&gt;
&lt;p&gt;On May 7th, Tech Em Studios participated in a tabling event at the East Coast Triathlon Festival (ECTF)! This was a full day event sponsored in part by Tech Em Studios. The endurance competition started bright and early at 7am with the Super Sprint Race Start. Athletes in teams as well as solo athletes competed in classic multi-stage events of swimming, cycling and running. The participants' training for this event was tested and showed true grit, bravo!  &lt;/p&gt;
&lt;p&gt;Tech Em had a table set up at the ECTF complete with 3D printed race medals, 3D printed show lace supports, robot projects, business cards, Tech Em Summer camp brochures, and a shout out from the race microphone controller!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ectf_table" src="images/ectf/ectf_table.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;More information on the &lt;a href="http://www.endorphinfitness.com/races-eventseast-coast-triathlon-festival/"&gt;East Coast Triathlon Festival&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To see the content of the brochures from the Tech Em Studios table, check out the link &lt;a href="http://register.techemstudios.com/"&gt;here&lt;/a&gt;.   &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Below are a few shots from Studio preparation and shots from Sunday's event:  &lt;/p&gt;
&lt;h3&gt;Event Photos&lt;/h3&gt;
&lt;p&gt;&lt;img alt="cycling" src="images/ectf/ectf_cycling.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="finish line" src="images/ectf/ectf_finishline.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="liberty" src="images/ectf/ectf_liberty.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="bikes" src="images/ectf/ectf_start.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="yoda" src="images/ectf/ectf_yoda.jpg"&gt;  &lt;/p&gt;
&lt;h3&gt;Prep Photos&lt;/h3&gt;
&lt;h4&gt;3D Printing&lt;/h4&gt;
&lt;p&gt;&lt;img alt="medals" src="images/ectf/ectf_medal.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="lace support print" src="images/ectf/ectf_print.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="support test" src="images/ectf/ectf_shoe.jpg"&gt;  &lt;/p&gt;</content><category term="3D Printing"></category></entry><entry><title>Code Em Winter 2017</title><link href="/code-em-winter-2017.html" rel="alternate"></link><published>2017-04-05T00:00:00-04:00</published><updated>2017-04-05T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-04-05:/code-em-winter-2017.html</id><summary type="html">&lt;h3&gt;Week One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/10/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;How to Solve a Problem&lt;/h4&gt;
&lt;h6&gt;How to approach, visualize and make a plan to solve a problem&lt;/h6&gt;
&lt;p&gt;We reviewed our general approach to solving a large problem with our example of cleaning a whole house. The thought of cleaning each room in the entire house …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Week One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/10/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;How to Solve a Problem&lt;/h4&gt;
&lt;h6&gt;How to approach, visualize and make a plan to solve a problem&lt;/h6&gt;
&lt;p&gt;We reviewed our general approach to solving a large problem with our example of cleaning a whole house. The thought of cleaning each room in the entire house is overwhelming &lt;strong&gt;-not for long!&lt;/strong&gt;. Let's make it more manageable. First, &lt;em&gt;ask questions&lt;/em&gt;: what is the problem? are there any special cases? Next, &lt;em&gt;look for familiar things&lt;/em&gt;: if you have solved a similar problem, see if that solution can apply to the new problem. Next, &lt;em&gt;divide and conquer&lt;/em&gt;: to make it seem more manageable, we strategized on how to break up the large task into smaller, more manageable ones. Finally, &lt;em&gt;make a plan (or algorithm)&lt;/em&gt;: make a plan to tackle the new subsets of problems that make up the larger one; start at a subtask, finish it, then move on to the next; until the whole task is completed.  &lt;/p&gt;
&lt;h4&gt;Binary Search Tree&lt;/h4&gt;
&lt;h5&gt;How computers efficiently search through a sorted list&lt;/h5&gt;
&lt;p&gt;I'm thinking of a number... Choose a number between 1 and 20. If your first guess was in the middle, that was a great start! Then I could say if your guess was lower or higher than the number I'm thinking of. If you continue with using that method (start in the middle of the range of numbers), then you will guess correctly, &lt;em&gt;much&lt;/em&gt; faster than simply guessing : is it one? is it two? is it three? and so on, or guessing numbers randomly. Take a look at the search tree below. The tree has a range of 15.
&lt;img alt="interactive quiz" src="images/binary_search_tree_image.jpg"&gt;&lt;br&gt;
Every node in the tree has a value. Do you see a pattern? The subtree to the right of its node is greater than (&lt;em&gt;&amp;gt;&lt;/em&gt;) its parent nodes value. The subtree to the left of its node is less than (&lt;em&gt;&amp;lt;&lt;/em&gt;) its parent nodes value.  &lt;/p&gt;
&lt;p&gt;From here, we worked to create a random number guessing game in Python. The computer randomly chooses from a range of values, and the user tries to guess it. The bigger the range of values, the more you see how effective using the binary search method is. So, you can start to see how computers can handle large amounts of data with some simple tricks. Handling data will be a major theme in the coming weeks. Below is the gist:  &lt;/p&gt;
&lt;p&gt;We'll come back to this concept later... We will actually build a binary search program!&lt;br&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/78ed5dbb6baaa57b3a18a7e9e242b674.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment One&lt;/strong&gt;: Try making this program continuous by adding a while loop.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/17/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Python Dictionaries&lt;/h4&gt;
&lt;p&gt;A Python dictionary (or MAP) is a collection of key-value pairs. In other words, think of Python dictionaries as glossaries or dictionaries in the real world. In a glossary or dictionary, you have words that each have their own meaning. To relate it to a Python dictionary, the dictionary word is the &lt;em&gt;key&lt;/em&gt; and the meaning of the word is the &lt;em&gt;value&lt;/em&gt;. We started with a class exercise to gather our data (or information). We gathered basic information about one another. The keys were categories like "last_name", "favorite_food", "lucky_number", etc. The answers to each question is the value.  &lt;/p&gt;
&lt;p&gt;Here's an example: &lt;script src="https://gist.github.com/jo3t3ch3m/f697f828f0c1b68e57f085708a12358e.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;To relate the accessibility of Python dictionaries, consider an example in the real-world: You are searching for one word in a very large dictionary, glossary, or encyclopedia. You COULD search each word starting from the beginning (this would take quite a while). OR you could use different search methods: Look up the starting letter of the word (or key); this narrows your search down a bit. Now, you can just search for the word (key) in that selection to get its VALUE.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Two&lt;/strong&gt;: Make an interactive program where a user can input their information from prompts by the computer. After the user types in their responses, those values are automatically added to a dictionary.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/24/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Nesting&lt;/h4&gt;
&lt;h6&gt;More abstraction!&lt;/h6&gt;
&lt;p&gt;You can 'store' a set of dictionaries in a list or a list of items as a value in a dictionary. Remember lists?! "Yes!"... Good! We stored our freshly made dictionaries for each classmate from last week into a Python list. This method is called nesting. Another neat trick, spreading a program you made across several different programs. You performed something like this when you made the random number game program a couple weeks ago and when we built programs using the turtle module. You simply import your program:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from dictionary import *&lt;/code&gt;&lt;br&gt;
Remember, once you type this in a new program, you can utilize everything you wrote in the program you imported; eliminating having to write the same things over again. I say "more abstraction", because with nesting you can hide certain details of the data inside of each dictionary; moreover, when you import a program, you can use data and functions from that program without having to 'muck up the waters' with code in this new file.  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/b145ad5423686b0cf2e4645e1f64b18f.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Three&lt;/strong&gt;: try making a loop to add all your dictionaries into the list. Next week, we'll compare tuples and look into defining our own functions and loops to make things way easier.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Four&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/31/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Python Tuples&lt;/h4&gt;
&lt;p&gt;Remember our grocery list program? Python lists are great for storing sets of items that can change throughout a program's life. But, what if you wanted to create a list of items that cannot change (Python calls items that cannot change, IMMUTABLE)? This is what tuples are for! Using tuples is more efficient than using lists when you want to store a set of values that you don't want to be changed. A tuple looks just like a list, except you use a set of parentheses () instead of square brackets []. Just like with a list, once you define a tuple, you can get to each item by referencing its index position. Let's take a look at an example of tuple:  &lt;/p&gt;
&lt;h4&gt;Rectangle Dimensions&lt;/h4&gt;
&lt;p&gt;If we have a rectangle that should always be a certain size, we can make sure that its size doesn’t change by putting the dimensions into a tuple. Let's say x (the width) is 200, and y (height) is 50. In other words, &lt;code&gt;dimensions = (200, 50)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We can access each element of the tuple just like we do with lists: &lt;code&gt;print(dimensions[0])&lt;/code&gt; would return our x value. Seem familiar?  &lt;/p&gt;
&lt;p&gt;However, if we try to change one of the values in the same we do with lists... &lt;code&gt;dimensions[0] = 370&lt;/code&gt; We get an error. Why? Because values in a tuple are immutable, they can't change! What we can do is "replace" the tuple we want to change. We did this by redefining the tuple. We also learned to loop through our tuple, to have all the items in the tuple return.  &lt;/p&gt;
&lt;h4&gt;Tally Sticks&lt;/h4&gt;
&lt;h5&gt;Data&lt;/h5&gt;
&lt;p&gt;Here's an excerpt from Wray's &lt;a href="https://gist.github.com/wray/35e11797609c4adb58dfba37f340ecc1"&gt;lesson&lt;/a&gt;: Data is at the heart of most computation. Remember, the earliest computers helped people "store" their counts - tally sticks. Today's computer systems are excellent data storage systems. So, it makes sense to learn some about how computer programs store and retrieve data.  &lt;/p&gt;
&lt;p&gt;We started by storing mock contact records, using a tuple to define the things we want to collect:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;contact = (‘first_name’, ‘last_name’, ‘mobile_phone’, ‘home_phone’, ‘zip_code’)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Well, if we had a lot of contacts to store, writing this over and over again could take a while. Instead, of writing a tuple for each contact, we defined a function to help us create contacts. Recall, &lt;strong&gt;DRY&lt;/strong&gt; stands for Don't Repeat Yourself. We then realized we wanted to do a lot more with the items. For example, we'll want to store many contacts, add more records, delete some, and so on. So, a list would work better!  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Four&lt;/strong&gt;: start trying to get these items into a list. Start with an empty list, then add to it using list functions we've learned.  &lt;/p&gt;
&lt;h3&gt;Week Five&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;02/07/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Lists Over Tuples&lt;/h4&gt;
&lt;p&gt;Lists over tuples, at least in this case. So, we realized we can do a lot more with a list than we can with a tuple. Remember, we can't change items in a tuple, but we can with a list. Here's are starting list:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;contacts = []&lt;/code&gt; now, we just add to the list.&lt;br&gt;
&lt;code&gt;contacts.append(create_contact("John","Doe","804-555-1235","804-555-1236"))&lt;/code&gt; and so on.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Five&lt;/strong&gt;: Create a loop to ask for contact data from a user. You may recognize a similar tactic we used when we made our grocery list program. There, we had our program accept input from a user and had the program add to our list, whatever the user typed in.&lt;/p&gt;
&lt;p&gt;Next week, we'll go back to nesting, then come back to Wray's lecture on data!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;02/14/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Make the Data 'Reachable'&lt;/h4&gt;
&lt;p&gt;So, we have our stored data in a list. Now we'll try to use this data, or search it. A list (or dictionary &lt;strong&gt;HINT&lt;/strong&gt;) can contain millions of items. Python has a way we can search large amounts of information. We've already tried our hand at loops and conditionals, so let's create a simple search by first name. Take a look at the Gist on GitHub, starting at line 46.&lt;br&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/77be4c0f06b00f62653cfe36c40cfa9b.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Seven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;02/21/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Nest a List in a Dictionary&lt;/h4&gt;
&lt;p&gt;Recall from Week two and three: we have already made a few dictionaries and are familiar with how to access information from them. Anytime you want more than one value associated with a key, go ahead and nest a list inside that dictionary. We completed a good example of how to do this. Consider describing a pizza someone wants to order. Sure if you used a list, you could store a list of the pizza toppings; however, you can use a dictionary to effectively describe absolutely everything on the pizza. For our example, two kinds of information are being stored for each pizza; type of crust and a list of toppings.  &lt;/p&gt;
&lt;p&gt;Here's the gist:  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/97d423651ed2080c8c3941f2f084df92.js"&gt;&lt;/script&gt;

&lt;p&gt;Included in the gist is our example of the favorite programming languages poll; now, with nested lists.  &lt;/p&gt;
&lt;p&gt;Below, the slides from this class if you want a little review with some nice visuals.&lt;br&gt;
&lt;iframe src="https://docs.google.com/presentation/d/1dBi-DF9wLJTLOB1OhBlwrP7Ppg8iTO35VROwwCc5j8w/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Six&lt;/strong&gt;: Make your pizza program interactive. We had nice practice with this last year in our grocery list program. Have your program request user input to build a pizza using while loops. Ideally, you can pass your program to someone to build their own pizza and see the type of pizza they built looped back to them. Next week we'll finish up nesting and become masters at user input and while loops!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Eight&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;02/28/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;User Input&lt;/h4&gt;
&lt;p&gt;Most programs are created to solve a problem. This is why we started this session with displaying techniques for solving problems by breaking them down into smaller, more manageable ones. We continue this theme throughout our session together. To understand the problem, we usually look to who has the problem and what their problem is. I'd bring up use-case (just did!), but we'll work up to that. Instead, just think; in order to solve a user's issue, we usually need to get information provided by the user. I personally think it is more fun and engaging to write programs which ask the user for input and you do something with that input. We have already had a little experience writing programs that take user input when we wrote our grocery list and text adventure programs. We started our look towards user input by running through several programs:  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/00ca9dbae6a381de13120e5b9def3ff8.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Seven&lt;/strong&gt;: Now that you have a good grasp on how to get input from a user. Revisit your pizza program once again and add the techniques we learned in class. If you are over pizza, check out the other challenge in the slides from last week's blogpost. Write an interactive program that prompts the user for input on their favorite cities and fill in a dictionary with that input. This is done in a similar style as the pizza program (nesting a list in a dictionary). &lt;strong&gt;BONUS&lt;/strong&gt;: taking input is great, but sometimes it ends before you want it to. Try your hand at adding a while loop to keep the program running as long as the user wants it to. Check out the &lt;a href="https://gist.github.com/joetechem/99d51badbd674b0e3d60aefa7170694a"&gt;gist&lt;/a&gt; on GitHub to help you get started on while loops.  &lt;/p&gt;
&lt;h4&gt;&lt;a href="http://register.techemstudios.com/"&gt;New Summer Camp Schedule&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3&gt;Week Nine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/07/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;While Loops&lt;/h4&gt;
&lt;p&gt;In most programs, &lt;code&gt;while&lt;/code&gt; loops are used to keep a program running, as long as certain conditions are true. We started out with a simple counting program that starts counting from a number (adds to the number). Python will keep adding to the number until it is less than or equal to a certain number. Then we added to the program, a &lt;code&gt;while&lt;/code&gt; loop and &lt;code&gt;continue&lt;/code&gt;. Once, Python runs through the code in the loop once. When it comes to the &lt;code&gt;continue&lt;/code&gt; statement, Python again starts from the beginning of the loop. This process is repeated until the number we specify is finally reached. Some of you noticed that this program could be useful to mock as a timer in a game!  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;current_number = 0          
while current_number &amp;lt;= 10:        
    current_number += 1      
    if current_number % 2 == 0:       
        continue  
    print(current_number)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;In the counting program, we went over a new operator in Python, modulo. This operation performs division of two numbers, but returns the remainder.  &lt;/p&gt;
&lt;p&gt;Check out the slides from tonight's class:  &lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/d/1l1C7IXf4p9GenKdDELQLLSrPkZULozX1HsvWfYVGwWU/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Assignment Eight&lt;/strong&gt;: Write a program using a while loop that asks for user input to fill in a dictionary. In class, we did this to fill a list. The dictionary can be anything you want it to be! Look earlier in this post to get some review on dictionaries if you need to. Remember to use Slack if you have any questions!      &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Ten&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/14/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Object-Oriented Programming (OOP)&lt;/h4&gt;
&lt;p&gt;Or object-oriented development(OOD) is a helpful way to break-down (or model) complex systems into a collection of simpler objects that communicate with each other. This is one of the most effective practices in writing large software systems and is great for modeling the real-world in code. We quickly went through some vocabulary we'll find in OOP: Classes, Objects, Attributes, Methods, Instantiation, etc. Instead of getting bogged down in definitions, we took a look at a few examples.  &lt;/p&gt;
&lt;p&gt;When you think of the term, "vehicle" you might think of it as something that you can use to take you somewhere, i.e. a car, boat, or bicycle. Well, all these have attributes that are little different, but they are similar in that they are considered a vehicle. When we compare the car and the bicycle to the boat, we can say the car and bicycle are different from the boat, because they are "wheeled" vehicles. We can compare the car to the bicycle and see that one requires gas and the other doesn't. We can go further and compare cars to one another; some are SUVs, others are sedans and so on. Each type of car has their own unique properties and things it can do, but their similarities can be traced back to being a general car, wheeled vehicle (like a bike) and a vehicle (like a boat). So, you can see how we can model almost any real-world thing using this approach. That can be a lot to follow, so here's the same example displayed as picture:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="oop vehicles" src="images/oop.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;We took a look at another example, where we compared a dog to a sidewalk. How can they be similar?! Well, both are things or nouns. In Python, we call them objects. We categorized this example further using a similar approach as before. We started with the category (or class) "Things" and created sub-classes. When we define a class, we tell Python what general behavior all the sub-classes and objects will have. Objects have their own properties and functions. A dog is living so it is part of the class Animate. A sidewalk or a dog's chew toy are non-living, so it is part of the class Inanimate. We put this example to the test by creating and defining a class for a dog (in general) in Python.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="class hierachry" src="images/Class-hierarchy.jpg"&gt;  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/bcb7a0e6ccd33af82410962064298a6b.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Nine&lt;/strong&gt;: Try categorizing something you collect or interests you by defining it in a class and use an example to test some of the methods and attributes you made that make up that class. You can model it from the gist example we worked on in class.    &lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://docs.google.com/presentation/d/1XD2AJ2XU35jTxbl1gUfe9NS-VbvsQv6hlv35PGBM0jg/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Eleven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/21/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Store Functions in Modules&lt;/h4&gt;
&lt;p&gt;We created a function in one Python file, saved it, then used it by making its function call in a separate file. This practices becomes very useful when working on a large project, such as a website application or a game. Having a large list of functions in one file, keeps you from 'mucking' up other files you are working in. All you have to do is import that filename in the one you're working in; keeping your code neat and organized. We call the import file (or files), &lt;strong&gt;modules&lt;/strong&gt;.   &lt;/p&gt;
&lt;h4&gt;Pygame&lt;/h4&gt;
&lt;p&gt;Pygame is a collection of Python modules that basically contain already written functions, classes and objects, so we don't need to worry ourselves with creating them from scratch. What we worry about is calling those functions and dealing with the logic in our game, which helps to create games fairly quickly! We started our look at pygame by working on making a basic snake game (or slither.io). This exercise involved adding missing code and using debugging techniques led by a &lt;a href="https://github.com/chk18/snake_pygame/blob/master/snake_handout.pdf"&gt;pdf handout&lt;/a&gt; made by Chris. You can check out the code we worked on from the &lt;a href="https://github.com/chk18/snake_pygame"&gt;GitHub repository&lt;/a&gt;. For the most part, all &lt;em&gt;pygames&lt;/em&gt; (and games in general) contain the same "skeleton" i.e., color variables, window sizes, game logic, a main game loop, controls, etc. After feeling comfortable with completing one game, you can essentially reuse much of this "skeleton".  &lt;/p&gt;
&lt;h4&gt;Preparing for Web Apps&lt;/h4&gt;
&lt;p&gt;The whole notion of storing functions in variables and working with a sort of "framework" in pygame will prepare us for using the Django web framework to create our own basic website in Python!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week 12&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;04/04/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Python Projects&lt;/h4&gt;
&lt;p&gt;Parents, you can find your child's Python Projects they have been working on this session on the repository called, &lt;a href="https://github.com/joetechem/TechEmStudentsProjects"&gt;"TechEmStudentsProjects" on GitHub&lt;/a&gt;. Here, there is also the projects from last year in case you missed them. You can view them right on the site, or you can download the files compressed (or zipped) and extract them on your computer to edit and run them.   &lt;/p&gt;
&lt;h4&gt;Practice... Practice!&lt;/h4&gt;
&lt;p&gt;Python is free. If you have not already downloaded Python at home, you can find it at &lt;a href="https://www.python.org/"&gt;Python.org&lt;/a&gt;. Just follow the steps to download (we used Python version 2.7) on the site and create Python programs the same way we have been doing in class on the chromebooks.  &lt;/p&gt;
&lt;p&gt;If you have any questions about Python, GitHub, or anything feel free to email us at info@techemstudios.com or reach out to us on &lt;a href="https://slack.com/?cvosrc=ppc.google.slack&amp;amp;cvo_campaign=&amp;amp;cvo_crid=189426831117&amp;amp;Matchtype=p&amp;amp;utm_source=google&amp;amp;utm_medium=ppc&amp;amp;utm_campaign=generalbrand&amp;amp;c3api=5542,189426831117,slack&amp;amp;gclid=COPV7-qKjtMCFUiHswodKx4OKg"&gt;Slack&lt;/a&gt;. Be sure to look at back at the blogs for handy programming content.    &lt;/p&gt;
&lt;h3&gt;Summer Camps&lt;/h3&gt;
&lt;p&gt;We have returning summer camps and brand new ones. Here is the &lt;a href="http://register.techemstudios.com/"&gt;New Summer Camp Schedule&lt;/a&gt;. We hope to see you there!  &lt;/p&gt;
&lt;p&gt;Thank you for another great Code Em Session!  &lt;/p&gt;</content><category term="raspberry pi"></category><category term="coding"></category><category term="github"></category><category term="slack"></category><category term="computer science"></category></entry><entry><title>Read about Rockets, Pis and Alexa</title><link href="/read-about-rockets-pis-and-alexa.html" rel="alternate"></link><published>2017-03-31T00:00:00-04:00</published><updated>2017-03-31T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2017-03-31:/read-about-rockets-pis-and-alexa.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Another medium post&lt;/h3&gt;
&lt;p&gt;Read about yet another cool project we'll be bringing into our classes
and camps. Check out our latest: &lt;a href="https://medium.com/the-art-of-technology-training/alexa-launch-my-model-rocket-e1ebde979b34"&gt;&lt;img src="images/mission-control.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Another medium post&lt;/h3&gt;
&lt;p&gt;Read about yet another cool project we'll be bringing into our classes
and camps. Check out our latest: &lt;a href="https://medium.com/the-art-of-technology-training/alexa-launch-my-model-rocket-e1ebde979b34"&gt;&lt;img src="images/mission-control.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="aws"></category><category term="alexa"></category><category term="raspberry pi"></category><category term="model rockets"></category></entry><entry><title>Tuckahoe Elementary Game Design Winter 2017</title><link href="/tuckahoe-elementary-game-design-winter-2017.html" rel="alternate"></link><published>2017-03-23T00:00:00-04:00</published><updated>2017-03-23T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-03-23:/tuckahoe-elementary-game-design-winter-2017.html</id><summary type="html">&lt;hr&gt;
&lt;h2&gt;Tuckahoe Elementary ASE 2017&lt;/h2&gt;
&lt;h3&gt;List of Downloadable Links for Created Games&lt;/h3&gt;
&lt;p&gt;Everyone did a great job designing their games! Below is a list of links for each student from the Game Design class at Tuckahoe Elementary School from this Winter's session. A total of 16 designed games! As of now …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;Tuckahoe Elementary ASE 2017&lt;/h2&gt;
&lt;h3&gt;List of Downloadable Links for Created Games&lt;/h3&gt;
&lt;p&gt;Everyone did a great job designing their games! Below is a list of links for each student from the Game Design class at Tuckahoe Elementary School from this Winter's session. A total of 16 designed games! As of now, Hyperpad is only available on an iPad and is free.  &lt;/p&gt;
&lt;p&gt;These links are only available for seven days, starting today. So, be sure to check out the game links as soon as you can! Feel free to email joe@techemstudios.com if the link has expired.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:Links to the games open properly only when opened from an iPad.  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Student Name&lt;/th&gt;
&lt;th&gt;Link to Hyperpad Game&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Aiden&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZrjei"&gt;Yoshi's Revenge&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Elisa&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZkNEl"&gt;Care Bear Run&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Everett&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZCYJX"&gt;Slime Escape!&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Finn&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZkzgt"&gt;Epic&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Floyd&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZvzdH"&gt;Coin Walk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Henry&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZCVxE"&gt;Henry's Nothing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jack&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZu7YB"&gt;Yoshi's Revenge&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jacob&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZwJ90"&gt;Jacob&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Josephine&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZaOPq"&gt;Awesome Adventure&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kathreen&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZlSMk"&gt;Green Space Man's Adventure&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Katie&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZDac9"&gt;Stupidest Game Ever&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Laney&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZoAS2"&gt;Soccer Ball Unicorn Run&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Matthew&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2lijLlL"&gt;I Like Trains&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ollie&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZFHD6"&gt;Cats Rule&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tolly&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZxzTh"&gt;Mirien&lt;/a&gt;, &lt;a href="http://bit.ly/2mZvkPD"&gt;Miria&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tommy&lt;/td&gt;
&lt;td&gt;&lt;a href="http://bit.ly/2mZii4Z"&gt;Tommy Tuckahoe&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Instructions for Accessing Your Game&lt;/h4&gt;
&lt;p&gt;Download the free &lt;a href="https://itunes.apple.com/app/apple-store/id886106438?mt=8"&gt;Hyperpad&lt;/a&gt; app. Open the link for your game on an iPad. The game will open in the app. Now, you can play the game and edit the game, so that you will always have it!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For more on what we learned about the design process to create these games and Hyperpad, visit our blog on &lt;a href="http://blog.techemstudios.com/design-thinking-outline.html"&gt;Design Thinking&lt;/a&gt; and a blog from last year's &lt;a href="http://blog.techemstudios.com/design-thinking-and-gaming-camp.html"&gt;Game Design summer camp&lt;/a&gt;. We learned this process specifically for creating games, but it is widely used for design, in general. Have a great rest of the school year!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;a href="http://register.techemstudios.com/"&gt;Summer Camp Registration is Now Open!&lt;/a&gt;&lt;/h3&gt;</content><category term="computer science"></category><category term="design thinking"></category><category term="game design"></category><category term="Hyperpad"></category></entry><entry><title>Homeschool Computer Science and Programming Winter 2017</title><link href="/homeschool-computer-science-and-programming-winter-2017.html" rel="alternate"></link><published>2017-03-20T00:00:00-04:00</published><updated>2017-03-20T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-03-20:/homeschool-computer-science-and-programming-winter-2017.html</id><summary type="html">&lt;h3&gt;Week One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/12/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;How to Solve a Problem&lt;/h4&gt;
&lt;h6&gt;How to approach, visualize and make a plan to solve a problem&lt;/h6&gt;
&lt;h5&gt;As a Class:&lt;/h5&gt;
&lt;p&gt;We reviewed our general approach to solving a large problem with our example of cleaning a whole house. The thought of cleaning each room in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Week One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/12/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;How to Solve a Problem&lt;/h4&gt;
&lt;h6&gt;How to approach, visualize and make a plan to solve a problem&lt;/h6&gt;
&lt;h5&gt;As a Class:&lt;/h5&gt;
&lt;p&gt;We reviewed our general approach to solving a large problem with our example of cleaning a whole house. The thought of cleaning each room in the entire house is overwhelming, &lt;strong&gt;not for long!&lt;/strong&gt;. First, &lt;em&gt;ask questions&lt;/em&gt;: what is the problem? are there any special cases? Next, &lt;em&gt;look for familiar things&lt;/em&gt;: if you have solved a similar problem, see if that solution can apply to the new problem. Thirdly, &lt;em&gt;divide and conquer&lt;/em&gt;: to make it seem more manageable, we strategized on how to break up the large task into smaller, more manageable ones. Finally, &lt;em&gt;make a plan (or algorithm)&lt;/em&gt;: make a plan to tackle the new subsets of problems that make up the larger one; start at a subtask, finish it, then move on to the next; until the whole task is completed.  &lt;/p&gt;
&lt;h4&gt;Binary Search Tree&lt;/h4&gt;
&lt;h6&gt;How computers efficiently search through a sorted list&lt;/h6&gt;
&lt;h5&gt;Group One:&lt;/h5&gt;
&lt;p&gt;I'm thinking of a number... Choose a number between 1 and 20. If your first guess was in the middle, that was a great start! Then I could say if your guess was lower or higher than the number I'm thinking of. If you continue with using that method (start in the middle of the range of numbers), then you will guess correctly, &lt;em&gt;much&lt;/em&gt; faster than simply guessing : is it one? is it two? is it three? and so on, or guessing numbers randomly. Take a look at the search tree below. The tree has a range of 15.
&lt;img alt="interactive quiz" src="images/binary_search_tree_image.jpg"&gt;&lt;br&gt;
Every node in the tree has a value. Do you see a pattern? The subtree to the right of its node is greater than (&lt;em&gt;&amp;gt;&lt;/em&gt;) its parent nodes value. The subtree to the left of its node is less than (&lt;em&gt;&amp;lt;&lt;/em&gt;) its parent nodes value.  &lt;/p&gt;
&lt;p&gt;From here, we worked to create a random number guessing game in Python. The computer randomly chooses from a range of values, and the user tries to guess it. The bigger the range of values, the more you see how effective using the binary search method is. So, you can start to see how computers can handle large amounts of data with some simple tricks. Handling data will be a major theme in the coming weeks. Below is the gist:  &lt;/p&gt;
&lt;p&gt;We'll come back to this concept later... We will actually build a binary search program!&lt;br&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/78ed5dbb6baaa57b3a18a7e9e242b674.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment One&lt;/strong&gt;: Try making this program continuous by adding a while loop.  &lt;/p&gt;
&lt;h4&gt;What is Technology?&lt;/h4&gt;
&lt;h6&gt;Setting up for Computer Science Talks&lt;/h6&gt;
&lt;h5&gt;Group Two:&lt;/h5&gt;
&lt;p&gt;So, What is technology? Is a chair or table technology? How about a sink? The answer is, all those items are technology! Technology are things created by humans to make our lives easier and/or solve problems. Some technology comes with instructions. For instance, new toys (e.g. Legos), bicycles, etc. come with instructions on how to put it together and how it works. Some technology, like phones, computers, iPads come with directions already inside of it. Someone (a person) had to write those directions (instructions) to tell that technology what to do. This is known as a computer program, step-by-step instructions on what to do. Computers only do what they are told to do! We talked about the difference between hardware (the physical stuff) and software (games/programs). We drew a computer on a piece of paper and labeled its parts. We defined which parts of the computer are input devices and which parts are output devices. To get used to telling a computer what to do and to further our learning in computational thinking, we started creating instructions for a robot to carry out, using the app, Lightbot.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/19/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Making an Algorithm&lt;/h4&gt;
&lt;h6&gt;Step-by-step instructions to solve a task&lt;/h6&gt;
&lt;p&gt;We discussed the steps involved to make a peanut butter and jelly sandwich! We talked about how together, these steps make up a sequence of instructions. If these steps are followed, you end up with the result of having a pb&amp;amp;j sandwich. You can also call this an algorithm. An algorithm is step-by-step instructions that are followed to complete a task or solve a problem.  &lt;/p&gt;
&lt;h4&gt;Python Dictionaries&lt;/h4&gt;
&lt;h5&gt;Group One:&lt;/h5&gt;
&lt;p&gt;A Python dictionary (or MAP) is a collection of key-value pairs. In other words, think of Python dictionaries as glossaries or dictionaries in the real world. In a glossary or dictionary, you have words that each have their own meaning. To relate it to a Python dictionary, the dictionary word is the &lt;em&gt;key&lt;/em&gt; and the meaning of the word is the &lt;em&gt;value&lt;/em&gt;. We started with a class exercise to gather our data (or information). We gathered basic information about one another. The keys were categories like "last_name", "favorite_food", "lucky_number", etc. The answers to each question is the value.  &lt;/p&gt;
&lt;p&gt;Here's an example: &lt;script src="https://gist.github.com/jo3t3ch3m/f697f828f0c1b68e57f085708a12358e.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;To relate the accessibility of Python dictionaries, consider an example in the real-world: You are searching for one word in a very large dictionary, glossary, or encyclopedia. You COULD search each word starting from the beginning (this would take quite a while). OR you could use different search methods: Look up the starting letter of the word (or key); this narrows your search down a bit. Now, you can just search for the word (key) in that selection to get its VALUE.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Two&lt;/strong&gt;: Make an interactive program where a user can input their information from prompts by the computer. After the user types in their responses, those values are automatically added to a dictionary.  &lt;/p&gt;
&lt;h4&gt;Creating an Algorithm&lt;/h4&gt;
&lt;h5&gt;Group Two:&lt;/h5&gt;
&lt;p&gt;We started with a jumbled set of steps to complete the task of planting a seed. We arranged the steps in the order that made the most steps. We found that we could omit certain steps, because they did not help in completing the task. We then reviewed procedures form Lightbot. Procedures in Lightbot are just like functions used in computer programming. If you recognize a pattern, go ahead and make that pattern part of a procedure, or function. You can then reuse the procedures to use less instructions to get to the end result thus, making the overall set of steps more efficient!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;01/26/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Simulate a Program&lt;/h4&gt;
&lt;p&gt;What happens when you fire up your favorite program or game? Fetch, Decode Execute! We simulated what happens inside of a computer by playing the parts of a program, bus, and CPU (central processing unit). The Bus connects all the components of a computer, the program contains a list of instructions that perform some action, and the CPU is the "brain" of the computer; it carries out the program's instructions. This was our &lt;em&gt;watered down&lt;/em&gt; process: CPU tells the bus to fetch the instructions from the program; the program gives the instructions to the bus; the bus gives the instructions to the CPU; then, the CPU decodes and executes (carries out) those instructions! This Fetch, Decode, Execute cycle happens from the moment you power on your machine. We are able to get the computers increasingly efficient at this process.  &lt;/p&gt;
&lt;h4&gt;Nesting&lt;/h4&gt;
&lt;h6&gt;More abstraction!&lt;/h6&gt;
&lt;h5&gt;Group One:&lt;/h5&gt;
&lt;p&gt;You can 'store' a set of dictionaries in a list or a list of items as a value in a dictionary. Remember lists?! "Yes!"... Good! We stored our freshly made dictionaries for each classmate from last week into a Python list. This method is called nesting. Another neat trick, spreading a program you made across several different programs. You performed something like this when you made the random number game program a couple weeks ago and when we built programs using the turtle module. You simply import your program:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from dictionary import *&lt;/code&gt;&lt;br&gt;
Remember, once you type this in a new program, you can utilize everything you wrote in the program you imported; eliminating having to write the same things over again. I say "more abstraction", because with nesting you can hide certain details of the data inside of each dictionary; moreover, when you import a program, you can use data and functions from that program without having to 'muck up the waters' with code in this new file.  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/b145ad5423686b0cf2e4645e1f64b18f.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Three&lt;/strong&gt;: try making a loop to add all your dictionaries into the list. Next week, we'll compare tuples and look into defining our own functions and loops to make things way easier.  &lt;/p&gt;
&lt;h4&gt;Conditions and Events&lt;/h4&gt;
&lt;h5&gt;Group Two:&lt;/h5&gt;
&lt;p&gt;We discussed what conditions and events are in real life and related it to making computer programs. "IF you eat all of your vegetables, THEN you can have desert" -sound familiar? This condition statement follows events and conditions found in programming. We worked on making a program in Hopscotch to touch on the concepts: events, sequence, loops, and ranges!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Five&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;02/16/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Nesting&lt;/h4&gt;
&lt;h5&gt;Nest a List in a Dictionary&lt;/h5&gt;
&lt;p&gt;Recall from Week two and three: we have already made a few dictionaries and are familiar with how to access information from them. Anytime you want more than one value associated with a key, go ahead and nest a list inside that dictionary. We completed a good example of how to do this. Consider describing a pizza someone wants to order. Sure if you used a list, you could store a list of the pizza toppings; however, you can use a dictionary to effectively describe absolutely everything on the pizza. For our example, tow kinds of information are being stored for each pizza; type of crust and a list of toppings.  &lt;/p&gt;
&lt;p&gt;Here's the gist:  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/97d423651ed2080c8c3941f2f084df92.js"&gt;&lt;/script&gt;

&lt;p&gt;Included in the gist is our example of the favorite programming languages poll; now, with nested lists.  &lt;/p&gt;
&lt;p&gt;Below, the slides from this class if you want a little review with some nice visuals.&lt;br&gt;
&lt;iframe src="https://docs.google.com/presentation/d/1dBi-DF9wLJTLOB1OhBlwrP7Ppg8iTO35VROwwCc5j8w/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Four&lt;/strong&gt;: Make your pizza program interactive. We had nice practice with this last year in our grocery list program. Have your program request user input to build a pizza using while loops. Ideally, you can pass your program to someone to build their own pizza and see the type of pizza they built looped back to them. Next week we'll finish up nesting and become masters at user input and while loops!   &lt;/p&gt;
&lt;h4&gt;Hardware Advancements&lt;/h4&gt;
&lt;h5&gt;Group Two:&lt;/h5&gt;
&lt;p&gt;To further engrain efficiency and to appreciate advancements of computer hardware, we discussed the first computers, Tally Sticks. Early computers were tools used by humans to help with math. In the instance of tally sticks, these tools helped people count beyond their inherited method (fingers) before history was recorded! Our discussion included more advanced tools from the abacus, to the Babbage machine, to the first commercial computers, like the ENIAC.  &lt;/p&gt;
&lt;h5&gt;Binary Switching Devices&lt;/h5&gt;
&lt;p&gt;&lt;img alt="circuits" src="images/hs-talk-21.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;We focused on the main components of computer hardware. The vacuum tube in commercial computers was replaced by the transistor, considered the building blocks of computers. We learned connecting transistors can make circuits. When we miniaturize these, we make microchips, which are the main components of computer hardware today. To gain an understanding of how this works, we learned about different switching devices that make up circuits. These included binary logic gates, AND; OR; and NOT gates. These can only have two possible input and output values, ON or OFF (hence the name binary). We created virtual logic gates using the app, &lt;a href="https://itunes.apple.com/us/app/circuit-coder/id492180472?mt=8"&gt;Circuit Coder&lt;/a&gt; and we combined the gates to create circuits. We continued our discussion of binary by learning the binary number system. Think of binary as the language computers "speak". Here's an example of the binary flashcards we made:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="binary flash cards" src="images/binary-cards-piano.jpg"&gt;  &lt;/p&gt;
&lt;h5&gt;Writing Our First Program&lt;/h5&gt;
&lt;p&gt;We ended the class discussing what we've learned so far about programming (coding). We wrote our first program in a programming language, &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;. The program was the classic, &lt;a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program"&gt;"hello world!"&lt;/a&gt;. When the program is run, we have the computer &lt;em&gt;say&lt;/em&gt; "hello world!". We related the parts of this program to the apps we have used so far, Lightbot and Hopscotch; highlighting procedures in Lightbot and giving instructions for the computer to carry out, step-by-step. We took this program a step further by adding variables and loops to further relate what we have learned so far in the class.  &lt;/p&gt;
&lt;p&gt;Below, is a gist from &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;:  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/0f500f3e8f219a95f2ab9e7a42786fe1.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h3&gt;Week Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;02/23/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;User Input&lt;/h4&gt;
&lt;h5&gt;Group One:&lt;/h5&gt;
&lt;p&gt;Writing interactive programs are fun and engaging! So let's become gurus at this!  &lt;/p&gt;
&lt;p&gt;Take a look at the gist we completed during class:  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/00ca9dbae6a381de13120e5b9def3ff8.js"&gt;&lt;/script&gt;

&lt;h4&gt;Calculator Program&lt;/h4&gt;
&lt;h5&gt;Group Two:&lt;/h5&gt;
&lt;p&gt;To familiarize ourselves with more concepts in programming, we made a simple program that takes input from a user and calculates the result. After we finished, we then made a program &lt;em&gt;draw&lt;/em&gt; out the result using a Python module called, turtle.py  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/8eba619a6ee4d949d5fb13a72661f628.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Five&lt;/strong&gt;: Now that we know all about user input, revisit the pizza.py program. Make it a goal to pass your program to a friend and have them build their own pizza by typing in what they want. Once they finish, your program should loop through the new nested dictionary to show them the pizza they just built! &lt;strong&gt;BONUS&lt;/strong&gt; Make sure you have a GitHub account that you can log in to. Extra bonus: upload your interactive pizza program to your own repository on GitHub. If you need help, check out the blog, http://blog.techemstudios.com/github-part-one.html or ask a question on Slack.    &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Seven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/02/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Fill a List With User Input&lt;/h4&gt;
&lt;script src="https://gist.github.com/joetechem/f120b5ea06c7d43a38506f6f7717682f.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Six&lt;/strong&gt;: See if you can add to the code we worked on in class to have the program ask for each user's name. A bonus would be to have each user's input stored in separate lists.  &lt;/p&gt;
&lt;p&gt;Remember, to download Python at home to practice outside of class, visit https://www.python.org/   &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Eight&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/09/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;While Loops&lt;/h4&gt;
&lt;p&gt;In most programs, &lt;code&gt;while&lt;/code&gt; loops are used to keep a program running, as long as certain conditions are true. We started out with a simple counting program that starts counting from a number (adds to the number). Python will keep adding to the number until it is less than or equal to a certain number. Then we added to the program, a &lt;code&gt;while&lt;/code&gt; loop and &lt;code&gt;continue&lt;/code&gt;. Once, Python runs through the code in the loop once. When it comes to the &lt;code&gt;continue&lt;/code&gt; statement, Python again starts from the beginning of the loop. This process is repeated until the number we specify is finally reached. Some of you noticed that this program could be useful to mock as a timer in a game!  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;current_number = 0          
while current_number &amp;lt;= 10:        
    current_number += 1      
    if current_number % 2 == 0:       
        continue  
    print(current_number)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the counting program, we went over a new operator in Python, modulo. This operation performs division of two numbers, but returns the remainder.  &lt;/p&gt;
&lt;p&gt;Check out the slides from today's class:  &lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/d/1l1C7IXf4p9GenKdDELQLLSrPkZULozX1HsvWfYVGwWU/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Assignment Seven&lt;/strong&gt;: Write a program using a while loop that asks for user input to fill in a dictionary. In class, we did this to fill a list. The dictionary can be anything you want it to be! Look earlier in this post to get some review on dictionaries if you need to. Remember to use Slack if you have any questions!      &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Nine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/16/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Object-Oriented Programming (OOP)&lt;/h4&gt;
&lt;p&gt;Or object-oriented development(OOD) has the main idea of viewing a complex system as being a collection of simpler objects that communicate with each other. This is one of the most effective practices in writing software and is great for modeling occurences in the real-world. We quickly went through some vocabulary we'll find in OOP: Classes, Objects, Attributes, Methods, Instantiation, etc. Instead of getting bogged down in definitions, we took a look at a few examples.  &lt;/p&gt;
&lt;p&gt;When you think of the term, "vehicle" you might think of it as something that you can use to take you somewhere, i.e. a car, boat, or bicycle. Well, all these have attributes that are little different, but they are similar in that they are considered a vehicle. When we compare the car and the bicycle to the boat, we can say the car and bicycle are different from the boat, because they are "wheeled" vehicles. We can compare the car to the bicycle and see that one requires gas and the other doesn't. We can go further and compare cars to one another; some are SUVs, others are sedans and so on. Each type of car has their own unique properties and things it can do, but their similarities can be traced back to being a general car, wheeled vehicle (like a bike) and a vehicle (like a boat). So, you can see how we can model almost any real-world thing using this approach. That can be a lot to follow, so here's the same example displayed as picture:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="oop vehicles" src="images/oop.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;We took a look at another example, where we compared a dog to a sidewalk. How can they be similar?! Well, both are things or nouns. In Python, we call them objects. We categorized this example further using a similar approach as before. We started with the category (or class) "Things" and created sub-classes. When we define a class, we tell Python what general behavior all the sub-classes and objects will have. Objects have their own properties and functions. A dog is living so it is part of the class Animate. A sidewalk or a dog's chew toy are non-living, so it is part of the class Inanimate. We put this example to the test by creating and defining a class for a dog (in general) in Python.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="class hierachry" src="images/Class-hierarchy.jpg"&gt;  &lt;/p&gt;
&lt;script src="https://gist.github.com/joetechem/bcb7a0e6ccd33af82410962064298a6b.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Assignment Eight&lt;/strong&gt;: Try categorizing something you collect or interests you by defining it in a class and use an example to test some of the methods and attributes you made that make up that class. You can model it from the gist example we worked on in class. Some of you started this by creating classes that involved your favorite games such as, HalfLife and Overwatch.      &lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://docs.google.com/presentation/d/1XD2AJ2XU35jTxbl1gUfe9NS-VbvsQv6hlv35PGBM0jg/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Week Ten&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;03/23/2017&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Store Functions in Modules&lt;/h4&gt;
&lt;p&gt;We created a function in one Python file, saved it, then used it by making its function call in a separate file. This practices becomes very useful when working on a large project, such as a website application or a game. Having a large list of functions in one file, keeps you from 'mucking' up other files you are working in. All you have to do is import that filename in the one you're working in; keeping your code neat and organized. We call the import file (or files), &lt;strong&gt;modules&lt;/strong&gt;.   &lt;/p&gt;
&lt;h4&gt;Decision Tree&lt;/h4&gt;
&lt;p&gt;We are comfortable with making our own functions, using our own modules, condition blocks, for and while loops (and how to stop while loops). So, let's create text adventure games utilizing these techniques! Students got started with sketching out ideas and making decision trees on paper. Scenarios included HalfLife game adventures and escaping from dangerous houses! We created directories and subdirectories, where we'll store function we'll use to later import and to organize or code as a whole.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assignment Nine&lt;/strong&gt;: Brainstorm ways on how your decision flow of your text adventure will pan out by sketching them on a sheet of paper and think about how you'll organize your code using the module techniques we learned today.  &lt;/p&gt;
&lt;hr&gt;</content><category term="computer science"></category><category term="python"></category><category term="code"></category><category term="github"></category><category term="slack"></category></entry><entry><title>Read about Snakes on a Plane</title><link href="/read-about-snakes-on-a-plane.html" rel="alternate"></link><published>2017-02-26T00:00:00-05:00</published><updated>2017-02-26T00:00:00-05:00</updated><author><name>Wray Mills</name></author><id>tag:None,2017-02-26:/read-about-snakes-on-a-plane.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;We are publishing on medium too&lt;/h3&gt;
&lt;p&gt;And accepting submissions from all students and parents.
&lt;img alt="Python on AWS" src="images/python_lambda.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;We are experimenting with medium to better share and publish our
experiences running Tech Em and the great technologies we get to
use. Check out our latest &lt;a href="https://medium.com/the-art-of-technology-training/python-in-the-clouds-3b0f93f61372"&gt;here&lt;/a&gt; on medium.&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;We are publishing on medium too&lt;/h3&gt;
&lt;p&gt;And accepting submissions from all students and parents.
&lt;img alt="Python on AWS" src="images/python_lambda.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;We are experimenting with medium to better share and publish our
experiences running Tech Em and the great technologies we get to
use. Check out our latest &lt;a href="https://medium.com/the-art-of-technology-training/python-in-the-clouds-3b0f93f61372"&gt;here&lt;/a&gt; on medium.&lt;/p&gt;</content><category term="python"></category><category term="aws"></category></entry><entry><title>Robious Elementary Game Design Winter 2017 Links</title><link href="/robious-elementary-game-design-winter-2017-links.html" rel="alternate"></link><published>2017-02-24T21:25:00-05:00</published><updated>2017-02-24T21:25:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2017-02-24:/robious-elementary-game-design-winter-2017-links.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;List of Downloadable Links for Created Games&lt;/h3&gt;
&lt;p&gt;Everyone did a great job designing their games! Below is a list of links for each student from the Game Design class at Robious Elementary School from this Winter's session. A total of 15 designed games! Presently, Hyperpad is only available on an …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;List of Downloadable Links for Created Games&lt;/h3&gt;
&lt;p&gt;Everyone did a great job designing their games! Below is a list of links for each student from the Game Design class at Robious Elementary School from this Winter's session. A total of 15 designed games! Presently, Hyperpad is only available on an iPad and it is free.  &lt;/p&gt;
&lt;p&gt;These links are only available for seven days, starting today. So, be sure to check out the game links as soon as you can! Feel free to email joe@techemstudios.com if the link has expired.  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Student Name&lt;/th&gt;
&lt;th align="center"&gt;Link to Hyperpad Game&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Harrison&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2li6utw"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Caleb&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2lieJFP"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sydney&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2li8yBX"&gt;Game1&lt;/a&gt; &amp;amp; &lt;a href="http://bit.ly/2liaIl4"&gt;Game2&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hank&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2lifj6t"&gt;Tee Tee&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Charlie&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2linr7b"&gt;Death Ball&lt;/a&gt; &amp;amp; &lt;a href="http://bit.ly/2liddUk"&gt;Charlie Mac&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nathaniel&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2lijorC"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brett&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2lineke"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Daniel&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2li1kOo"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guthrie&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2libChr"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auggie&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2libE94"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Joshua&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2lijLlL"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brady&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2kUU7rq"&gt;Game&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Emory&lt;/td&gt;
&lt;td align="center"&gt;&lt;a href="http://bit.ly/2kV0kDy"&gt;Diaper&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Instructions for Accessing Your Game&lt;/h4&gt;
&lt;p&gt;Download the free &lt;a href="https://itunes.apple.com/app/apple-store/id886106438?mt=8"&gt;Hyperpad&lt;/a&gt; app. Open the link for your game on an iPad. The game will open in the app. Now, you can play the game and edit the game, so that you will always have it!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For more on what we learned about the design process to create these games and Hyperpad, visit our blog on &lt;a href="http://blog.techemstudios.com/design-thinking-outline.html"&gt;Design Thinking&lt;/a&gt; and a blog from last year's &lt;a href="http://blog.techemstudios.com/design-thinking-and-gaming-camp.html"&gt;Game Design summer camp&lt;/a&gt;. We learned this process specifically for creating games, but it is widely used for design, in general. Have a great rest of the school year!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;a href="http://register.techemstudios.com/"&gt;Summer Camp Registration is Now Open!&lt;/a&gt;&lt;/h3&gt;</content><category term="computer science"></category><category term="design thinking"></category><category term="game design"></category><category term="Hyperpad"></category></entry><entry><title>Code Em Fall 2016</title><link href="/code-em-fall-2016.html" rel="alternate"></link><published>2016-12-09T00:00:00-05:00</published><updated>2016-12-09T00:00:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-12-09:/code-em-fall-2016.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/13/2016&lt;/code&gt;    &lt;/p&gt;
&lt;p&gt;Code Em started with icebreaker introductions. Tell the class three truths and a false statement about yourself, including the instructors! Everyone was asked to share their experience with computer science and programming.   &lt;/p&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;To assess varying levels in computer science, we started a discussion on …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/13/2016&lt;/code&gt;    &lt;/p&gt;
&lt;p&gt;Code Em started with icebreaker introductions. Tell the class three truths and a false statement about yourself, including the instructors! Everyone was asked to share their experience with computer science and programming.   &lt;/p&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;To assess varying levels in computer science, we started a discussion on what everyone's goals might be for the class. Since this class will take a project-based approach, the students will learn to merge all of these goals into one project, or projects -from all of the class-shared objectives and set Code Em curriculum objectives, students will learn how to create an "objective tree" by using several objectives. Think of each objective, or goal as a separate piece that relates to the rest, to fit together making a large puzzle. Some of the student's objectives included, learning how to code in Python and HTML, learning to code better, be able to create a series in Scratch, code to draw a character, make different electronics and design games. By using an objective tree, as a class we can break each goal down into smaller definable characteristics. We will start to interconnect each objective (goal) from these characteristics. This objective tree method is a great method to learn; throughout the Code Em classes we will be using other methods like it to break down complex things into simpler, more understandable parts -really getting into talking about Abstraction.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Interactive Quiz!&lt;/h4&gt;
&lt;p&gt;Name that hardware!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="interactive quiz" src="images/pi.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;When the Code Em students walked into Tech Em, they noticed two tables at the front of the studio with a slew of mismatched computer hardware. How could they not notice! Each piece of hardware was labeled with a different number. Students were tasked to write down what they thought each hardware is named and what year they thought it was invented or built. When they were finished, we went over each device's identity and when it was invented. Many of the device's real identities and age came to a complete surprise to everyone. For example, what students thought was just a keyboard, was actually a whole computer, the TRS-80 (or "trash-80", despite the nickname, it is completely respectable)! Many were surprised about the Raspberry Pi, a whole computer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="interactive quiz" src="images/interactive-quiz.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This exercise was an excellent intro to the advancement of computer hardware. The hardware devices from the quiz were from several different decades. A vacuum tube representing the 1940's, and the Raspberry Pi (first generation from 2012).  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Brief History of Computing&lt;/h4&gt;
&lt;p&gt;To gain a further appreciation for the advancements in computing, learned that a computer does not have to be powered with electricity or by a battery. Even their parent's car is considered a computer. Examples of early computers started with Tally Sticks, at a time when history was not recorded. These were tools (mechanical devices) to aid in counting. Other examples included were the Abacus (~2700 BC to present).  &lt;/p&gt;
&lt;p&gt;So, what is hardware? What is software? What is a computer program?  &lt;/p&gt;
&lt;p&gt;As a class, we went over what each of these mean. Hardware is the physical stuff, like the keyboard, monitor, mouse, circuit boards, chips, wires, etc.  &lt;br&gt;
Software is what's 'inside' the computer, all of the programs, or applications, like a word processor or game.  &lt;/p&gt;
&lt;p&gt;A computer program is step-by-step instructions written to tell the computer exactly what to do.  &lt;/p&gt;
&lt;p&gt;The class was able to see a snippet of computer hardware progression in-person at the front of Tech Em from the interactive quiz.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src="images/slack-logo.jpg" alt="slackin" style="width: 300px;"/&gt;&lt;br&gt;
&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h4&gt;Communication Resources&lt;/h4&gt;
&lt;p&gt;We will be using a messaging app called &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;. Tech Em has been using this for some time. We have created a separate Slack 'team', to have all the students from each of the classes join. This provides the opportunity for students to reach out after the class with questions on any of the concepts we learned, discussing projects, or troubleshooting code while at home. While students are using Slack, they will have the opportunity to access feedback from the rest of the Tech Em Studios team!   &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src="images/github.jpg" alt="githubin" style="width: 300px;"/&gt; &lt;br&gt;
&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h4&gt;Tracking our Projects&lt;/h4&gt;
&lt;p&gt;We briefly went over this in class. We are going to be using &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; as a way to compile and organize everyone's coding projects they have been working on. This site can 'host' their repositories, so it will all be in one place. Once we start typing up code, we will teach them how to upload their projects onto a private repository. Having all of their projects in one place will help with putting together a portfolio from the class if you and your child choose to do so. Students can upload other software projects they work on outside of class (and after this class) onto this site. There are millions of open source projects on GitHub that your child has access to once they create an account!     &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Assignment One&lt;/h3&gt;
&lt;p&gt;For those students that have an email address, please accept the Slack invitation if you have not already done so. For those that do not have an email, parents, you have the option of either creating an email with your child through Gmail or another domain, or we can send an invitation to your email. After accepting the invitation, your child can create their own credentials for the Slack sign-in.  &lt;/p&gt;
&lt;p&gt;During the time in between next class, students can create a &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; account to start getting used to it. As a class we will go through how we will upload our projects.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Certificates&lt;/h4&gt;
&lt;p&gt;We are planning on having every student earn an official Tech Em Studios certificate by the end of the session! We will most likely have an 'assessment' towards  the end to make sure each student has understood the fundamental concepts of what we'll teach throughout this Fall towards the end of the session.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Outline for Code Em&lt;/h3&gt;
&lt;h6&gt;&lt;em&gt;(tentative)&lt;/em&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move Forward as a Team&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let's all get on the same page  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What computers can do&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how they work similar to the communication between our nervous system and peripheral system.    &lt;/li&gt;
&lt;li&gt;"Fetch, Decode, Execute"  &lt;/li&gt;
&lt;li&gt;Simulating a Computer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computers Being Universal Machines  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;power of programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programming Languages  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python  &lt;/li&gt;
&lt;li&gt;Ruby  &lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C++  &lt;ul&gt;
&lt;li&gt;&lt;em&gt;relating these will come later&lt;/em&gt;    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is Coding  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning to code  &lt;/li&gt;
&lt;li&gt;How to solve a problem&lt;/li&gt;
&lt;li&gt;Start coding  &lt;ul&gt;
&lt;li&gt;starting with Python then to other languages  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fundamentals of programming while we learn to code  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Class Project  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collaboratively work on projects  &lt;/li&gt;
&lt;li&gt;Building apps, designing games, devices, etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Day Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/20/2016&lt;/code&gt;    &lt;/p&gt;
&lt;p&gt;We started with a review of what we went over last week: Objective discussions (what our learning interests are and project ideas), using Slack, GitHub, the Interactive Quiz on hardware devices. We continued our conversation on computer hardware history starting with where we left off, what makes a computer, a computer. Our initial definition of a computer (early computers) is a tool used for helping to solve problems, it does not require electricity (or a battery). A great example to start off with, which helps to gain appreciation for how far computer hardware has come is something that was invented before history was written, Tally Sticks (generally made up of wood). This was a device to help early users solve math problems. After counting crops, or anything to be counted, humans quickly realized they would exceed the limit of their initial counting method, their ten fingers. So to help keep track of high counts of things, we created these tally sticks. These tally sticks operate quite identically as do &lt;em&gt;tally&lt;/em&gt; marks.  &lt;/p&gt;
&lt;p&gt;We observed the advancements of early computers through the centuries with the Abacus (~2700BC), Pascal's calculator (1642's -1800s), Arithometer (1820), and the Babbage Machine (1823). Then onto the first computer programmer, Ada Lovelace.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;1st Generation&lt;/h4&gt;
&lt;p&gt;We jumped to learning about the importance of the main components of computer hardware, starting with the vacuum tube. We categorized the advancements engineers had made in computer hardware into 'generations'. This Vacuum tube signaled the 1st Generation. About 17,000 of these 'switching devices' were the main component of the first commercial computers like the ENIAC, in the 1940s. However, these required a great deal of electricity and would burn out easily. Not to mention, the ENIAC's size demanded a very large room.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;2nd Generation&lt;/h4&gt;
&lt;p&gt;The replacement for the vacuum tube was the transistor, considered to be the building blocks of computers. The advent of the transistor rang in the 2nd Generation, electric computers. These devices were a great deal more efficient than its predecessor. When you combine transistors, logic gates are formed, to make integrated circuits. When I say 'switch', I mean there are only to possible input values and output values, ON and OFF (or 0 and 1). This "internal switching logic" is how computer hardware carries out instructions provided in the software. Inside all modern devices are lots of switches. These switching devices are very much like the billions of neurons in our brains.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;3rd Generation&lt;/h4&gt;
&lt;p&gt;These integrated circuits were miniaturized to form microchips. Microchips comprised the main component of hardware, that brought in the 3rd Generation, microcomputers. These allowed for more 0's and 1's, thus allowing more data to be computed and stored (computers store data using 0's and 1's).  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Logic Gates&lt;/h4&gt;
&lt;p&gt;We explored a few different types of logic gates, the AND gate, OR gate, and the NOT gate. Each gate accepts one or more input values and produces a single output value. Remember, these values are either zero or one (can't be both!). We learned how each of these gates operate and how you can represent these logic gates, their logic diagram symbol and associated truth tables. We learned that we can combine these logic gates, to have more inputs and outputs of 0's and 1's.  &lt;/p&gt;
&lt;p&gt;Next week, we'll learn the awesome steps a computer takes to fire up a program: Fetch, Decode, Execute! -and how this is relative to how we humans operate. We'll also take our first look at programming languages, starting with Python.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Assignment Two&lt;/h3&gt;
&lt;p&gt;Draw a logic diagram symbol for each gate we learned about (AND, OR, NOT). Show the logic for each switching device by creating a truth table for each.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt; Try combining a few of these logic gates to make a simple circuit -we started this in class.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt; to check your email for an invitation to Slack! For an explanation of this app, look to the end of Day 1 section of this blog.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/27/2016&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;The third class was kicked off with a review of logic gates and a little more on the language computers "speak", binary (0's and 1's).  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Simulate a Computer Activity&lt;/h4&gt;
&lt;p&gt;To get every student involved, we acted out input and output devices of a typical modern computer (I/O devices). First we simulated the process of a user interacting with the mouse to perform tasks.   &lt;/p&gt;
&lt;p&gt;Then we added more devices to portray the workings that take place when a simple program is run on the computer. In this case, we acted out a calculator program. Along with the mouse and user, we added these devices:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Calculator program (software)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processor  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyboard  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitor (the whiteboard)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bus (a set of wires that is used by the processor to access memory and I/O devices)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="simulate a computer" src="images/simulate-computer.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;CPU&lt;/h4&gt;
&lt;p&gt;Or Central Processing Unit. To understand some basics of computer hardware, we examined a functional view of a computer. We related this view to how we humans operate on a basic level. -We will learn more on how processes of the computer and the processes of human actions correlate throughout the session.  &lt;/p&gt;
&lt;p&gt;Before learning about the Central Processing Unit (CPU), we first watched and discussed a video on how a computer works, specifically memory.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;  &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/p3q5zWCw8J4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/center&gt;  &lt;/p&gt;
&lt;p&gt;The great way to think of the CPU, is to think of it as the "brain" of the computer. This is where all the basic operations of a computer are executed.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic Operations: 1 + 1 = 2  &lt;/li&gt;
&lt;li&gt;Logic Operations: 2 = 40 FALSE  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4&gt;Main Memory &amp;amp; Permanent Memory&lt;/h4&gt;
&lt;p&gt;We took a look at how the computer stores memory by discussing RAM, or Random Access Memory. A computer's memory stores programs and data. The CPU can only directly access information (or data) that is stored on main memory (also called RAM). The main memory is fast, but when the power to a computer is turned off, the information contained in the memory is lost! So, there must be another type of memory storage, permanent memory. This permanent memory is something magnetic, like a hardrive (or CD-ROM, DVD, USB sticks, etc.).  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Fetch, Decode, Execute&lt;/h4&gt;
&lt;p&gt;What happens when you fire up your favorite program? When you insert a CD containing information (like your favorite game) or when you open up a program that was downloaded on your computer's hardrive (like a game or word processor), first, the program's instructions are copied from the permanent (secondary) memory into the main memory of the computer. Then, after the instructions are loaded, the CPU starts to perform those instructions that were just copied, and ta-da, you are now playing a game like Tetris.  &lt;/p&gt;
&lt;p&gt;This process is known as Fetch, Decode, Execute (also called Fetch-Execute Cycle). So, when you start your program, the CPU follows this process:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fetch&lt;/strong&gt;: the first instruction is called from memory.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decode&lt;/strong&gt;: That instruction is interpreted to figure out what it means.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Execute&lt;/strong&gt;: The computer carries out the instruction.  &lt;/p&gt;
&lt;p&gt;There cannot be only one instruction, of course, so this process repeats. In fact, this fetch, decode, execute cycle is what the computer does from the moment you turn it on until the moment you turn it off. The computer can perform millions of these instructions with lightning speed!   &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Intro to Python -Interactive Mode/Interpreter&lt;/h4&gt;
&lt;p&gt;After acting out how a computer works, learning the functions of some hardware basics, and learning the fetch, decode, execute cycle a computer performs when you turn it on and fire up a program, we are ready to explore writing our own programs!  &lt;/p&gt;
&lt;p&gt;What is the process of creating software? Programming. Also called coding. When we create software, we are creating instructions for the computer to carry out. Programming allows you to create something from nothing. The more you program, the more you will realize (and build) your skills in &lt;strong&gt;reasoning&lt;/strong&gt;, &lt;strong&gt;creativity&lt;/strong&gt;, and ability to &lt;strong&gt;solve problems&lt;/strong&gt; -not just while programming, but beyond it.  &lt;/p&gt;
&lt;p&gt;We learned how to fire up Python by starting up Python's GUI shell, IDLE. Also called the interpreter or interactive mode. This is a useful tool to quickly test out small ideas. It is recommended you keep this window open while you write your program in script mode (where we can save our python file). When you write your programs in python script, you can jump over to the interactive mode to try out an idea or make sure a function (or anything) you are making works.  &lt;br&gt;
During class we tested out the built-in calculator on the interpreter. For the fourth class, this week we will learn some programming jargon, or syntax -learning a spoken language is similar to learning a programming language. As we go along, we will learn computer science concepts and implement those concepts while we program. We will become excellent problem solvers and critical thinkers throughout this process. Once we have a good foundation in Python, we will compare it to other programming languages like Ruby, Java and a few others. As you might learn a spoken language (e.g. Spanish or English), when you look to learning more languages you can draw similarities between them and make easier to learn these new ones.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Four&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/04/2016&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We reviewed hardware basics:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Central Processing Unit  &lt;/li&gt;
&lt;li&gt;Where all the basic operations of the computer are executed  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RAM  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Random Access Memory -also called main memory  &lt;/li&gt;
&lt;li&gt;Random access means that each byte of memory can be accessed directly, this way the computer does not have to start at the beginning -making for a faster retrieval of data, or information  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetch, Decode, Execute  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is what happens when you fire up your favorite program and what happens inside the computer from the moment you turn it on to when it is turned off  &lt;/li&gt;
&lt;li&gt;Fetch: the first instruction is called from memory  &lt;/li&gt;
&lt;li&gt;Decode: That instruction is interpreted to figure out what it means  &lt;/li&gt;
&lt;li&gt;Execute: The computer carries out the instruction  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We left off last class with writing statements (a line of code or a complete thought) in Python's interpreter (interactive mode). This is a window where you can test out small ideas quickly. When we program in script mode (where we write and save our programs), I suggest keeping the interpreter open so you can quickly test out a function (reusable code) or anything else you want to quickly try out.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Turtle Module&lt;/h4&gt;
&lt;h5&gt;Python&lt;/h5&gt;
&lt;p&gt;For these next several classes, we are using Python version 3.   &lt;/p&gt;
&lt;p&gt;We completed an exercise in Python using the module, 'turtle'. This is a fun way to dive into Python while working with animation techniques. We learned several different coding fundamentals. A module is like library we can pull information from and bring into our program we write. To bring in the turtle module, we first wrote &lt;code&gt;import turtle&lt;/code&gt; for the first line in our code. By importing a module, we can manipulate a slew of functions previously written. We then created a variable (a placeholder for information) along with the function, Pen, by writing &lt;code&gt;t = turtle.Pen()&lt;/code&gt;. A function is essentially "reusable code." When we run these lines of code, a new window pops up with a pixelated arrow head (our turtle). This turtle leaves behind a pixelated trail behind itself when we give the instructions to move it, thus making a complete arrow. Because of this, it is helpful to think of the turtle as a snail instead -real-life snails leave trails (mucous trails!).  &lt;/p&gt;
&lt;p&gt;Since we created the variable 't', we can tell our turtle to move by calling that variable. We did this by writing &lt;code&gt;t.forward(100)&lt;/code&gt; (does not have to be 100). We can also create other variables with any name -any, except for 't' since we already named a variable as such. A variable is simply a placeholder for information. Once we create a variable, we can call on it to perform tasks later in our program.    &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Other commands we used:&lt;br&gt;
&lt;code&gt;t.backward(100)&lt;/code&gt;  &lt;br&gt;
&lt;code&gt;t.left(90)&lt;/code&gt; (or any degree amount)&lt;br&gt;
&lt;code&gt;t.right(90)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.up()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.down()&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Script Mode&lt;/h4&gt;
&lt;p&gt;We first used the turtle module in Python's interpreter. In order to write and save our program, we created a new file and saved that file. We are now in &lt;em&gt;script mode&lt;/em&gt;. This is where we will actually write our programs.  &lt;/p&gt;
&lt;p&gt;Just like in the interpreter (interactive mode) we had to first type &lt;code&gt;import turtle&lt;/code&gt; for our first line of code. Again, by importing the module, this allows us to use those functions already written. If you did not type this, you would find that the commands you write would sling back errors and your code will not run. To run your program after you've written lines of code in script mode, select Run at the top of the window, then Run Module. You must save your program before you can run it (it will ask you to save if you have not already). Same as in the interpreter, you have to create your variable, "t" (or any other letter or name), by typing: &lt;code&gt;t = turtle.Pen()&lt;/code&gt; this attributes the class, &lt;em&gt;Pen&lt;/em&gt; to our variable "t".  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Download Python&lt;/h4&gt;
&lt;p&gt;To download Python on your computer at home visit &lt;a href="https://www.python.org/downloads/"&gt;python.org&lt;/a&gt;. Be sure to download the version, 3.5.2 for your particular operating system (Windows, Linux/UNIX, Mac OS X, etc.)  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Assignment Three&lt;/h3&gt;
&lt;p&gt;For practice at home, create a turtle program in script mode using by calling the turtle module. First, open up Python's IDLE (or interactive mode, or interpreter). Then create a new file and save it as "nameoffile.py". Adding the ".py" tells your computer that this is a Python program and allows you to call on it for another program you write later on. Create 'comments' in your program by typing the pound key (#) at the beginning of the line to explain what you are trying to do. For example: &lt;code&gt;# Here, I am creating an octagon using the turtle module&lt;/code&gt;. First challenge, have your "turtle" create a box without corners. Second challenge, create an octagon.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt; Shorten your instructions to make these designs by creating a function (reusable code), specifically, a loop function. We briefly went over this in class.  &lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;for i in range(4):&lt;/code&gt; repeats any instructions indented underneath four times. By using this, you can drastically shorten your code.  &lt;/p&gt;
&lt;h4&gt;Think Like a Computer&lt;/h4&gt;
&lt;p&gt;Think of exercise we did with the turtle module like breaking down instructions for drawing with a pen on a piece of paper. While drawing or writing, we do not think have to think about the sequence of steps our brain carries out to have or hand move the pen. Our "turtle" in our turtle module we experimented with in Python, does not perform any action until you code the sequence of instructions. Think from the start, Python will not automatically import the turtle module for us, we have to physically provide the instructions for it to do so. Understanding this concept in computer science in general, is fundamental in understanding programming.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Five&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/11/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Jump Back into Python&lt;/h4&gt;
&lt;p&gt;It was a long weekend, some of us were program-rusty, so we reviewed some basics of Python programming. Script mode is where we write our programs. Interactive mode (interpreter) is where we the programs we write. We can keep an interactive mode window open to quickly test out small ideas. When we type &lt;code&gt;t = turtle.Pen()&lt;/code&gt; we are creating a variable. A variable is a placeholder for information -we can assign values to a variable. By looking at our 'turtle' example, our Python program now recognizes &lt;code&gt;t&lt;/code&gt; as &lt;code&gt;turtle.Pen()&lt;/code&gt;.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Functions&lt;/h4&gt;
&lt;p&gt;Functions are essentially a place for us to house reusable code. By creating and using functions, we can significantly ease use of code and data. We are using abstraction to leave only the information we need to complete our goal. We talk more on abstraction later, it is fundamental in programming and is all around us. We first introduced ourselves with function by using a loop function to ease our coding.  &lt;/p&gt;
&lt;p&gt;For example, when making a square we may have initially wrote:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we can decrease the amount of lines of code by using a loop function. Here is an example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "+" signs are there to indicate indentation in Python.  &lt;/p&gt;
&lt;p&gt;There are two types of loop functions in Python. &lt;code&gt;for&lt;/code&gt; loops, and &lt;code&gt;while&lt;/code&gt; loops. The first, specifies a particular range for something to repeat. The second, repeats something forever, until you quit the program or provide conditions for it to stop.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Assignment Four&lt;/h3&gt;
&lt;p&gt;Practice more with the Turtle module.&lt;br&gt;
For those that have mastered the syntax involved with our simple turtle programs, go ahead and conduct some research on abstraction -this is the art of removing variances and details so you can see how one solution might work for many different problems.&lt;br&gt;
 It can also be thought of as having characteristics of some thing hidden to easily see the necessary details.&lt;br&gt;
 Don't worry if those definitions seem "abstract", we will become masters at using abstraction in our programs.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/18/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Apps We Used&lt;/h4&gt;
&lt;p&gt;In order to streamline coding and saving our code, we jumped from coding in Python on the laptops to coding in Python on the iPads, using &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;.  &lt;/p&gt;
&lt;h4&gt;Lists in Python&lt;/h4&gt;
&lt;p&gt;The concept of lists in Python is very important. A Python lists is essentially a sequence of things (or items) that are ordered. This is seen quite a bit in mathematics. In Python you give a list a name, almost like creating a variable. For example, in mathematics a sequence of &lt;em&gt;n&lt;/em&gt; numbers could be called "A":  &lt;/p&gt;
&lt;p&gt;A = a0, a1, a2, a3, a4,...,an-1  &lt;/p&gt;
&lt;p&gt;Just as in a math class, in Python you can call on certain values in a list. Below is an example of a grocery list adapted from a Jason R. Briggs on Python. I used quite a bit of 'comments' (any line starting with the pound sign (#)), so you can further understand comments and get used to understanding the importance of using them in your programs.  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/a2546d2c1b0d13620321edddb387f8df.js"&gt;&lt;/script&gt;

&lt;h4&gt;Creating a Grocery List Program in Python&lt;/h4&gt;
&lt;p&gt;We created a simple program to have Python ask us for items to put into a grocery list. We would then have the program ask us for prices for each item. We had Python add up the totals of our list once we told the program what items we wanted in the list. When we created this program, we practiced syntax we were familiar with and learned new syntax. Some new syntax included, FLOAT and "input()" or "raw_input()" and using concatenation, &lt;seq&gt; + &lt;seq&gt;.  &lt;/p&gt;
&lt;p&gt;Below is another Gist from GitHub where I had made an example of a rudimentary grocery list program in Python. Remember, later versions of Python use input() instead of, raw_input(). So, if one of those functions doesn't work for you at home, try using the other.  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/1a5d0e75b0ef4e0901b32f76e40f3333.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h3&gt;Assignment Five&lt;/h3&gt;
&lt;p&gt;Try adding to your grocery list at home on Python or Pythonista.
Also, see if you can create a list for something other than a grocery list. &lt;br&gt;
You can add more code, by having Python ask for more items or what you would want to do those items&lt;br&gt;
i.e. removing items, adding items, deleting items, replacing items.&lt;br&gt;
When you do this, you will notice your lines of code increases pretty fast!&lt;br&gt;
Next week, we will learn how use conditions (if statements) and in general, how creating our own functions (reusable code) greatly helps in making us 'code-efficient'  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Seven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/25/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Blocks of Code and Condition Statements&lt;/h4&gt;
&lt;p&gt;A block of code is a grouped set of programming statements. We first saw this when we used the 'for' loop in our turtle program:  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/44b3262a7c6058fb8f59003a0fdadc08.js"&gt;&lt;/script&gt;

&lt;p&gt;"&lt;strong&gt;If&lt;/strong&gt; you eat your vegetables, &lt;strong&gt;then&lt;/strong&gt; you can have dessert" -a condition statement.  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/1dd86d8ec14bf6992984214c518142d0.js"&gt;&lt;/script&gt;

&lt;h3&gt;Day Eight&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/01/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Tuples and Maps&lt;/h4&gt;
&lt;p&gt;We reviewed list: how to make them, what we can do with them and what they are for. Lists can easily be manipulated by using a few functions.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We start by naming a list -like we are creating a variable.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;season_list = ['Fall', 'Winter', 'Spring']&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lists are 0-based  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;print(season_list[0])  &lt;/li&gt;
&lt;li&gt;will return...&lt;ul&gt;
&lt;li&gt;Fall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So that means Winter is 1, and Spring is 2.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The append function can add items to a list.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;season_list.append('Summer')  &lt;/li&gt;
&lt;li&gt;print(season_list)&lt;/li&gt;
&lt;li&gt;will return...  &lt;ul&gt;
&lt;li&gt;['Fall', 'Winter', 'Spring', 'Summer']  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I type &lt;code&gt;del season_list[2]&lt;/code&gt; this will delete Spring, our item in index position two. The &lt;code&gt;del&lt;/code&gt; is short for delete.  &lt;/p&gt;
&lt;p&gt;We can also replace items in a list and join two different lists. Bottom line, lists can be manipulated!  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/6bdc35fccbec9e7779493b49156a3952.js"&gt;&lt;/script&gt;

&lt;p&gt;You probably have noticed, working with maps is similar to working with lists and tuples; however, you cannot join maps with the plus operator (+), if you try, you'll get an error message. This feature differs from lists; in that, you can join two different lists using '+'.   &lt;/p&gt;
&lt;p&gt;To recap, Python uses strings to store text. Lists and tuples are used to handle multiple items. Items in lists can be changed, and you can join one list to another list, but values in a tuple cannot be changed. We can use maps to store values with keys that identify them. If you were asked what things the company, BIC manufactures, you could search or scan the list to find out. What if the list contained hundreds or even thousands of different items? That could take up a lot of time! By putting items in map (that has the company name as the key and what they make as the value); instead of a list, we can use the key ('BIC') to find that value.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;print(things_brands_make['BIC'])&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;returns...  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;writing tools&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;Assignment Six&lt;/h3&gt;
&lt;p&gt;Create a map in Python that categorizes something you collect. For instance, if you have a collection of music, like CDs (this example could be too old!), you categorize starting with the key as the artist name. Then, the value could be the albums or genre of music. Or vice versa. Essentially creating a dictionary.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Nine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/08/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h5&gt;Presidential Election Day!&lt;/h5&gt;
&lt;h4&gt;"Real Tools for Applied Tech Training"&lt;/h4&gt;
&lt;p&gt;We will use what we have learned so far to create our very own Slack 'BOT'! Think of it as your own version of Apple's "Siri" or Amazon's "Alexa". This will be a project we will work on together as a team.    &lt;/p&gt;
&lt;h4&gt;Incorporating Python&lt;/h4&gt;
&lt;p&gt;We started by individually creating our own command-response program. Here, we created commands that we'll give to our bot. These commands are created as separate variables that equal to a string. &lt;em&gt;The string is what we will type into Slack, after we address our bot's name."&lt;/em&gt; In order for our bot to understand the commands, we defined a function to do just that. We can then use that function to have the bot handle each command we code for it to understand. To have the bot continuously await our input when we run the program, we used a 'while' loop.  &lt;/p&gt;
&lt;p&gt;Take a look at the gist:  &lt;/p&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/2c301718440a841e9cf3614f8a2683c4.js"&gt;&lt;/script&gt;

&lt;p&gt;Running this program, is basically running the bot solely within the environment of Pythonista. Next week, we will learn why we are using GitHub, how we can use GitHub (and a few other features) to create a bot we can interact with from anywhere, and not just during class!  &lt;/p&gt;
&lt;h3&gt;Assignment Seven&lt;/h3&gt;
&lt;p&gt;Sign Up for GitHub! If you don't already have an account with GitHub, create one &lt;a href="https://github.com/join?source=header-home"&gt;here&lt;/a&gt;. Once you have created your GitHub account. Message your GitHub username any of the instructors on Slack!  &lt;/p&gt;
&lt;p&gt;If you are not on Slack, check out Chris's blog about Slack &lt;a href="http://blog.techemstudios.com/slack.html"&gt;here&lt;/a&gt;. At the end of the Slack blog, there is a link to more instructions with GitHub sign up.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Ten&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/15/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Creating Commands &amp;amp; Responses for Sirexa&lt;/h4&gt;
&lt;h5&gt;Slackbot&lt;/h5&gt;
&lt;p&gt;Last week, within the local environment of each of our Python programs we wrote a 'looping' command-response program to mimic a bot. This helped prepare us for writing commands in Python for a Slackbot (named "Sirexa") running on a Raspberry Pi at the studio. We did this by contributing our code to a repository found on GitHub, called &lt;a href="https://github.com/wray/code_em"&gt;code_em&lt;/a&gt;. Think of a repository as a folder on the web containing directories(files). This directory has sub directories where each student can write Python commands inside of their own folder. For more on GitHub look to the Homeschool Computer Science Programming blog &lt;a href="http://blog.techemstudios.com/homeschool-computer-science-and-programming-fall-2016.html"&gt;here&lt;/a&gt;, just scroll down to "Day Eight".  &lt;/p&gt;
&lt;p&gt;To make our changes to these files we used an app called &lt;a href="http://git2go.com/"&gt;Git2Go&lt;/a&gt;. Once a student created a command and response for that command (using condition statements, if and then) for the Slackbot to carry out, the process was kick-offed. Then (if the syntax checked out) after a few minutes, students could test out there commands by stating them to Sirexa in the Slack messaging app. For example, while in Slack, a student could type: &lt;code&gt;@Sirexa: what is your favorite snack?&lt;/code&gt; The Slackbot would then reply with the response the student programmed it to respond with; in this case, &lt;code&gt;Sirexa: electrons!&lt;/code&gt; The Raspberry Pi that "hosts" the Slackbot is connected to a breadboard, which has a temperature-humidity sensor (DHT22 sensor) and a few leds. With the right Python code, the bot can receive specific commands to return the temperature and humidity where the pi is located or turn on a specific led.  &lt;/p&gt;
&lt;p&gt;For example, a student could type &lt;code&gt;@Sirexa: blue led on&lt;/code&gt; and sirexa would respond with &lt;code&gt;ok&lt;/code&gt; and the blue led would turn on!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="blue led" src="images/led-on.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Check out Wray's &lt;a href="http://techemstudios.com/decks/slackpi-to-alexa/#/"&gt;deck&lt;/a&gt; offering more info. on the project and some of the process.  &lt;/p&gt;
&lt;h3&gt;Assignment Eight&lt;/h3&gt;
&lt;p&gt;If you have your GitHub account, try creating commands and responses in your own directory at home. You can do this by cloning the repository to your computer and making the changes using Python or your favorite test editor and committing, then pushing those changes to the repository. Or, if you have not yet received/accepted an invitation to collaborate, you can "fork" the code_em project and do a pull request. Look to the &lt;a href="http://blog.techemstudios.com/slack.html"&gt;blog on Slack&lt;/a&gt; and/or ask a question in the Slack team.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eleven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/29/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Making a Decision Tree&lt;/h4&gt;
&lt;p&gt;We will learn some new concepts and harness some others of computer science and programming we have learned so far to create our own text adventure game! We first went over what a decision tree is and how to make one (catered to this project). We first took a look at an example decision tree.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="whiteboard" src="images/text-advent.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Students got started on making a diagram on paper to show the flow of their game; complete with a starting scenario and use of condition statements to make up decision branches stemming from the scenario (the trunk of the tree).  &lt;/p&gt;
&lt;p&gt;The following is an excerpt taken from a &lt;a href="http://blog.techemstudios.com/hardcore-programming-camp-summer-2016.html"&gt;blog post&lt;/a&gt; earlier this summer:  &lt;/p&gt;
&lt;h3&gt;Choose Your Own Adventure&lt;/h3&gt;
&lt;h4&gt;Essentially Making a Decision Tree&lt;/h4&gt;
&lt;p&gt;A "Decision Tree" is one of many ways to display an algorithm, a step-by-step process for reaching a result or solution to a problem. The first decision "branches" into two possibilities, each of which is another decision. By looking at the whole, it forms a tree, a decision tree! The procedural flow of traveling down the tree from the very first decision is nicely implemented with the Choose Your Adventure challenge camper completed using Python/Pythonista. You can compare this to a series of game books, Choose Your Own Adventure by &lt;a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure"&gt;Edward Packard&lt;/a&gt; and the text adventure, &lt;a href="https://en.wikipedia.org/wiki/Zork"&gt;Zork&lt;/a&gt; or tons of other written books where the reader commandeers the actions of the protagonist; leading to distinct endings.  &lt;/p&gt;
&lt;p&gt;Students started their program by sketching on paper their ideas for their game's procedure flow to ultimately implement in their program. This challenge applies advanced branching logic and allows students to design their algorithm by literally drawing their program flow. The nodes in the tree are decision points -rooted in the very first decision. A first decision point could be, you land on Mars and you spot something in the distance. From here, you may have a few choices (or nodes) to choose from: Leave Mars, Go to Object, or Scan the Object. You can choose Go to Object, and you arrive at another decision point or node in the tree and the flow continues. Take a look at this example displayed on paper and translated into an interactive Python program. Try contrasting the decision tree on paper to the written program on python.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="land on mars" src="images/hc-wray-example-mars.jpg"&gt;  &lt;/p&gt;
&lt;script src="https://gist.github.com/wray/48cef3a6766ece0d8370.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;This exercise replicates modeling decisions and their outcomes. These outcomes can also include chance event outcomes. Campers mapped out all the paths based on the decision made at each node.  &lt;/p&gt;
&lt;p&gt;Decision trees are used in the real world all the time. Call Center Reps use these as print-outs or portrayed in apps. For example, tech hotlines, their script will start with "is the computer plugged in" and if the person answers yes, they take one route or if "no" they take another route. They follow the decision tree to help them assist the customer in troubleshooting problems.  &lt;/p&gt;
&lt;p&gt;Another system that models a decision tree, identifying bugs. Really?? Yes. A dichotomous key, a tool used to identify something in the natural world is a great example to model decisions. Take a look at how a dichotomous key can be used by an Entomologist (someone who studies bugs; let's call him Steve) to identify something they collected from a stream.   &lt;/p&gt;
&lt;p&gt;To use this key, Steve starts at the first decision point: is it something that has a shell or does not have a shell? This question knocks either With Shell or No Shell out of contention to be the thing's identity. If the condition is false, it is not a snail or clam, so Steve would then arrive at the next node: Does it Have a Backbone or No Backbone. If that condition is true, then he would arrive at another subnode, and his search continues for the bug's identity by following the outcome of each node until he arrives at its most likely identity and, ta-da, Steve knows the identity of the bug. If Steve was so inclined, he could look to another key to determine what Phylum, Class, Order, Family, Genus and finally species that bug belongs to. But, we'll save that story for later! Snapshot of a dichotomous key:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="descision tree" src="images/decision-tree.jpg"&gt;&lt;br&gt;
&lt;sup id="fnref2:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Assignment Nine&lt;/h3&gt;
&lt;p&gt;Until next week, add more to your choose your own adventure python program. If you find that you are typing in some of the same code more than once, try defining a function and calling that function. If you were not able to upload your program to your GitHub account during class, you can get to your code &lt;a href="https://github.com/jo3t3ch3m/TechEmStudents"&gt;here&lt;/a&gt;. You can copy and paste your code to your computer, save as a python file (file_name.py).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BONUS&lt;/strong&gt; Add your choose your own adventure program to a repository on your GitHub and make changes to it from there (make changes locally for an extra bonus!). For help, look to the &lt;a href="http://blog.techemstudios.com/upload-projects-to-github.html"&gt;post on uploading projects to GitHub&lt;/a&gt;. Here, there are steps to creating your own GitHub repository, adding files to it, and setting up a working directory to work on that repository (locally).  &lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h3&gt;Day Twelve&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;12/06/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Last Day&lt;/h4&gt;
&lt;h5&gt;Hour of Code&lt;/h5&gt;
&lt;p&gt;This week is the third annual Hour of Code week! To participate, students built an iPhone game by writing in the &lt;a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;Swift&lt;/a&gt; programming language. The looks and functionality of Swift are similar to the programming language, &lt;a href="https://www.tutorialspoint.com/cprogramming/c_overview.htm"&gt;C&lt;/a&gt;. Swift is also quite intuitive and its structure is easy to read, like Python. This session, since we have learned some fundamentals of Python, this hour of code activity served as a nice introduction to the Swift programming language. Students completed this activity was done directly on a Chromebook web browser on &lt;a href="https://www.makeschool.com/build-an-iphone-game-in-your-browser"&gt;MakeSchool.com&lt;/a&gt;, so you can open it up at home.  &lt;/p&gt;
&lt;h4&gt;Functions&lt;/h4&gt;
&lt;p&gt;We introduced functions into our text adventure programs in Python. While you were building decision branches in the game, you may have noticed yourself writing some lines of code multiple times. A way to reuse code that will be used over and over again, is to define a function for a block of code. After you define that function, you can 'call' it later in the program. When you call the function, you are telling the program to go and run all the attributes you found in that function's code.&lt;br&gt;
&lt;script src="https://gist.github.com/jo3t3ch3m/910736dd412c71135e9f14291753d4b3.js"&gt;&lt;/script&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="modeling decision branches" src="images/decision-modeling.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="http://blog.techemstudios.com/upload-projects-to-github.html"&gt;blog&lt;/a&gt; on how to upload your projects onto your own GitHub repository. You can find some projects you have worked on during this session &lt;a href="https://github.com/jo3t3ch3m/TechEmStudents"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Thanks for a great session, see you in the Winter!&lt;/p&gt;
&lt;p&gt;Also, don't forget... We are moving! New address: &lt;br&gt;
1123 Gaskins Rd&lt;br&gt;
Suite B600  &lt;/p&gt;
&lt;p&gt;Happy Holidays!!!  &lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;http://blogdalu.magazineluiza.com.br&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;http://midmichigannatureandscience.blogspot.com/2013/04/aquatic-ecology-and-mother-earth-week.html&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;P.E. Cerruzzi, A History of Modern Computing (Cambridge, MA: The MIT Press, 1998):217.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;http://blog.techemstudios.com/programming-spring-2016.html&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="computer science"></category><category term="python"></category><category term="code"></category><category term="github"></category><category term="slack"></category></entry><entry><title>Homeschool Computer Science and Programming Fall 2016</title><link href="/homeschool-computer-science-and-programming-fall-2016.html" rel="alternate"></link><published>2016-12-06T00:00:00-05:00</published><updated>2016-12-06T00:00:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-12-06:/homeschool-computer-science-and-programming-fall-2016.html</id><summary type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/13/2016&lt;/code&gt;  &lt;br&gt;
The Homeschool Computer Science and Programming started with icebreaker introductions. Tell the class three truths and a false statement about yourself, including the instructors! Everyone was asked to share their experience with programming and computer science.  &lt;/p&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;The class is filled with new faces as …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/13/2016&lt;/code&gt;  &lt;br&gt;
The Homeschool Computer Science and Programming started with icebreaker introductions. Tell the class three truths and a false statement about yourself, including the instructors! Everyone was asked to share their experience with programming and computer science.  &lt;/p&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;The class is filled with new faces as well as familiar ones. Every student has varying experience and interests. To gauge the different levels, we started a discussion on what everyone's interests, or goals for the class were. Interests ranged from 3D printing and Minecraft commands, to animation and advanced programming. Since this class will take a project-based approach, students will learn to merge all of these goals into one project, or projects -from all of the class-shared objectives and set Homeschool curriculum objectives. Students will learn how to create an "objective tree" by using several methods. Think of each objective, or goal as a separate piece that relates to the rest, to fit together making a large puzzle. By using an objective tree, as a class we can break each goal down into smaller definable characteristics. We will start to interconnect each objective (goal) from these.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Interactive Quiz!&lt;/h4&gt;
&lt;p&gt;&lt;img alt="interactive quiz" src="images/interactive-quiz.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Name that hardware! When the homeschool students walked into Tech Em, they noticed two tables at the front of the studio with a slew of mismatched computer hardware. How could they not notice! Each piece of hardware was labeled with a different number. Students were tasked to write down what they thought each hardware is named and what year they think it was invented our built. When they were finished, we went over what each piece was and when it was invented. Many of the devices' real identities and age came to a complete surprise to everyone. For example, what students thought was just a keyboard, was actually a whole computer, the TRS-80 (or "trash-80", despite the nickname, it is completely respectable)!    &lt;/p&gt;
&lt;p&gt;This exercise was an excellent intro to the advancement of computer hardware. The hardware devices from the quiz were from several different decades. A vacuum tube representing the 1940's, and a Raspberry Pi (first generation from 2012).  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Brief History of Computing&lt;/h4&gt;
&lt;p&gt;To gain a further appreciation for the advancements in computing, learned that a computer does not have to be powered with electricity or by a battery. Even their parent's car is considered a computer. Examples of early computers started with Tally Sticks, at a time when history was not recorded. These were tools (mechanical devices) to aid in counting. Other examples included were the Abacus (~2700 BC to present), Pascal's Calculator (1642-1800's), and the Arithmometer, by Charles-Xavier Thomas in 1820&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Then came the introduction of the "Father of Computers", Charles Babbage, who designed the first automatic computing engines and Ada Lovelace, the FIRST computer programmer! She developed programs to be carried out by Babbage's machines. This was a great segue from calculation to computation&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.  &lt;/p&gt;
&lt;p&gt;So, what is hardware? What is software? What is a computer program?  &lt;/p&gt;
&lt;p&gt;Engineers are always searching for building faster devices, and developing tools that increase the efficiency of these devices. Students learned that the advancements in computing hardware were categorized into generations. The use of the vacuum tube (about 17,000 of them!) with commercial computers, like the ENIAC.  &lt;/p&gt;
&lt;p&gt;The transistor replaced the vacuum tube as the main component of hardware. The advent of the transistor helped to ring in the second generation of electric-commercial computers, like the IBM 1401. These computers &lt;em&gt;only&lt;/em&gt; consisted of about 10,000 transistors, a big improvement from having 17,000 unreliable vacuum tubes. Because transistors were smaller, more durable and more reliable, they were more efficient than its predecessor, the vacuum tube. Think of the transistor as a switch, it can have two distinguishable states, &lt;strong&gt;on&lt;/strong&gt; or &lt;strong&gt;off&lt;/strong&gt;, it can store two different numbers, &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;zero&lt;/strong&gt;. These little transistors are the building blocks of computers, combine more than one of these together (with a few more hardware components) and you get a circuit allowing flow, and control of that flow of electricity, which were placed by hand on printed circuit boards. Controlling electricity flow helps the computer perform actions we specify it to perform, efficiently.  &lt;/p&gt;
&lt;p&gt;The more transistors, the more zeroes, and ones (data) a machine can process. Computers store data using zeroes and ones. Engineers started miniaturizing integrated circuits to end up with microchips, reigning in the third generation with one of the first microcomputers. Each year, we were able to have increasingly more circuits placed on a single integrated circuit (Moore's Law) &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. Presently, we can  store about 730 million transistors on a 1X1 inch micro chip. &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;br&gt;
By looking into the history of computer progression, we were able to see it in-person at the front of the Tech Em room with the interactive quiz we completed earlier in class.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Example Projects at Tech Em&lt;/h4&gt;
&lt;p&gt;To inspire students for project ideas they might complete during this homeschool session, they were presented with many examples of projects performed at Tech Em. These included, Raspberry Pi projects (Morse code w/ LEDs, temp/humidity sensing), publishing designed games with the Hyperpad app, microcontroller and coding with Arduino, 3D designing and printing (even with Minecraft!), building apps, advanced programming -data structures, and making creating a graphical user interface (GUI) with Python.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="ledpendants" src="images/space-invaders.jpg"&gt;
&lt;img alt="pi" src="images/pi-temp.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="github" src="images/github.jpg"&gt;&lt;br&gt;
&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h4&gt;Tracking our Projects&lt;/h4&gt;
&lt;p&gt;We briefly went over this in class. We are going to be using &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; as a way to compile and organize everyone's coding projects they have been working on. This site can 'host' their repositories, so it will all be in one place. Once we start typing up code, we will teach them how to upload their projects onto a private repository. Having all of their projects in one place will help with putting together a portfolio from the class if you and your child choose to do so. Students can upload other software projects they work on outside of class (and after this class) onto this site. There are millions of open source projects on GitHub that your child has access to once they create an account!     &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="slack" src="images/slack-logo.jpg"&gt;&lt;br&gt;
&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h4&gt;Communication Resources&lt;/h4&gt;
&lt;p&gt;We will be using a messaging app called &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;. Tech Em has been using this for some time. We have created a separate Slack 'team', to have all the students from each of the classes join. This provides the opportunity for students to reach out after the class with questions on any of the concepts we learned, discussing projects, or troubleshooting code while at home. While students are using Slack, they will have the opportunity to access feedback from the rest of the Tech Em Studios team!   &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Assignment One&lt;/h4&gt;
&lt;p&gt;For those students that have an email address, please accept the Slack invitation if you have not already done so.&lt;br&gt;
For those that do not have an email, parents, you have the option of either creating an email with your child with Gmail or another domain, or we can send an invitation to your email.&lt;br&gt;
After accepting the invitation, your child can create their own credentials for the Slack sign-in.  &lt;/p&gt;
&lt;p&gt;During the time until next class, students can create a &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; account to start getting used to it. As a class we will go through how we will upload our projects.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Certificates&lt;/h4&gt;
&lt;p&gt;We are planning on having every student earn an official Tech Em Studios certificate for the course! We will most likely have an 'assessment' towards  the end to make sure each student has understood the fundamental concepts of what we teach throughout this Fall towards the end of the session.  &lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h3&gt;Day Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/20/2016&lt;/code&gt;    &lt;/p&gt;
&lt;p&gt;We started with a review of what we went over last week: Objective discussions (what our learning interests are for the class and project ideas), using Slack, GitHub, the Interactive Quiz on hardware devices.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Turtle Module&lt;/h4&gt;
&lt;h5&gt;Python&lt;/h5&gt;
&lt;p&gt;Some in the class are familiar with the programming language Python, while others are not. We used Python version 3. For veterans and 'newcoders' alike, we reviewed and learned how the interpreter works. This is a place where we can quickly test out ideas to see how they work. We also reviewed and learned how to create a new Python file and save; in order to run our program (or code).  &lt;/p&gt;
&lt;p&gt;We completed an exercise in Python using the module, 'turtle'. This is a fun way to dive into Python while working with animation techniques. We learned several different coding fundamentals. A module is like library we can pull information from and bring into our program we write. To bring in the turtle module, we first wrote &lt;code&gt;import turtle&lt;/code&gt; for the first line in our code. By importing a module, we can manipulate a slew of functions previously written. We then created a variable (a placeholder for information) along with the function, Pen, by writing &lt;code&gt;t = turtle.Pen()&lt;/code&gt;. A function is essentially "reusable code." When we run these lines of code, a new window pops up with a pixelated arrow head (our turtle). This turtle leaves behind a pixelated trail behind itself when we give the instructions to move it, thus making a complete arrow. Because of this, it is helpful to think of the turtle as a snail instead -real-life snails leave trails (mucous trails!).  &lt;/p&gt;
&lt;p&gt;Since we created the variable 't', we can tell our turtle to move by calling that variable. We did this by writing &lt;code&gt;t.forward(100)&lt;/code&gt; (does not have to be 100). We can also create other variables with any name -any, except for 't' since we already named a variable as such.   &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Other commands we used:&lt;br&gt;
&lt;code&gt;t.backward(100)&lt;/code&gt;  &lt;br&gt;
&lt;code&gt;t.left(90)&lt;/code&gt; (or any degree amount)&lt;br&gt;
&lt;code&gt;t.right(90)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.up()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.down()&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Puzzles/Challenges&lt;/h4&gt;
&lt;p&gt;After learning the ropes of this module, we challenged ourselves with completed various challenges. These included, making a complete square, a square without corners and an octagon. After writing a couple of these programs, we realized we were typing multiple lines of the same with the same command orientation. To shorten our code, we could use a loop (something that repeats).  &lt;/p&gt;
&lt;p&gt;For example, when making a square we initially wrote:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;t.forward(100)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.left(90)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.forward(100)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.left(90)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.forward(100)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.left(90)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.forward(100)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;t.left(90)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;we can decrease the amount of lines of code by using a loop function. Here is an example:  &lt;/p&gt;
&lt;p&gt;for i in range(4):&lt;br&gt;
&lt;strong&gt; &lt;code&gt;t.forward(100)&lt;/code&gt;&lt;br&gt;
&lt;/strong&gt; &lt;code&gt;t.left(90)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;By using this loop function, we decreased the amount of lines we need to write. This still makes the same square! Notice the underscores before the instructions. These are present to show the implementation of the 'tab' key, though in Python, this happens automatically. We learned in class, any instruction under a function that is 'tabbed' will perform that function's attributes.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Assignment Two&lt;/h4&gt;
&lt;p&gt;By using the coding fundamentals we learned from class, create multiple 'turtles' that each create a different object or design on the screen. If you are unsure of how to get the right version of Python installed on your computer at home, just ask us in Slack! For instructions on how to get to Slack look to the section on this blog from last week.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/27/2016&lt;/code&gt;    &lt;/p&gt;
&lt;h4&gt;Review of Turtle Module&lt;/h4&gt;
&lt;p&gt;A module is like library we can pull information from and bring into our program we write. These are programs created by writing definitions into a separate file called a &lt;em&gt;module&lt;/em&gt; or &lt;em&gt;script&lt;/em&gt;. This is saved on a permanent memory device like a disk, so that it can be used over and over again.&lt;sup id="fnref2:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; When we type &lt;code&gt;import turtle&lt;/code&gt; at the beginning of our program we are able to use the tools already written in that program with our program. We also learned and implemented another Python tool, a variable -something of quantity, able to assume varying values. This value you assign to a certain variable can anything, an integer or name, or anything you tell it to be. Once we create our variable, we can reuse it. You may notice there is a &lt;em&gt;repeating&lt;/em&gt; theme here, &lt;strong&gt;reuse&lt;/strong&gt;, &lt;strong&gt;over and over&lt;/strong&gt;, etc. This theme boils down to making things more efficient to increase productivity. While we write our programs, we will always strive to make things more efficient. So, if you realize you are rewriting code to complete a similar task, go ahead and make a variable or function -reusable code. When you use tools like this, you can holistically shorten your programs your write and the time frame you write them in. We also used loop functions to write our instructions for our 'turtle' to complete, which also aimed at shortening our program.  &lt;/p&gt;
&lt;p&gt;Here is an example of excellent use of variables using the turtle module:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="turtle variable" src="images/turtle-variable.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Download Python&lt;/h4&gt;
&lt;p&gt;To download Python on your computer at home visit &lt;a href="https://www.python.org/downloads/"&gt;python.org&lt;/a&gt;. Be sure to download the version, 3.5.2 for your particular operating system (Windows, Linux/UNIX, Mac OS X, etc.)  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Three Dimensions&lt;/h4&gt;
&lt;h5&gt;3D Design and Printing&lt;/h5&gt;
&lt;p&gt;To further engrain our learning of the what makes a computer, a computer (devices for manipulating information), our understanding of a computer program (a set of instructions that causes a computer to perform a specified task)&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;, a computer's instruction cycle (Fetch, Decode, Repeat); furthermore, to incorporate objectives for the class, we learned what 3D printing is. We also came to understand how 3D printing works and the benefits of 3D printing and 3D designing. We started our 3D print and design lecture with learning about dimensions (1D, 2D, 3D) and what a dimension actually is.  &lt;/p&gt;
&lt;p&gt;The lecture on the different dimensions can be summed up with a "screenshot" of the Tech Em whiteboard this evening:
&lt;img alt="dimensions" src="images/dimensions.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;What is 3D Printing?&lt;/h4&gt;
&lt;p&gt;A 3D printer is just like a regular printer that we are used to using, except with an extra dimension. A regular printer (2D) prints in two dimensions (X and Y), whereas a 3D printer prints in three dimensions (X, Y, Z). The Printer we used at Tech Em is a MakerBot® Replicator 2, using a biodegradable thermoplastic called PLA (Polylactic acid) -consisting of nine carbon atoms; however, that is another story! These days, 3D printers have been created to use a slew of other materials; from concrete to chocolate. The 3D printer's extruder heats this material to 230°C (really hot) to spew it out one layer at a time. The plastic cools quickly and hardens, so when the extruder travels to lay the next layer of plastic on top of the previous, it has a nice even-structured surface to print on. The printer repeats this process until you have your object! Of course, the 3D printer does not do this on its own, we have to give the instructions of our model to the 3D printer to carry out.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;How do we Design our 3D Model?&lt;/h4&gt;
&lt;p&gt;To design our 3D model, students were introduced to the app, Autodesk 123D Design software. This is an iOS app that lets you mold, and create things on the iPad. The challenge was to design something that serves some purpose or solves a problem. With that said, we are essentially printing an object that is considered technology. Once we have finished our 3D design we then save the file as an ASCII STL file (saved as filename.stl), one that the MakerBot software can recognize.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Why 3D Print?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quickly test out ideas in days instead of months  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D Printing can lower your prototyping costs by thousands  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making mistakes isn’t costly, and allows you to learn by trial and error  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn using a hands on approach  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“If you use 3D Printing for prototypes, you will simply be able to go to market faster!” – Joris Peels; i.materialise  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Assignment 3&lt;/h4&gt;
&lt;p&gt;During class, we had discussions on what a 3D printer can do, i.e. 3D printed hearing aids, &lt;a href="http://enablingthefuture.org/tag/3d-printed-prosthetics/"&gt;prosthetics&lt;/a&gt;, &lt;a href="https://3dprint.com/119885/wake-forest-3d-printed-tissue/"&gt;organs&lt;/a&gt;, &lt;a href="http://www.3ders.org/articles/20160419-philip-the-lucky-duck-is-walking-again-thanks-to-3d-printed-feet.html"&gt;duck feet&lt;/a&gt;, and &lt;a href="http://www.yeggi.com/q/soap+dish/?s=tt"&gt;soap bar holders&lt;/a&gt;. Take a few moments until next class, to figure out a 3D design that would serve some function or make something easier (what's called "a hack" these days).  &lt;/p&gt;
&lt;h3&gt;List of Apps Day 3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Autodesk 123D Design  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MakerBot  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h3&gt;Day Four&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/04/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;First Prototypes&lt;/h4&gt;
&lt;p&gt;We took a look at our newly printed 3D objects we designed last week. We designed our objects serve some function. Designs ranged from door handles and hooks, to pencil/pen holders and phone cases. We recalled that 3D printing allows us to test out design ideas quickly. If we make a mistake, we can quickly redesign and reprint. We discussed any design flaws in our first prototypes. For some, we revisited the design.  &lt;/p&gt;
&lt;h4&gt;Creating Animations&lt;/h4&gt;
&lt;p&gt;To incorporate animations objectives, we introduced ourselves with the visual programming language, Scratch. Here, we can create programs and games using a 'drap-and-drop' method. In terms of computer science, "Scratching" means to reuse our code. Reusing code increases efficiency and adaptability of that code. We related this to our experience in the Lightbot app and Python (when we worked with the turtle module). We then took a look at the user interface of Scratch; including, Controls, Events, Motion, etc. Sprites are heavily used in this program and animation in general. A sprite is a graphic made on the computer ( i.e. a character) that can be put in motion and solely changed. To break that definition down, for a character to smoothly run, jump, and turn on the screen, an individual snapshot of that character performing those actions must be created and called upon.  &lt;/p&gt;
&lt;h4&gt;Download Scratch&lt;/h4&gt;
&lt;p&gt;Follow the steps to download Scratch &lt;a href="https://scratch.mit.edu/scratch2download/"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;Assignment Four&lt;/h4&gt;
&lt;p&gt;Draw your own character on Scratch.&lt;br&gt;
Give the character instructions to move by using your keyboard.&lt;br&gt;
When the character moves, have it move smoothly by creating a sprite for each movement.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Five&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/11/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Problem Solving&lt;/h4&gt;
&lt;p&gt;The class took a look at the steps to take to solve a general problem. This served as a precursor to make a rough tree model of student's objectives (or goals) from the first day. We discussed abstraction. In computer science, abstraction is used to rule out details and make the use of code and data a little easier. You can think of abstraction as a way to remove differences and details, so you can see how one solution might work for many different problems. "What?" -essentially, abstraction is the art of breaking down a concept or problem to make it seem more manageable.  &lt;/p&gt;
&lt;p&gt;To understand how to approach a problem, we used George Poyla's mathematical view of solving problems. By replacing some of the context within Poyla's "How to Solve It" list, we made it applicable to our hypothetical problem. We started by discussing a hypothetical task: Our house is a mess, and we need to clean the house by a certain time.   &lt;/p&gt;
&lt;p&gt;First, we'll understand the problem, then we'll find a connection between the information we are given and the solution. Let's break it down: Adapted from Poyla's How to Solve It list &lt;sup id="fnref2:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;, here are the steps we took to solve this problem as a class:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ask Questions  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is the problem?  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the house is a mess  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are there any special cases?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;needs to be cleaned by a certain time  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How will you know when this problem has been solved?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;when the house is clean  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look for Familiar Things  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the famous saying: "Never reinvent the wheel"  &lt;/li&gt;
&lt;li&gt;We'll recognize familiar situations  &lt;/li&gt;
&lt;li&gt;"so, I've had to clean my room before.. What did I do then?"  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think: Divide and Conquer  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Break up a large problem into smaller objects you can handle  &lt;/li&gt;
&lt;li&gt;plan to clean one room at a time, to make it more manageable  &lt;/li&gt;
&lt;li&gt;This is relevant to computing: we break up large problems into smaller pieces that we can solve individually -this approach applies to the concept of abstraction.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make an algorithm  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(or make a plan)  &lt;/li&gt;
&lt;li&gt;make a plan for your solution  &lt;/li&gt;
&lt;li&gt;then test out your plan to see if solves the problem  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The task of cleaning the whole house is a large abstract problem. This may seem overwhelming at first. But, you can think of it as a large task divided into subtasks, which are defined by cleaning each room separately, hopefully making the original task seem more manageable. For example, we can start with the kitchen. The kitchen can be divided into smaller tasks, or details i.e. washing the dishes, or wiping the counters.  &lt;/p&gt;
&lt;p&gt;To summarize: first we ask questions. Second, we look for familiar things. Then, we make the problem more manageable by dividing and conquering. Then we make a plan to solve the problem, or make an algorithm. See if the plan works! &lt;sup id="fnref3:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Making an Objective Tree&lt;/h4&gt;
&lt;p&gt;3D animation, designing games, learning Python, learning Java, learning how to create and use mods in Minecraft. These are just a few of the goals for the class. We will strive to relate each interest to work on a class project together. This may seem overwhelming at first, but we can make it more manageable by devising a plan to carry it out. We tackled this as a class by taking what we learned from the problem solving discussion in the beginning of class, and implementing that to make an objective tree with construction paper and other materials:&lt;br&gt;
&lt;img alt="1" src="images/homeschool-objective-tree-1.jpg"&gt; &lt;br&gt;
&lt;img alt="2" src="images/homeschool-objective-tree-2.jpg"&gt;  &lt;br&gt;
&lt;img alt="3" src="images/homeschool-objective-tree-3.jpg"&gt;    &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Assignment Four&lt;/h4&gt;
&lt;p&gt;For those interested in animations, &lt;br&gt;
download &lt;a href="https://store.unity.com/?_ga=1.139353271.565665585.1476286530"&gt;Unity&lt;/a&gt; and &lt;a href="https://www.blender.org/download/"&gt;Blender&lt;/a&gt; onto your computer.&lt;br&gt;
Complete the &lt;a href="https://unity3d.com/learn/tutorials/projects/roll-ball-tutorial"&gt;"Ball Tutorial"&lt;/a&gt; on Unity and we will go from there next week.&lt;br&gt;
Unity is more about creating detailed games where Blender focuses on 3D designing animations.&lt;br&gt;
Next week we will take a look at Unity and Blender.    &lt;/p&gt;
&lt;h3&gt;Day Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/18/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Traveling Down Our Objective Tree&lt;/h4&gt;
&lt;p&gt;For students interested in game making and creating 3D animations, we grouped off and took a look at the Unity program. Plenty of 3D games are created by using this platform. Though, the creation process is very detailed and time-consuming, you are able to manipulate countless parts of your project to eventually end up with something very well-rounded.  &lt;/p&gt;
&lt;p&gt;For students interested in the LED pendant project, we formed another group to learn the binary number system involving the whiteboard and binary flashcards. There are plenty of ways to learn the Binary Number system, a base two number system. In other words, this number system uses two digits: one and zero. The number system we are most familiar with, the Decimal Number system, a base ten number system. So, this system uses ten digits: 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9. By using binary flashcards, students learned the different place values in the binary number system. This activity is great for quickly understanding how to convert numbers from decimal to binary and vice versa.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="binary-flashcards-homeschool" src="images/binary-cards-piano.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;For those that are familiar with the LED pendant, we will incorporate unique and functional 3D designs to house our freshly coded LED pendants. We started coding the LED pendants using Arduino by typing zeroes and ones. The LED pendants relay these zeroes as 'off' and ones as 'on'.  &lt;/p&gt;
&lt;p&gt;Next week we will finish our pendants and start drawing up plans to design a 3D printed 'house' for the pendants. For those students interested in creating 3D animations, we will start to master the Blender program, which is great for learning what it takes to successfully design 3D animations.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Assignment Five&lt;/h4&gt;
&lt;p&gt;For those interested in animations, continue touring Blender and bring your newly acquired animations into the studio next week.&lt;br&gt;
For those working towards finishing their LED pendants next week, physically draw up ideas (at least three) for 3D design to hold your LED pendant.&lt;br&gt;
To further master the binary number system, create your own set of binary flashcards. You can use the picture above as a template. Remember, from our problem solving techniques we learned during the previous week, 'never reinvent the wheel'.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Seven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/25/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Zeroes and Ones&lt;/h4&gt;
&lt;p&gt;We reviewed binary with a fun binary quiz! Then jumped into finishing the transfer of our LED pendant designs we drew up last week by converting them into zeroes and ones.  &lt;/p&gt;
&lt;h4&gt;Dots and Dashes&lt;/h4&gt;
&lt;p&gt;We were introduced to Morse code; what it is and why it was/is important. Learning Morse code helps us to further our understanding of computer software and hardware; specifically, the 'hidden languages' of computers. Just like when we programmed with Python and in Arduino, a person relays information via a Morse code machine (this can be a range of models, from empty Altoid cases to flashlights) and that information is interpreted by others. All about communication! Morse code works with "short" or "long" blinks, which can be relayed using a flash light or coding in Python on a Raspberry Pi to control LED lights. To show Morse code on paper, we use "dots" and "dashes". In other words, Morse has two possible outputs, like binary, "ON" or "OFF".  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Morse Alphabet" src="images/morse-code-alphabet.jpg"&gt;&lt;br&gt;
We coded our own messages in Morse code, and had each other decode those messages. Then we jumped into an introduction on the Raspberry Pi by learning all of the components of the 'mini computer'.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eight&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/01/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Mechanics of GitHub&lt;/h4&gt;
&lt;p&gt;What is GitHub? A Git (a version control system) repository hosting service on the web. &lt;sup id="fnref:9"&gt;&lt;a class="footnote-ref" href="#fn:9" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; It is a site used by millions of software developers, including large companies like Apple and Google, and small startups like Tech Em. This site allows developers to easily store projects and collaboratively work on projects. &lt;sup id="fnref:10"&gt;&lt;a class="footnote-ref" href="#fn:10" rel="footnote"&gt;10&lt;/a&gt;&lt;/sup&gt; Due to the features of publicly storing projects and tracking the work on these projects, the site acts like a &lt;em&gt;live&lt;/em&gt; portfolio, so it has become an important part of the hiring process. We will use this site to save and track some of the projects we have been working during the class.  &lt;/p&gt;
&lt;p&gt;Students learned the mechanisms of GitHub and how we'll use it. We learned what GitHub repositories are, the difference between commits (local commits vs. GitHub commits), pulling (syncing) and pushing. To wrap our heads around all of this, think of a repository as a folder full of files, a directory containing sub-directories. If we start at a repository (or repo) on GitHub, we can clone (make a copy) of it, to save on our computer. On our computer, the cloned repo is known as the "local" repo. So, a 'branch' was made. We can essentially follow that branch back to its "parent" (or "master"), the repo on GitHub.
&lt;img alt="repos" src="images/github-repos.jpg"&gt;&lt;br&gt;
We can either make changes to files in the repo directly on the GitHub site or on the local repo. When you make a change in the local repo, it does not automatically update the repo on the web. To update your change, you must first pull, or get the latest changes others have made to the repo. The you can "commit" your change, and 'push' that change to the repo on GitHub. Now the GitHub repo shows the changes you have made. There are neat features that show the history of changes, or collection of all the changes made by people collaboratively working on the repository.  &lt;/p&gt;
&lt;p&gt;Phew, right? Don't worry, it will all make sense before you even know it.  &lt;/p&gt;
&lt;h4&gt;Using Python, GitHub, a Raspberry Pi, and Slack&lt;/h4&gt;
&lt;p&gt;To make our very own (&lt;em&gt;sort've&lt;/em&gt; intelligent) Slack "BOT". In other words, we are going to work together to make a Siri/Alexa 'machine'. We will harness our computer science and programming skills by using Python to give instructions for the bot to carry out.  &lt;/p&gt;
&lt;p&gt;To help explain, we'll write a blog with a nice flow diagram to understand the process. In the mean time, check out the awesome deck made by Wray (using GitHub of course!): http://techemstudios.com/decks/slackpi-to-alexa   &lt;/p&gt;
&lt;h4&gt;Assignment Six&lt;/h4&gt;
&lt;p&gt;Sign up for Slack if you have not already. To help get started, visit Chris's blog for an guide/introduction to Slack and the Slack Bot.  &lt;/p&gt;
&lt;p&gt;Create an account on GitHub. From the Tech Em blog about Slack, follow the links at the end to direct yourself to the GitHub blogs. These will hopefully help you with setting up your own GitHub account.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Nine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/08/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Git Commands using the Pi&lt;/h4&gt;
&lt;p&gt;After familiarizing ourselves with creating a command-response program using Pythonsita, we used git commands with the Raspberry Pi, as well as the app, &lt;a href="http://git2go.com/"&gt;Git2Go&lt;/a&gt; to push our code changes to the repository for our Slackbot.  &lt;/p&gt;
&lt;p&gt;When we made changes and saved those changes to our local directory on the pi, a series of steps followed. To show how we can skip a &lt;em&gt;fancy&lt;/em&gt; user-interface, we could do all we needed while in the command line on the pi. Here are some commands we learned after we made changes to our files and saved them:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/wray/code_em.git&lt;/code&gt; clones the repo to the pi, now we have a 'local working directory'  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this allows us to make changes to the GitHub repo right on the pi  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; gets the latest updates to the GitHub repo we are working on  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; shows us what files we changed during our session  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git add*&lt;/code&gt; adds the changed files, then ready for a commit  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; typing this command again just confirms our recent added file  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git commit -m "description here"&lt;/code&gt; takes a snapshot of our changes  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; shows us a 'history' of activity  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt; pushes the snapshot of our changes to be permanently saved to the GitHub repo  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; gets the latest  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Using Git2Go&lt;/h4&gt;
&lt;p&gt;The Git2Go app allows pretty much all of the features you can do on a Raspberry Pi or other computer, on an iPad. We started by cloning the &lt;a href="https://github.com/wray/code_em"&gt;repository&lt;/a&gt; for our Slackbot. The looks are a little different on this environment, but overall visually appeasing and easy to use. Students continued their practice in understanding git flow, by making Python code changes to their own directory and performing all the actions listed above (in the command line on the pi) by using this app, Git2go.  &lt;/p&gt;
&lt;h3&gt;Assignment Seven&lt;/h3&gt;
&lt;p&gt;If you have your GitHub account, try creating commands and responses in your own directory at home. You can do this by cloning the repository to your computer and making the changes using Python or your favorite test editor and committing, then pushing those changes to the repository. Or, if you have not yet received/accepted an invitation to collaborate, you can "fork" the code_em project and do a pull request. Look to the &lt;a href="http://blog.techemstudios.com/slack.html"&gt;blog on Slack&lt;/a&gt; and/or ask a question in the Slack team.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Ten&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/15/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;3D Design and Minecraft&lt;/h4&gt;
&lt;p&gt;Students continued there practice with the flow of git and started 3D design projects on Minecraft. Students would start by designing an object on a laptop. They kept in mind what they learned from their previous designs (functional designs) of what makes a good 3D print. There are still limitations for 3D printing, so being weary of potential design flaws recognized previously can save time and material. Students used the program, &lt;a href="http://www.realtimerendering.com/erich/minecraft/public/mineways/"&gt;Mineways&lt;/a&gt; to render there object designed in Minecraft to a ASCII file (stl file) that the 3D printer could read.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Eleven&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;11/29/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Project Discussion&lt;/h4&gt;
&lt;p&gt;Projects were started using the Raspberry Pi as a machine to relay morse code. For this project, students will use what they learned about morse coding, a Raspberry Pi and use a speaker, to create a &lt;em&gt;telegraph&lt;/em&gt; machine. Students will write Python code (or set up a switch mechanism) on the pi to relay messages coded in morse!  Projects were also started on Python text-adventure games and continuation of animation projects using Scratch.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="morsemachinebutton" src="images/morse-pi-setup.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Twelve&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;12/06/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Last Day&lt;/h4&gt;
&lt;p&gt;Students made final tweaks to the LED pendants using Arduino, continued text adventure programs, and finished up setting up the Raspberry Pi, breadboard, and switching devices to mimic a telegraph to relay messages in morse; a speaker as the output device.  &lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="http://blog.techemstudios.com/upload-projects-to-github.html"&gt;blog&lt;/a&gt; on how to upload your projects onto your own GitHub repository. You can find some projects you have worked on during this session &lt;a href="https://github.com/jo3t3ch3m/TechEmStudents"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Thanks for a great session, see you in the Winter!&lt;/p&gt;
&lt;p&gt;Also, don't forget... We are moving! New address:&lt;br&gt;
1123 Gaskins Rd&lt;br&gt;
Suite B600  &lt;/p&gt;
&lt;p&gt;Happy Holidays!!!  &lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;http://history-computer.com/People/ColmarBio.html&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;http://www.computerhistory.org/babbage/&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;P.E. Cerruzzi, A History of Modern Computing (Cambridge, MA: The MIT Press, 1998):217.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;http://www.intel.com/content/www/us/en/processors/core/core-i7ee-processor.html&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;http://blogdalu.magazineluiza.com.br&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;http://www.aha.io/product/integrations/github&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Dale, Nell, and John Lewis. "Problem Solving and Algorithms/How to Solve a Problem." Computer Science Illuminated. 4th ed. Sudbury, MA: Jones and Bartlett, 2011. 196-200. Print.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;Petzold, Charles. "Codes and Combinations." Code: The Hidden Language of Computer Hardware and Software. Redmond, WA: Microsoft, 1999. 5-9. Print.&amp;#160;&lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:9"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/GitHub&amp;#160;&lt;a class="footnote-backref" href="#fnref:9" rev="footnote" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:10"&gt;
&lt;p&gt;http://www.businessinsider.com/github-the-full-inside-story-2016-2&amp;#160;&lt;a class="footnote-backref" href="#fnref:10" rev="footnote" title="Jump back to footnote 10 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="computer science"></category><category term="python"></category><category term="code"></category><category term="github"></category><category term="slack"></category></entry><entry><title>Upload Projects to GitHub</title><link href="/upload-projects-to-github.html" rel="alternate"></link><published>2016-11-23T00:00:00-05:00</published><updated>2016-11-23T00:00:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-11-23:/upload-projects-to-github.html</id><summary type="html">&lt;hr&gt;
&lt;p&gt;During Code Em, WEMS ASE, and the Homeschool classes, we have been writing code in Python to create commands for a &lt;a href="http://blog.techemstudios.com/slack.html"&gt;Slackbot&lt;/a&gt; to respond to. We did this by learning the flow of GitHub. Below is an outline of steps to help you create your own GitHub repository and add …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;p&gt;During Code Em, WEMS ASE, and the Homeschool classes, we have been writing code in Python to create commands for a &lt;a href="http://blog.techemstudios.com/slack.html"&gt;Slackbot&lt;/a&gt; to respond to. We did this by learning the flow of GitHub. Below is an outline of steps to help you create your own GitHub repository and add your code from other projects you have been working on with the class. Don't worry, we'll go over the following steps in class. But, if you want to get started early, hopefully these steps will help, and here you go!   &lt;/p&gt;
&lt;h3&gt;How to Upload Your Projects to Your Own Repository&lt;/h3&gt;
&lt;p&gt;Okay, so you've written several programs in Python. You may ask yourself: How can I organize them, work on them after class is over, make changes when I am not connected to the internet, keep track of the changes I make, 'permanently' save the changes I make, and share them with good friends?  &lt;/p&gt;
&lt;p&gt;I'm glad you asked! You can do all of the things above, with GitHub! This blog will help you "git" going on saving your projects to your own repository on GitHub.  &lt;/p&gt;
&lt;p&gt;First, log into your GitHub account, or (if you have not already) create an account on GitHub.  &lt;/p&gt;
&lt;p&gt;Though, we'll go over these steps in class hopefully, these will get you started.  &lt;/p&gt;
&lt;h3&gt;Step 1&lt;/h3&gt;
&lt;h4&gt;Create a Repository (Repo)&lt;/h4&gt;
&lt;p&gt;Once you are logged into GitHub, click the "plus" sign at the top right of your screen&lt;br&gt;
&lt;img alt="create repo" src="images/github_screenshots/one.jpg"&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;Next, name your repository. Creating your repository is like creating/naming a new folder on your computer, except you're doing this via GitHub. Below, is just an example of what you might name your repository.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="name repo" src="images/github_screenshots/two.jpg"&gt;&lt;sup id="fnref2:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;Essentially, you just made a ".git directory (repository)"  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 2&lt;/h3&gt;
&lt;h4&gt;Checkout the Project&lt;/h4&gt;
&lt;h5&gt;Make a Working Directory&lt;/h5&gt;
&lt;p&gt;Clone your repository. In other words, make a copy of your new repository, known as your "Working Directory". To do this click the green 'Clone or download' button.&lt;br&gt;
&lt;img alt="clone repo" src="images/github_screenshots/clone.jpg"&gt;&lt;sup id="fnref3:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;There more than a few ways to clone your repository to your computer. In these next steps, I'm going to show you how to clone your repository to open in GitHub Desktop. This will help if you've already downloaded &lt;a href="https://desktop.github.com/"&gt;GitHub Desktop&lt;/a&gt;. If not, you should be directed to the GitHub site to download the desktop app if you click "Open in Desktop". In contrast, you can clone/download your repository to save as a zip file. Just save and extract it to any of your directories on your computer. Furthermore, if you've downloaded the desktop app already and have it open, you can add the repository by copying the web URL and pasting it into the app. Either way, you will have to choose where you want to save your repository on your computer. You should get something like this:&lt;br&gt;
&lt;img alt="desktop app" src="images/github_screenshots/desktop.jpg"&gt;&lt;sup id="fnref4:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;When you have your repository cloned to your desktop, you will see a 'History' tab and a 'Changes' tab. The history tab shows the collection of snapshots of changes made to your repository -this will grow with time! The changes tab, shows the current changes you have made in your Working Directory (or your local changes) that you have not committed. Once you commit those changes, you have essentially taken a snapshot of your changes. In order to push those changes, to be permanently saved to the repository on GitHub, you must press the &lt;strong&gt;sync&lt;/strong&gt; button, located towards the top-right of the Desktop app (or "git push" in the command line), right above the list of the changes you've made.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="desktop app two" src="images/github_screenshots/desktoptwo.jpg"&gt;&lt;sup id="fnref5:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Remember to always sync!&lt;/strong&gt;&lt;br&gt;
* When you click sync at the top right of the GitHub desktop, you are getting up-to-date with the most recent additions to that repository. This is also known as pulling/pushing. What happens when you sync:&lt;br&gt;
    - fetches the latest changes made to the GitHub repo&lt;br&gt;
    - Then those changes are merged to your local repository&lt;br&gt;
    - now your local repository is updated  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 3&lt;/h3&gt;
&lt;h4&gt;Putting Your Projects Into Your Repository&lt;/h4&gt;
&lt;p&gt;You can also do this several ways. First, I suggest you locally (on your computer) set yourself up to be organized. Open your newly cloned repository (or local repository) that has been saved on your computer. Then create a new directory (folder) and name that directory something that makes sense to you. Since you will be uploading several Python programs, it may be a good idea to create a directory labeled "Python". Inside of that folder, you can create subdirectories. For instance, you could make the python folder house folders named "turtle_module", "grocery_list_program", "condition_statements", "loops", etc. -basically an organized collection of what you have been working on; even a directory for your class notes. Then, you can literally copy and paste the python files you have made during the class into those directories you just created -all housed in the parent directory of your cloned (local) repository.  &lt;/p&gt;
&lt;p&gt;If you go back to GitHub Desktop, you should see a few files under the changes tab. These are known as stage files. The changes will not be automatically updated to your 'master' repository. To do this, you must commit your changes (taking asnapshot of the changes) by writing a concise title or summary about your changes. For the description of the changes you have made, you can provide more detail. If you are satisfied with your changes, you can click 'Commit to master'. &lt;strong&gt;NEXT&lt;/strong&gt;, click he sync button; this function will "push" your changes to the master repository. Once you have pushed your changes, you will find a list of your permanently saved changes under the history tab.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="desktop commit" src="images/github_screenshots/desktopthree.jpg"&gt;&lt;sup id="fnref6:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;That's it! You can check out your pushed changes by checking out your master repository on the GitHub site.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Practice Makes Perfect&lt;/h3&gt;
&lt;p&gt;To help familiarize yourself with the flow of git, try first to perform the steps above on one, or two files at a time. Then, if you feel comfortable, make bigger commits. As in, upload more than two files into the directories of your local repository. Once, you get in the flow of git, it will become second-nature to you.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary of the steps  &lt;/li&gt;
&lt;li&gt;create a repository  &lt;/li&gt;
&lt;li&gt;clone that repository  &lt;ul&gt;
&lt;li&gt;this makes a (local) working directory on your computer  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sync (pull/push)      &lt;/li&gt;
&lt;li&gt;make changes to your local repo  &lt;/li&gt;
&lt;li&gt;commit/push those changes to your master repo  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides committing (locally), via GitHub Desktop or the command line/terminal, you can also commit changes you make right on the GitHub site.  &lt;/p&gt;
&lt;p&gt;So, that's  the &lt;em&gt;gist&lt;/em&gt; of creating your own GitHub repository, cloning it, and uploading/updating your projects locally (on your device) and committing those changes to then show up (push) in your GitHub repository.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Get to Your Projects Here&lt;/h3&gt;
&lt;p&gt;If you did not bring in your own laptop to work on during this session, all of your projects have been saved on either the Tech Em laptops or the iPads here at the studio. Lucky for you, I created a repository on GitHub, called &lt;a href="https://github.com/jo3t3ch3m/TechEmStudents"&gt;TechEmStudents&lt;/a&gt;. Previously we've saved student projects straight on the Tech Em Studios secure site. GitHub makes it a bit easier to get to your projects. You can click that link to see the projects you have worked on during this class! After clicking the link for the repo, just navigate to the directory with your name and you will find your projects. This will help you perform the steps (indicated in this blog) to upload your projects onto your own GitHub repository. If you don't see all of your projects on the repo yet, keep checking, projects are still being added to your directory.  &lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://git-scm.com/book/en/v2/Getting-Started-Git-Basics&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;https://techcrunch.com/2012/07/14/what-exactly-is-github-anyway/&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;https://www.lynda.com/Git-tutorials/Unstaging-files/100222/111284-4.html?autoplay=true&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;https://github.com/&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref4:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref5:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref6:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="computer science"></category><category term="python"></category><category term="code"></category><category term="github"></category><category term="slack"></category></entry><entry><title>Slack</title><link href="/slack.html" rel="alternate"></link><published>2016-11-08T00:00:00-05:00</published><updated>2016-11-08T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2016-11-08:/slack.html</id><summary type="html">&lt;h3&gt;Why Slack?&lt;/h3&gt;
&lt;p&gt;Slack has come onto the scene in the last couple years as a way for groups of people to communicate, in a chat room like setting. What makes Slack stand out from similar pieces of software is it's ease of use, and simplicity. At Tech 'Em Studios we …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Why Slack?&lt;/h3&gt;
&lt;p&gt;Slack has come onto the scene in the last couple years as a way for groups of people to communicate, in a chat room like setting. What makes Slack stand out from similar pieces of software is it's ease of use, and simplicity. At Tech 'Em Studios we use Slack to talk amongst each other, and share ideas. The real fun with Slack comes when you
dive into all of it's features, and the many different types of textual bots you can have feeding your Slack channel with information.  &lt;/p&gt;
&lt;p&gt;Our goal with using Slack with the students is firstly to be able to allow them to ask questions to the instructors when they aren't in class. But also as part of an activity
that involves using the Python programming language to create, and program your own Slack bot! With the knowledge that the students learn from class they will be able to commit changes to the class bot, and make it talk back depending on what is said to it. We like this activity because it's fun, as well as gets the kids thinking about artificial intelligence! My plan for this blog post is to talk about getting signed up, joining Slack, and bit more about it features.  &lt;/p&gt;
&lt;h3&gt;Signing up&lt;/h3&gt;
&lt;p&gt;In order to get signed up with the Tech 'Em Student's Slack channel you will need to provide us with your  email either in class, or by sending us an email at &lt;a href="mailto:info@techemstudios.com"&gt;info@techemstudios.com&lt;/a&gt;. If your child doesn't have an email, I suggest creating one via Gmail, or having them use yours. Email is simply needed to sign up for Slack, and as a method of resetting, or recovering your password.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Email Inbox" src="images/slack-gmail2.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;You will receive the invitation in your inbox. By click the big green button you will start the registration process. Things that has been &lt;strong&gt;underlined in red&lt;/strong&gt; is the identifying parts for you to be able to verify you have received the correct invitation, and your child will be joining a Slack channel controlled, and administered by Tech 'Em Studios.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;, you will be invited by either Joe Seiler, Chris Kefalas, or Wray Mills. If one of those names isn't listed, you know someones 'a phishing!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Email" src="images/slack-invite3.jpg"&gt;    &lt;/p&gt;
&lt;p&gt;If you have any other questions about getting signed up, please don't hesitate to reach out to us at &lt;a href="mailto:info@techemstudios.com"&gt;info@techemstudios.com&lt;/a&gt;    &lt;/p&gt;
&lt;h3&gt;Joining Slack&lt;/h3&gt;
&lt;p&gt;After you have click the big green button you will be prompted to type in your name, and choose a username. This user name can be anything, granted it is appropriate, and within Slack's guidelines for user name creation.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="create" src="images/slack-create1.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;You will than be prompted to create a password for your account. We always recommend using a Great password!    &lt;/p&gt;
&lt;p&gt;&lt;img alt="password" src="images/slack-password4.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The next screen you will see will look like the one below. It will offer to walk you through a tutorial of how Slack works, and is set up. It's super quick and gives you a basic idea of the layout.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="tutorial" src="images/slack-tut6.jpg"&gt;  &lt;/p&gt;
&lt;h3&gt;Slacking?&lt;/h3&gt;
&lt;p&gt;Slack is set up as a system of chat rooms known as channels that are always prefixed with a octothorpe (#). Everyone is automatically joined into the channel known as #general. Currently we have configured Slack so that all our students are in #general, and can read, and write. The purpose of #general is for dialogue between everyone, as well as relaying the latest messages from Tech 'Em Studio headquarters! From there we have created private channels named after each class that only the particular students in that class can join. The goal with the private channels is to allow each class to interact with their bot, as well as let them talk amongst themselves. We hope that by creating these class channels the students will be able to better interact with other students, and help each other out.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Slack" src="images/slack-slack-5.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The channels you see on the side will be different depending on what class the student is in. Everyone though is automatically joined into #general, and #random, and their respective class channels as well.  &lt;/p&gt;
&lt;p&gt;Students can also create private messages with other students that are part of the Slack channel.  &lt;/p&gt;
&lt;p&gt;Slack is available for Windows, macOS, and Linux operating systems. As well as Android, iOS, and you can even use Slack in a web browser by navigating to https://techemstudents.slack.com.  &lt;/p&gt;
&lt;h3&gt;Slack bot&lt;/h3&gt;
&lt;p&gt;Just as much as the Slack craze has been sweeping the nation, the Slack &lt;em&gt;bot&lt;/em&gt; craze has been steadily gaining traction. A Slack bot is a textual bot that can be programmed to provide a certain function. People have created hundreds of these bots to do anything you can think of! Taco Bell even has one called &lt;a href="https://www.tacobell.com/feed/tacobot"&gt;Taco Bot&lt;/a&gt; that lets you order tacos straight from Slack!  &lt;/p&gt;
&lt;p&gt;The main ones you will see hanging out in our channel are Twitter bot, Github bot, Travis bot, and our work in progress #general Python bot. Some bots you can interact with via typing in certain commands. Other bots will just feed information into your channel based on certain circumstances. For instance, whenever we post a tweet to our Twitter account, it will relay that message into the Slack channel for everyone to see. In a similar manner, the Github bot will post a message whenever someone has made a new commit to the repo!  &lt;/p&gt;
&lt;p&gt;The students will be working with the Python programming language to create their own Slack bots! Either for their own use, and experimentations, or as a general bot to hang out in their class channel. They will than be able to program that bot to respond to certain commands with just text, or make a query to a certain data set online. It really is a lot of fun, and the possibilities are endless when thinking of different ways you can interact with the bot.  &lt;/p&gt;
&lt;p&gt;These bots can either be ran on a Raspberry Pi, your PC, or even in the cloud! Slack is a free service up until a certain amount of users. So at the end of the session, students can create their own Slack channels, and start crafting their own bots to hang out in their channels!  &lt;/p&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Slack is awesome, and personally is the only thing I can see replacing e-mail one day. We are hoping that by using Slack, and allowing students to communicate amongst themselves, as well as with teachers outside of the classroom will really help to make all of the classes feel more seamless. Slack is a great way to open the discussion about problems students are having with assignments, and for teachers to provide live help to walk them through issues that might arise. A lot of our classes we only get to spend one hour a week with the students. But with Slack it extends that, and allows them to reach out for help anytime during the week!  &lt;/p&gt;
&lt;p&gt;Let us know if you have any questions by emailing us at &lt;a href="info@techemstudios.com"&gt;info@techemstudios.com&lt;/a&gt; please.  &lt;/p&gt;
&lt;p&gt;Ready to sign up for GitHub? Check out the blog about &lt;a href="http://blog.techemstudios.com/github-part-one.html"&gt;GitHub&lt;/a&gt;  &lt;/p&gt;</content><category term="slack"></category><category term="github"></category><category term="python"></category><category term="coding"></category><category term="code em"></category><category term="homeschool"></category><category term="create em"></category><category term="game em"></category></entry><entry><title>GitHub Part One</title><link href="/github-part-one.html" rel="alternate"></link><published>2016-11-07T00:00:00-05:00</published><updated>2016-11-07T00:00:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-11-07:/github-part-one.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Sign Up for GitHub!&lt;/h3&gt;
&lt;p&gt;"GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere." &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h3&gt;Step 1&lt;/h3&gt;
&lt;p&gt;Start up your web browser and go to https://github.com/  &lt;br&gt;
&lt;img alt="github1" src="images/github1.jpg"&gt;   &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 2&lt;/h3&gt;
&lt;p&gt;Create an account (You must have an email …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Sign Up for GitHub!&lt;/h3&gt;
&lt;p&gt;"GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere." &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h3&gt;Step 1&lt;/h3&gt;
&lt;p&gt;Start up your web browser and go to https://github.com/  &lt;br&gt;
&lt;img alt="github1" src="images/github1.jpg"&gt;   &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 2&lt;/h3&gt;
&lt;p&gt;Create an account (You must have an email to sign up for GitHub).&lt;br&gt;
&lt;img alt="github2" src="images/github2.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 3&lt;/h3&gt;
&lt;p&gt;You can just select the "free" plan.
&lt;img alt="github1" src="images/github3.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 4&lt;/h3&gt;
&lt;p&gt;You can answer a few questions about yourself or just click 'skip this step'  &lt;/p&gt;
&lt;p&gt;&lt;img alt="github1" src="images/github4.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Be sure to verify your email that you used to sign up for Slack. In the slack channel for your class, notify either Wray (@wray), Chris (@chk) or me (@joe). Then Look in your inbox for a recent email from GitHub, and follow the steps in the email to accept the GitHub invitation.&lt;/strong&gt;     &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 5&lt;/h3&gt;
&lt;p&gt;If you are in the WEMS ASE class: In your GitHub search box, type "wems ase" or click this link: &lt;a href="https://github.com/wray/code_em"&gt;CODE EM&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;If you are in the Code Em or Homeschool class at Tech Em Studios: In your GitHub search box, type "code_em" or click this link: &lt;a href="https://github.com/wray/wems"&gt;WEMS ASE&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;This will take you to the Tech Em repository for your class's Slackbot. For WEMS ASE students, substitute "code_em" in the following screenshots for "wems ase".  &lt;/p&gt;
&lt;p&gt;&lt;img alt="github1" src="images/github6.jpg"&gt;   &lt;/p&gt;
&lt;p&gt;&lt;img alt="github1" src="images/github7.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 6&lt;/h3&gt;
&lt;p&gt;Think of the repository as a shared folder. Once you are in your class's repository, select 'clone or download'.  &lt;/p&gt;
&lt;p&gt;Then select 'Open in Desktop'  &lt;/p&gt;
&lt;p&gt;You will then be directed to desktop.github.com to download the GitHub Desktop.&lt;/p&gt;
&lt;p&gt;This saves the code_em (or wems ase) repository on your computer, labeled, code_em (or wems ase).   &lt;/p&gt;
&lt;p&gt;&lt;img alt="github1" src="images/github8.jpg"&gt;   &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Step 7&lt;/h3&gt;
&lt;p&gt;Once you download GitHub Desktop, and cloned your class's repository, this is what you should see:&lt;br&gt;
&lt;img alt="github1" src="images/github9.jpg"&gt;   &lt;/p&gt;
&lt;p&gt;Above, are the changes you have made "locally". Meaning it shows you what code_em (or wems ase) files you have edited and saved on your computer. Right now, it should say no local changes.  &lt;/p&gt;
&lt;p&gt;The "History" tab shows you all the changes you and others have made to files in the code_em (or wems ase) repository:  &lt;br&gt;
&lt;img alt="github1" src="images/github10.jpg"&gt;&lt;br&gt;
It will show several changes already made to the repository. In the coming weeks, the number of those changes will grow!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.techemstudios.com/github-part-two.html"&gt;Move on to the next GitHub steps here&lt;/a&gt;  &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://github.com/&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="github"></category><category term="python"></category><category term="coding"></category><category term="slack"></category></entry><entry><title>GitHub Part Two</title><link href="/github-part-two.html" rel="alternate"></link><published>2016-11-07T00:00:00-05:00</published><updated>2016-11-07T00:00:00-05:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-11-07:/github-part-two.html</id><summary type="html">&lt;hr&gt;
&lt;h3&gt;Using GitHub Desktop&lt;/h3&gt;
&lt;p&gt;So, you've just downloaded/cloned the "folder" code_em (or wems ase) onto your computer. Now you have a 'local' repository named code_em. In other words, you have a folder on your computer saved as code_em (wems ase), in the location where you chose to have it saved …&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h3&gt;Using GitHub Desktop&lt;/h3&gt;
&lt;p&gt;So, you've just downloaded/cloned the "folder" code_em (or wems ase) onto your computer. Now you have a 'local' repository named code_em. In other words, you have a folder on your computer saved as code_em (wems ase), in the location where you chose to have it saved.   &lt;/p&gt;
&lt;h3&gt;Making Code Changes&lt;/h3&gt;
&lt;p&gt;If you navigate to the code_em/wems ase folder on your computer, you will find a subfolder called "slackbot_ce" (or "slackbot_wems") This contains directory for the class. You can make changes to the files under &lt;em&gt;your&lt;/em&gt; directory. In other words, you are able to work on the "slacklib.py" Python file that is located in &lt;em&gt;your&lt;/em&gt; folder.  &lt;/p&gt;
&lt;p&gt;To make code changes, you can use a text editor or edit with Python's IDLE by right-clicking the file and select "Edit with IDLE" and be sure to save your changes.  &lt;/p&gt;
&lt;p&gt;If you do not already have Python 2.7, go ahead and download it &lt;a href="https://www.python.org/downloads/"&gt;here&lt;/a&gt;&lt;br&gt;
Remember to edit your slacklib.py with Python 2.7 (not any other version).    &lt;/p&gt;
&lt;h3&gt;Committing Your Code Changes&lt;/h3&gt;
&lt;p&gt;Your saved changes do not show up on the GitHub website just yet. To see your changes on the website, open GitHub Desktop and make sure you are on the "Changes tab" -it will be highlighted in blue. Here, you will see a list of all the changes you have made:    &lt;/p&gt;
&lt;p&gt;&lt;img alt="github-desktop showing commit" src="images/github-desktop-1.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Once you give a short Summary and Description of the changes you had just made, you can click the 'Commit to master' at the bottom of the screen! Essentially, this sends your updated changes to the code_em/wems ase repository on GitHub. Now you will be able to see your updates (a detailed view of what you have changed) on the GitHub repository as well as on your 'local' repository.  &lt;/p&gt;
&lt;h3&gt;"Sync early, sync often" -Wray&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Before you commit&lt;/strong&gt;, be sure to always "sync".    &lt;/p&gt;
&lt;p&gt;This gets the latest and greatest commits to the repository. Think of it as updating your 'local' repository.    &lt;/p&gt;
&lt;h3&gt;See Slack BOT run&lt;/h3&gt;
&lt;p&gt;Once you have committed your changes i.e. your new Slack Bot commands, sign into Slack and test them out! Though, it will take several minutes for the process to finish, before your Slack Bot responds to your commands correctly. There will be another blog post explaining the process in more detail.     &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.techemstudios.com/slack.html"&gt;Return to the Slack intro blog here&lt;/a&gt;  &lt;/p&gt;</content><category term="github"></category><category term="python"></category><category term="coding"></category><category term="slack"></category></entry><entry><title>Create Em Fall 2016</title><link href="/create-em-fall-2016.html" rel="alternate"></link><published>2016-10-21T00:00:00-04:00</published><updated>2016-10-21T00:00:00-04:00</updated><author><name>Davis Mohar</name></author><id>tag:None,2016-10-21:/create-em-fall-2016.html</id><summary type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/14/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Intro to Raspberry Pi&lt;/h4&gt;
&lt;p&gt;Create Em started out with discussions on objectives, or desired projects. Since the Raspberry Pi is so versatile, allows for easy manipulation, and provides a mecca for machine learning, we will be completing a slew of projects with this device.  &lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Day One&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/14/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Intro to Raspberry Pi&lt;/h4&gt;
&lt;p&gt;Create Em started out with discussions on objectives, or desired projects. Since the Raspberry Pi is so versatile, allows for easy manipulation, and provides a mecca for machine learning, we will be completing a slew of projects with this device.  &lt;/p&gt;
&lt;p&gt;The Raspberry Pi is essentially a mini computer (pocket-sized). It is a device for non-experienced and experienced programmers alike. By working through projects associated with the pi, its user can learn programming in a hands-on/interactive way. The pi's introduction started with an activity on all of its parts that come with it and what those parts do. For this class we are using the Raspberry Pi 3 model B. The pi is a single board computer with all the components on one board. The point was made that these components are very similar to traditional computers and cell phones, just on a smaller scale.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Morse Code History Lesson  and Puzzle Decoding&lt;/h4&gt;
&lt;p&gt;Morse code is a type of code that is used to send telegraphic information using rhythm. Morse code uses dots and dashes to show the alphabet letters, numbers, punctuation and special characters of a given message. When messages are sent by Morse code, dots are short beeps or clicks or flashes, and dashes are longer ones.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="morse alpha" src="images/morse-code-alphabet.jpg"&gt; &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;Morse code is named after Samuel Morse, who helped invent it. Teletypewriters were invented in the early 20th century with their own codes and gradually replaced Morse code. Other types of technology that are easier to use for communication became even more common. Though it is not widely used, Morse code is still used to communicate on some amateur radios.  &lt;/p&gt;
&lt;p&gt;We learned how to encode and decode morse code, first with a pencil and paper, then by writing programs in Python on the pi; being able to decode it through text or by sound! Here is a setup with the pi connected to a breadboard (easily manipulated tool for conveying circuits) and a speaker. By connecting two jumper wires and a button on the breadboard, students wrote programs in Python to relay messages in morse through the speaker!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="morse sound" src="images/morse-pi-setup.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here is a fun morse code translator on the &lt;a href="http://morsecode.scphillips.com/translator.html"&gt;SCPhillips&lt;/a&gt; site.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Two&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/21/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Binary&lt;/h4&gt;
&lt;h5&gt;more on cryptography&lt;/h5&gt;
&lt;p&gt;We reviewed what we learned of Morse code last week and how it relates to binary i.e Encoding, and decoding. Think of Binary, 0's and 1's, as the language computers 'speak'. When you break a computer down, it is basically a whole lot of 1010101011000's. Something needs to decode this into text so that humans can easily read and understand it. Sure, "only real programmers code in binary", but that would make learning programming a little off-putting!  &lt;/p&gt;
&lt;p&gt;There are plenty of ways to learn the Binary Number system, a base two number system. In other words, this number system uses two digits: one and zero. The number system we are most familiar with, the Decimal Number system, a base ten number system. So, this system uses ten digits: 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9. Students were introduced to binary by learning binary magic tricks, a binary 'piano', and binary flashcards.&lt;/p&gt;
&lt;p&gt;Below is an example of the number 21 (in the decimal number system) and 10101 (in the binary number system) using binary flashcards and a binary piano:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="binary 21" src="images/binary-cards-piano.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Three&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;9/28/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Cryptography&lt;/h4&gt;
&lt;p&gt;A formal definition from wiki of Cryptography: the art of witting or solving code. &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; To dive into what this means, we used a Caesarian cipher, where the letter place is moved by three. This is a great tool to help understand the important concept of abstraction in computer science. Encoding and decoding this caesarian cipher exercises skills in abstract thinking where you use a symbol to represent something. &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;Here is an example bit of code we wrote using the Pythonista app:&lt;/p&gt;
&lt;p&gt;&lt;img alt="crypto" src="images/cryptography.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Here is a link to Instructor, Davis' &lt;a href="https://github.com/davismohar/CesarCipher"&gt;GitHub&lt;/a&gt; with a little more on the python program file.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Four&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/05/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;The Game of Life&lt;/h4&gt;
&lt;p&gt;The game of life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. The "game" is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves, or, for advanced "players", by creating patterns with particular properties. &lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; -Just dipping our feet in artificial intelligence. We are always trying to get computers to become as intelligent as humans. Apple's Siri and Amazon's Alexa a couple examples of our attempts.  &lt;/p&gt;
&lt;p&gt;The game of life is 'turing-complete', which means that technically, anything that could be computed, could be computed using the game of life.  &lt;/p&gt;
&lt;p&gt;An example on the Tech Em whiteboard of the Game of Life:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="gameoflife" src="images/game-of-life.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Five&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/12/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Artificial Intelligence and The Turing test&lt;/h4&gt;
&lt;p&gt;Intelligence and computers are not exactly related. On the other hand, computation and computers do. Humans have been working for a long time at bridging the gap between intelligence and computers. You are probably familiar with that work by using Apple's "Siri", Microsoft's "Cortana", or Amazon's "Alexa". Though, if you have used these devices, you've probably noticed that each one can get a lot of things wrong, or cannot perform every action you want it to. So, you can see we still have some ways to go with bringing intelligence to the "minds" of computers. Artificial Intelligence (the field), "is the study of computer systems that attempt to model and apply the intelligence of the human mind." &lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;    &lt;/p&gt;
&lt;p&gt;A British mathematician, Alan Turing is famous for inventing the mathematical model, the &lt;a href="http://www.aturingmachine.com/"&gt;Turing Machine&lt;/a&gt; (no matter the complexity, a machine that can calculate anything that is computable) in 1936. Turing asked the important question: "Can machines think?". According to him, we eventually will be able to make a computer that thinks! &lt;sup id="fnref2:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; To see if we've reached that point, we have the &lt;a href="https://en.wikipedia.org/wiki/Turing_test"&gt;Turing Test&lt;/a&gt;. This is a test to determine whether a computer is in fact, intelligent. It is a test to figure out whether a person can be fooled by a computer, into thinking the computer is another person (not a computer). &lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; After ending the discussion we completed a simple &lt;a href="http://csunplugged.org/wp-content/uploads/2014/12/unplugged-20-the_turing_test_0.pdf"&gt;Turing Test activity&lt;/a&gt; to see if the computer can fool us into thinking it is a human.  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;The Future of Computing&lt;/h4&gt;
&lt;p&gt;"What can Watson do for you?" Artificial intelligence talks continued with learning what &lt;a href="http://www.ibm.com/watson/what-is-watson.html"&gt;Watson&lt;/a&gt; is, pretty much a cognitive assistant. In other words, a machine to help humans make decisions and take action. So, it helps to increase a person's potential. Powerful stuff! It is not only essential to learn where computer science has started to where we are now, but to learn where we are headed. Learning about this, will help prepare us for using &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; to run code on Amazon's "Alexa" without the use of your own server.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Day Six&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;10/12/2016&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Soldering &amp;amp; LED Pendant&lt;/h4&gt;
&lt;p&gt;We are going to put together and code a Gemma microcontroller from Adafruit, an 8x8 LED matrix display. We'll use binary numbers, soldering techniques, and patience! Here are some tips from Wray about &lt;a href="http://blog.techemstudios.com/category/hardware.html"&gt;soldering&lt;/a&gt; and more detailed information on the &lt;a href="http://blog.techemstudios.com/led-pendant-follow-up.html"&gt;LED pendant project&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Next week, we'll put together a TV-B-Gone Kit by using soldering skills we learned from this class.  &lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;https://offgridweb.com/survival/morse-code-why-you-should-learn-it/&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Cryptography&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;http://rumkin.com/tools/cipher/caesar.php&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Zelle, John M. Python Programming: An Introduction to Computer Science. 2nd ed. Wilsonville: Franklin, Beedle &amp;amp; Associates Incorporated, 2010. Print.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;http://csunplugged.org/the-turing-test/&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Dale, Nell, and John Lewis. "Artificial Intelligence/The Turing Test." Computer Science Illuminated. 4th ed. Sudbury, MA: Jones and Bartlett, 2011. 426-27. Print.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="raspberry pi"></category><category term="create"></category><category term="coding"></category><category term="github"></category><category term="slack"></category></entry><entry><title>Hardcore Programming Camp Summer 2016</title><link href="/hardcore-programming-camp-summer-2016.html" rel="alternate"></link><published>2016-08-29T00:00:00-04:00</published><updated>2016-08-29T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-08-29:/hardcore-programming-camp-summer-2016.html</id><summary type="html">&lt;h3&gt;Summer 2016 Hardcore Programming Camp&lt;/h3&gt;
&lt;p&gt;The camp started with discussions on coding experience.. and hacking of course! This included their own written programs, refining programs, programming languages they are learning or use most and game design.&lt;/p&gt;
&lt;p&gt;Campers started on the iPads using Pythonista, an app that provides an evironemnt for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summer 2016 Hardcore Programming Camp&lt;/h3&gt;
&lt;p&gt;The camp started with discussions on coding experience.. and hacking of course! This included their own written programs, refining programs, programming languages they are learning or use most and game design.&lt;/p&gt;
&lt;p&gt;Campers started on the iPads using Pythonista, an app that provides an evironemnt for developing Python code. For campers that brought in their own laptop, they started on Python 2.7. We wrote our code on Python's editor, IDLE. We used this to create and modify programs.  We learned general terms/syntax to describe parts of our program (identifier, keyword, literal, expression, statement, conditional, function, etc.).    &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Get Familiar with Using Comments!&lt;/h4&gt;
&lt;p&gt;Students were reminded to use comments in their code as much as possible! It is important to make your program easy to understand when someone else is reading it. Using a simple 'pound sign' or 'hashtag' (#) helps to explain what you were thinking when writing your code. Additionally, using comments helps the original writer understand what exactly they were up to, or trying to achieve at the time they were writing their program. Programming is all about managing data in a computer and solving problems. Leaving comments behind for yourself or for others helps the fluidity of the whole programming process. It is easy to leave your program, come back to it, and lose the idea behind what you were attempting to accomplish! See how leaving comments can be useful?!&lt;br&gt;
Example: &lt;code&gt;print("Game Over")  #here, I'm trying to use the print function to have the program say, Game Over.&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;To break the code ice, The programmers were challenged to write a program using pythonista to have the program ask the user for input on what numbers they wanted to add, subtract, multiply or divide.&lt;br&gt;
&lt;img alt="classhc" src="images/hc-camp-hack.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;During the challenge, campers received a lecture on fundamental syntax for Python. Here are some examples:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;Mathematical&lt;/th&gt;
&lt;th align="left"&gt;Comparison&lt;/th&gt;
&lt;th&gt;Assignments&lt;/th&gt;
&lt;th align="center"&gt;Logical&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;Basic mathematic operations (plus, minus, multiply, and divide)&lt;/td&gt;
&lt;td align="left"&gt;These are used when comparing two values for extent&lt;/td&gt;
&lt;td&gt;These are used to assign values to variables&lt;/td&gt;
&lt;td align="center"&gt;For comparing two values for logic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mathematical: &lt;code&gt;+, -, *, /&lt;/code&gt;&lt;br&gt;
Comparison: &lt;code&gt;&amp;gt;, &amp;lt;, ==, !=, &amp;gt;=, &amp;lt;=&lt;/code&gt;&lt;br&gt;
Assignments: &lt;code&gt;=, +=, *=, /=, %&lt;/code&gt;&lt;br&gt;
Logical: &lt;code&gt;AND, OR, NOT&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Calculator and Random Sentence Code Challenge&lt;/h3&gt;
&lt;h4&gt;HTTP Requests and Assigning Values&lt;/h4&gt;
&lt;p&gt;This review and learning of syntax helped to uniquely tweak their code for the calculator and the next challenges, like the Random Sentence Code. During this challenge, campers were exposed to or reminded of the useful tool, lists. Lists are a great transition to understanding the concept of values and assigning certain values to variables. You can house a whole list to be assigned as one value and/or make your items in your list each have a unique value. After running the Random Sentence code, the campers noticed that we would get a lot of repeats of the nouns and verbs from our lists. We would then try to tweak the code to omit certain nouns, or try not to include any repeats. This approach would only get us so far! We learned that we can import a whole other library that contains a huge list of animals! This is also known as making an HTTP request from a site. The random sentence code we ran through is outlined below. This is from a blogpost by Wray, from the programming class &lt;a href="http://blog.techemstudios.com/programming-spring-2016.html"&gt;blog&lt;/a&gt; this past Spring &lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/wray/4e469b9d87cb8d7e2bbe.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h3&gt;Moon Weight Code Challenge&lt;/h3&gt;
&lt;h4&gt;Defining Functions&lt;/h4&gt;
&lt;p&gt;&lt;img alt="moon weight" src="images/hc-camp-moon.jpg"&gt;
&lt;img alt="closeup" src="images/hc-camp-challenge.jpg"&gt;&lt;br&gt;
If you have a few lines of code that can be reused to perform a certain task, then create a function! Think of the print function: &lt;code&gt;print("Hello World")&lt;/code&gt; -this returns &lt;code&gt;Hello World&lt;/code&gt;. It is a function to print any argument or string in the parentheses. Campers were challenged to define a function to calculate a person's weight on the moon after a certain amount of years. Assuming that a person who currently weighs more than 150lbs will gain 0.5lbs per year, while a person who weighs less will gain two pounds a year. The first few lines would like this:&lt;br&gt;
&lt;code&gt;1 def moonweight(weight, years):&lt;/code&gt;&lt;br&gt;
&lt;code&gt;2   if weight &amp;gt; 149:&lt;/code&gt;&lt;br&gt;
&lt;code&gt;3     print("you would gain 0.5 pounds every year on the moon")&lt;/code&gt;  &lt;br&gt;
&lt;code&gt;4   if weight &amp;lt; 149:&lt;/code&gt;  &lt;br&gt;
&lt;code&gt;5     print("you would gain 2 pounds every year on the moon")&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Choose Your Own Adventure&lt;/h3&gt;
&lt;h4&gt;Essentially Making a Decision Tree&lt;/h4&gt;
&lt;p&gt;A "Decision Tree" is one of many ways to display an algorithm, a step-by-step process for reaching a result or solution to a problem. The first decision "branches" into two possibilities, each of which is another decision. By looking at the whole, it forms a tree, a decision tree! The procedural flow of traveling down the tree from the very first decision is nicely implemented with the Choose Your Adventure challenge camper completed using Python/Pythonista. You can compare this to a series of game books, Choose Your Own Adventure by &lt;a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure"&gt;Edward Packard&lt;/a&gt; and the text adventure, &lt;a href="https://en.wikipedia.org/wiki/Zork"&gt;Zork&lt;/a&gt; or tons of other written books where the reader commandeers the actions of the protagnoist; leading to distinct endings.  &lt;/p&gt;
&lt;p&gt;To get the challenge underway, the camp discussed how a decision tree works and explored examples. Students started their program by sketching on paper their ideas for their game's procedure flow to ultimately implement in their program. This challenge applies advanced branching logic and allows students to design their algorithm by literally drawing their program flow. The nodes in the tree are decision points -rooted in the very first decision. A first decision point could be, you land on Mars and you spot something in the distance. From here, you may have a few choices (or nodes) to choose from: Leave Mars, Go to Object, or Scan the Object. You can choose Go to Object, and you arrive at another decision point or node in the tree and the flow continues. Take a look at this example displayed on paper and translated into an interactive Python program. Try contrasting the decision tree on paper to the written program on python.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="land on mars" src="images/hc-wray-example-mars.jpg"&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/wray/48cef3a6766ece0d8370.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;sup id="fnref2:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;p&gt;This exercise replicates modeling decisions and their outcomes. These outcomes can also include chance event outcomes. Campers mapped out all the paths based on the decision made at each node.  &lt;/p&gt;
&lt;p&gt;Decision trees are used in the real world all the time. Call Center Reps use these as print-outs or portrayed in apps. For example, tech hotlines, their script will start with "is the computer plugged in" and if the person answers yes, they take one route or if "no" they take another route. They follow the decision tree to help them assist the customer in troubleshooting problems.  &lt;/p&gt;
&lt;p&gt;Another system that models a decision tree, identifying bugs. Really?? Yes. A dichotomous key, a tool used to identify something in the natural world is a great example to model decisions. Take a look at how a dichotomous key can be used by an Entomologist (someone who studies bugs; let's call him Steve) to identify something they collected from a stream.   &lt;/p&gt;
&lt;p&gt;To use this key, Steve starts at the first decision point: is it something that has a shell or does not have a shell? This question knocks either With Shell or No Shell out of contention to be the thing's identity. If the condition is false, it is not a snail or clam, so Steve would then arrive at the next node: Does it Have a Backbone or No Backbone. If that condition is true, then he would arrive at another subnode, and his search continues for the bug's identity by following the outcome of each node until he arrives at its most likely identity and, ta-da, Steve knows the identity of the bug. If Steve was so inclined, he could look to another key to determine what Phylum, Class, Order, Family, Genus and finally species that bug belongs to. But, we'll save that story for later! Snapshot of a dichotomous key:&lt;br&gt;
&lt;img alt="descision tree" src="images/decision-tree.jpg"&gt;&lt;br&gt;
&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Object-Oriented Design&lt;/h3&gt;
&lt;h4&gt;More on Trees...&lt;/h4&gt;
&lt;p&gt;Python is an object-based language. Using objects helps to organize code in a program by putting things into compartments to make complex ideas easier to understand. In Python, objects are defined by classes. So let's now think of Class as being the definition. Classes are a way to 'model' things (or data). We classify things, but the objects are the instantiation of that class. They are actual things that belong to that class. So, in a class hierarchy, everything in the hierarchy (tree) is a class. As you go down (&lt;em&gt;green arrows in the diagram below&lt;/em&gt;) you are defining sub-classes. And to check yourself, you can trace back "up" (&lt;em&gt;blue arrows in the diagram below&lt;/em&gt;) the hierarchy using the phrase "is a". So, a dog "is a" mammal, and an animal, etc. But, a dog is still a collection of attributes and behaviours that "define" a dog. We'll see these attributes later. And once you see a dog chewing on a chew toy... the actual "embodiment" of the definition, that is the object.  &lt;br&gt;
&lt;img alt="representation of hierarchy from python for kids! book" src="images/class-hierarchy.jpg"&gt;&lt;br&gt;
&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;h4&gt;Object-Oriented - Lists&lt;/h4&gt;
&lt;p&gt;In code, we define a class once. When we want to leverage the code in that class we create an "instance" of that class -the object. We learned that Python does a lot of this on the fly - with the built-in concept of a list, for example. Python has already defined (coded) what a list is, so when we wrote a line of code: l = [ ] . You are actually creating a new instance of a List class... a list object. And with that object you get all the nice pre-coded methods that can be applied to the list. The data within the list is often abstracted within these methods. In the example below, I made a grocery list named, grocery_list as well as some methods I can call on my list.   &lt;/p&gt;
&lt;h6&gt;Note: &lt;em&gt;the plus signs (+) will indicate the tabs (or spaces!!!) to show indentation for replicating writing lines of code in Python.&lt;/em&gt;&lt;/h6&gt;
&lt;h6&gt;helpful hint: convert tab key presses into spaces&lt;/h6&gt;
&lt;p&gt;For example:  &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; grocery_list = [eggs, milk, dandruff shampoo, 1 holy grail, 2 african swallows, 1 coconut]&lt;/code&gt; &lt;br&gt;
++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(grocery_list)&lt;/code&gt;&lt;br&gt;
++&lt;code&gt;[eggs, milk, dandruff shampoo, 1 holy grail, 2 african swallows, 1 coconut]&lt;/code&gt; &lt;br&gt;
++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(grocery_list[3])&lt;/code&gt;&lt;br&gt;
++&lt;code&gt;1 holy grail&lt;/code&gt; 
++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(grocery_list[4:5])&lt;/code&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Object-Oriented - Using Classes and Objects&lt;/h4&gt;
&lt;p&gt;Let's go back to our dog and chew toy model. Remember, in a class hierarchy, everything in the hierarchy (tree) is a class.  &lt;/p&gt;
&lt;p&gt;It might help to look back at the diagram of the class hierarchy &lt;a href="#Object-Oriented Design"&gt;here&lt;/a&gt;&lt;br&gt; &lt;/p&gt;
&lt;p&gt;So, let's put that model into Python starting from the top. Many objects can be created from a class by The definition (code) given by the class. Just like with function, we only have to define the class once to be used over and over again every time you need an object of that class. To define the class we use the keyword, class followed by the name:  &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class Things:&lt;/code&gt;&lt;br&gt;
+ + + + + &lt;code&gt;def everything_in_the_world&lt;/code&gt;&lt;br&gt;
+ + + + + + + &lt;code&gt;print('I am a function of the class Things)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Above, we just defined the class 'things' as everything in the world. &lt;/p&gt;
&lt;p&gt;We can add more classes that stem from this top class. Below, we'll add Nonliving and Living:  &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class Nonliving(Things):&lt;/code&gt;&lt;br&gt;
++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class Living(Things):&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We'll do the same for chew toys, which is a sub-class of nonliving:&lt;br&gt;
++`&amp;gt;&amp;gt;&amp;gt; class Chew_Toys(Nonliving):  &lt;/p&gt;
&lt;p&gt;And we can go on down the other side of the tree the same way.  &lt;/p&gt;
&lt;p&gt;Let's now throw some things into those classes (or add objects to those classes! How about we have a dog named Fighto. Python does not know on its own that Fighto is a dog. So, to have Python recognize that Fighto is one we'll call Fighto an object (or instance) of the class Dogs.  &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fighto = dogs()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;We just used code to tell Python to create an object in the Dogs class and assign it (=) to a variable known as fighto. Recall that we used the class name followed by parentheses just like a function. To make our objects do things, we must define functions that can be harnessed with the objects in that class -just like we did earlier when we defined our class Things. To make our object fighto of the class dogs do stuff, we'll add characteristics and define functions for the class:  &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class Dogs(Mammals):&lt;/code&gt;&lt;br&gt;
+ + + + + &lt;code&gt;def humans_best_friend(self):&lt;/code&gt;&lt;br&gt;
+ + + + + + + &lt;code&gt;print('I am human's best friend')&lt;/code&gt;&lt;br&gt;
+ + + + + &lt;code&gt;def humans_best_friend(self):&lt;/code&gt;&lt;br&gt;
+ + + + + + + &lt;code&gt;print('I am human's best friend')&lt;/code&gt;&lt;br&gt;
+ + + + + &lt;code&gt;def play_fetch(self):&lt;/code&gt;&lt;br&gt;
+ + + + + + + &lt;code&gt;print('Get the stick!)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Now that we've created the fighto object and defined functions and characterstics for that object, we can call the functions and have fighto actually do stuff! To call the functions on an object, use the dot operator (.) and the function name.&lt;sup id="fnref2:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; We can even add another object to the class Dogs and that new object will assume the properties of that class w specified earlier:    &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fighto =  Dogs()&lt;/code&gt;  &lt;br&gt;
++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; spike = Dogs()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fighto.humans_beast_friend()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;I am human's best friend&lt;/code&gt;&lt;br&gt;
++&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; spike.play_fetch()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Get the stick!&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;To recap a little on object-oriented... Take how we classify 'things'. &lt;code&gt;Things&lt;/code&gt;, being the &lt;code&gt;Class&lt;/code&gt;. So, &lt;code&gt;class Things&lt;/code&gt; is what comprises everything under that; like the classes, living and nonliving (sub-classes of Things). The class Animals is a sub-class of class Living. The class Mammals is a sub-class of class Animals. The class Dogs is a sub-class of class Mammals, and we added a couple objects (fighto and spike) that we added characteristics and defined functions for. Again, to check yourself, you can trace back "up" the hierarchy using the phrase "is a". So, a dog "is a" mammal, and an animal, etc. But, a dog is still a collection of attributes and behaviours that "define" a dog. And once you see a dog playing fetch... the actual "embodiment" of the definition, that is the object. When you created lists and dictionaries (maps) like we did earlier in the camp, object-oriented programming is the same, it is another way to logically manage data and a way to program things to make sense. Remember, Python is an object oriented programming language.&lt;sup id="fnref3:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Hackathon&lt;/h3&gt;
&lt;h4&gt;Converting More Problems to Programmed Solutions&lt;/h4&gt;
&lt;p&gt;Of course, there must be a hackathon to complete the camp! Campers were tasked with a series of challenges using matplotlib. Campers used this as a tool to graph different lists. Specifically to generate a &lt;a href="https://www.mathsisfun.com/numbers/fibonacci-sequence.html"&gt;Fibonacci Sequence!&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="images" src="images/hc-camp-woz.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Practice Makes Perfect!&lt;/h3&gt;
&lt;p&gt;Just like other subjects in school, practice makes perfect! So, be sure to continue coding everyday; whether it be using game designing programs or simply running through online tutorials. You can do this outside and you don't even have to do with a computer! Try to think of how things can be classified around you. For instance, try to use object-oriented programming to logically classify plants, animals, and bugs you may encounter. These things do stuff, they have functions! A great resource is the &lt;a href="http://blog.techemstudios.com/programming-spring-2016.html"&gt;Tech Em blog&lt;/a&gt; posted during the Homeschool Programming Class from this spring. You can start from the beginning and follow along with the posted assignments. Here you will find similar challenges from the camp like the random sentence code and moon weight challenge. You can also take a look at the books I have cited below. When designing a game, you are essentially writing a program. A useful app to use is Hyperpad, which is now free! This app is great for understanding fundamentals of coding and you can immediately see how well your game will play as you design. This mirrors what we did in Pythonista and Python when we would write our code using IDLE, Pythons editor; we are able to run the code we had just written to see what our code could perform and to see the bugs we need to fix.  &lt;/p&gt;
&lt;h3&gt;Be sure to check out our &lt;a href="http://techemstudios.com/fall-classes.html"&gt;Fall Schedule at TechEmStudios.com!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have a great rest of the Summer!!!  &lt;/p&gt;
&lt;script type="text/javascript"&gt;
  // When the document is fully rendered...
  $(document).ready(function() {
    // ...select all header elements...
    $('h1, h2, h3, h4, h5').each(function() {
      // ...and add an id to them corresponding to their 'titles'
      $(this).attr('id', $(this).html());
    });
  });
&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Briggs, Jason R. "How to Use Classes and Objects." Python for Kids: A Playful Introduction to Programming. 6th ed. N.p.: William Pollock, 2013. 94-108. Print.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref3:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;http://midmichigannatureandscience.blogspot.com/2013/04/aquatic-ecology-and-mother-earth-week.html&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Zelle, John M. Python Programming: An Introduction to Computer Science. 2nd ed. Wilsonville: Franklin, Beedle &amp;amp; Associates Incorporated, 2010. Print.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;http://blog.techemstudios.com/programming-spring-2016.html&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="techcamp"></category><category term="computer science"></category><category term="python"></category><category term="hackathon"></category></entry><entry><title>Notes On Setting Up Your Robot</title><link href="/notes-on-setting-up-your-robot.html" rel="alternate"></link><published>2016-08-22T00:00:00-04:00</published><updated>2016-08-22T00:00:00-04:00</updated><author><name>Josef Seiler and Chris Kefalas</name></author><id>tag:None,2016-08-22:/notes-on-setting-up-your-robot.html</id><summary type="html">&lt;h2&gt;Some Notes on Configuring the BombiniBot&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;Three Preceding Steps to Control your BombiniBot Robot&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Scratch based programming environment&lt;/strong&gt; from &lt;a href="http://www.mindsensors.com/content/76-bombinibot-assembly-instructions-and-downloads"&gt;mindsensors.com&lt;/a&gt; and choose the windows link or the mac link depending on your operating system.   &lt;/p&gt;
&lt;p&gt;i) This will download as a compressed (zip) file, so unzip the folder …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2&gt;Some Notes on Configuring the BombiniBot&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;Three Preceding Steps to Control your BombiniBot Robot&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Scratch based programming environment&lt;/strong&gt; from &lt;a href="http://www.mindsensors.com/content/76-bombinibot-assembly-instructions-and-downloads"&gt;mindsensors.com&lt;/a&gt; and choose the windows link or the mac link depending on your operating system.   &lt;/p&gt;
&lt;p&gt;i) This will download as a compressed (zip) file, so unzip the folder once it is done downloading.&lt;br&gt;
  i) The folder will shown as 'BombiniBotWin' or 'BombiniBotMac'  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the Arduino drivers &lt;a href="http://www.mindsensors.com/stem-with-robotics/43-bombinibot-kit-teach-robotics-and-scratch-programming"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;i) Scroll down till you see &lt;strong&gt;DOWNLOAD&lt;/strong&gt;, select this, then select the download file for Arduino CH430 Drivers. Unzip the folder once it has completed downloading.&lt;br&gt;
  i) This will greatly help with pairing the robot successfully.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Arduino Environment&lt;/strong&gt; on &lt;a href="http://www.mindsensors.com/content/76-bombinibot-assembly-instructions-and-downloads"&gt;mindsensors.com&lt;/a&gt; Unzip the folder once it has completed downloading.  &lt;/p&gt;
&lt;p&gt;i) You will use this when programming your Arduino Compatible Board. 
  i) The folder will be shown as 'arduino-1.6.3-windows' or 'arduino-1.6.3-mac'  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Connect your Robot to Bluetooth:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Turn your robot on. &lt;em&gt;If the LED light on your is blinking fast, your robot is ready to pair. If the LED is solid red or is blinking slow, follow the troubleshooting steps below&lt;/em&gt;  &lt;ul&gt;
&lt;li&gt;On your computer, open Settings. &lt;/li&gt;
&lt;li&gt;Navigate to Devices to get to bluetooth. Make sure bluetooth is 'On'. &lt;/li&gt;
&lt;li&gt;Pair your robot to the computer. Your robot number is specified on the robot itself on the top board, the BombiniBot board.    &lt;/li&gt;
&lt;li&gt;Under Related Settings, click More Bluetooth Options and select COM Ports. Note the COM Port number for the Outgoing Direction. (I suggest writing the COM Port down for reference).  &lt;/li&gt;
&lt;li&gt;Once you have paired your robot and noted the Outgoing COM Port, open the &lt;strong&gt;bbbpanel&lt;/strong&gt; found in the BombiniBot folder you downloaded previously.&lt;ul&gt;
&lt;li&gt;Under BombiniBot Port: select the correct Outgoing COM Port you noted earlier.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select Connect  (If connected, your robot's LED light should now be green)  &lt;/li&gt;
&lt;li&gt;Once connected, select Run Scratch  &lt;ul&gt;
&lt;li&gt;With the scratch based programming environment that is open, you can add instructions for your robot by dragging and dropping them.  &lt;/li&gt;
&lt;li&gt;To have your robot carry out these instructions, click the green flag at the top right of the window and watch your robot perform the steps you told it to perform!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Run Your Robot using Arduino:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Turn your robot off. &lt;em&gt;If the LED light on your is blinking fast, your robot is ready to pair. If the LED is solid red or is blinking slow, follow the troubleshooting steps below&lt;/em&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect your robot to your computer with a Printer/Device cable. &lt;ul&gt;
&lt;li&gt;Make sure your robot is turned off and the battery holder unplugged while it is connect to your computer.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If your robot does not show its LED light as green, follow the steps for trouleshooting in the next section.  &lt;/li&gt;
&lt;li&gt;Run Arduino found in the 'arduino-1.6.3-windows' or 'arduino-1.6.3-mac' folder you downloaded previously.  &lt;/li&gt;
&lt;li&gt;Make sure to include the BombiniBot library by navigating to Sketch.  &lt;/li&gt;
&lt;li&gt;From here, you can add lines of code for the robot to run (without having it connected to bluetooth)  &lt;/li&gt;
&lt;li&gt;This is how we coded the robots to move autonomously.  &lt;/li&gt;
&lt;li&gt;The examples provided in the 'arduino-1.6.3' folder.&lt;ul&gt;
&lt;li&gt;To do this, select the BombiniBot folder under examples and select the examples to be opened with Arduino.&lt;/li&gt;
&lt;li&gt;From here, we were introduced to having our robots move autonomously. We tweaked the arudino code examples to uniquely maneuver our robots.   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To Upload the arduino code for your robot to carry out the instructions, click Upload. Your robot should show its LED light as green. Uplug the robot. Connect the battery holder and turn on the power to the robot.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Troubleshooting your Robot!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If your robot's LED light is a solid red, follow these steps:  &lt;ul&gt;
&lt;li&gt;Open up your command prompt (on Windows) or your Terminal (On Mac) &lt;ul&gt;
&lt;li&gt;For Windows I would suggest opening the 'Power Shell' -you can use almost all of the same commands as in the Terminal on Mac.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the BombiniBotWin or BombiniBotMac folder  &lt;/li&gt;
&lt;li&gt;For Windows, type prog.bat COM17 (or the COM Port number you noted earlier)  &lt;/li&gt;
&lt;li&gt;For Mac, type prog.bash COM17 (or the COM Port number you noted earlier)  &lt;/li&gt;
&lt;li&gt;Then hit enter  &lt;/li&gt;
&lt;li&gt;After this program runs, your robot will show a green light (if you have your robot directly plugged in to run arduino) or will blink red (if you are trying to connect via bluetooth) and is now ready to accept instructions!  &lt;/li&gt;
&lt;li&gt;Now go back to Arduino and upload the code  &lt;br&gt;
&lt;a href="https://www.youtube.com/embed/BQvLqbQ0q_Q"&gt;Follow the steps in this video link to run the prog.bash/prog.bat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further issues could be due to the 'whiskers' or antennae on the robot.&lt;/p&gt;
&lt;p&gt;From the mindsensors.com overview of the BombiniBot, here is a close-up of the whiskers' location and a bit on what they do&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="whiskers" src="images/robot-whiskers.jpg"&gt;
&lt;img alt="whiskers testing" src="images/robot-auto.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Hardware Checks &amp;amp; Double Checks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Verify all of your connections are solid, and cables secured in their correct homes.   &lt;/li&gt;
&lt;li&gt;Make sure your batteries are inserted into the pack correctly, facing the right way.  &lt;/li&gt;
&lt;li&gt;Confirm you've fully attached the battery connector to the battery pack. Secure the battery back on the chassis, and make sure it isn't going to slide out!  &lt;/li&gt;
&lt;li&gt;Pay attention to your whiskers, and make sure they aren't touching any parts of the PCB board. You can loosen the screws to realign them, and then tighten the screws back up to secure them.  &lt;/li&gt;
&lt;li&gt;When you're finished tinkering with your BombiniBot make sure to switch off the power!  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;em&gt;mindsensors.com&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="techcamp"></category><category term="computer science"></category><category term="robot"></category></entry><entry><title>Robot Camp</title><link href="/robot-camp.html" rel="alternate"></link><published>2016-08-22T00:00:00-04:00</published><updated>2016-08-22T00:00:00-04:00</updated><author><name>Josef Seiler Chris Kefalas</name></author><id>tag:None,2016-08-22:/robot-camp.html</id><summary type="html">&lt;h2&gt;Summer 2016 Robot Camp&lt;/h2&gt;
&lt;p&gt;Students started their robot camp with new friends and a plethora of unattached hardware: motors, wires, screws, chasis plates, battery holders and more!  &lt;/p&gt;
&lt;p&gt;The first part of camp entailed assembling all these parts using screwdrivers and determination. As the campers were guided through the process of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Summer 2016 Robot Camp&lt;/h2&gt;
&lt;p&gt;Students started their robot camp with new friends and a plethora of unattached hardware: motors, wires, screws, chasis plates, battery holders and more!  &lt;/p&gt;
&lt;p&gt;The first part of camp entailed assembling all these parts using screwdrivers and determination. As the campers were guided through the process of putting together their BombiniBots, they were given lessons on each parts' purpose in the make of the robot: the function of each wire connection, which screws held what, and which motor turned this way and that, and how.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="assemble" src="images/robot-parts.jpg"&gt;
&lt;img alt="guide" src="images/robot-collage.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Once completely assembled and with the help of instructors and interns, campers hooked up their robots to computers via bluetooth or directly and made adjustments to their bots accordingly to ensure proper connections. They learned they could control the movements of their robots by having them connect to their computers wirelessly (bluetooth) or directly connect them to upload written code.  &lt;/p&gt;
&lt;p&gt;When the campers' bots paired using bluetooth, the robot movements could be controlled using a Scratch based programming environment. This is a drag-and-drop style of programming. To familiarize themselves with this way of coding, campers learned similar programming concepts by using two other apps, Hopscotch and Lightbot.  &lt;/p&gt;
&lt;p&gt;From provided lessons, campers learned the basics of coding/programming to make coding their robot's movements a breeze. For these robots, a program is a series of instructions written (or 'dragged-and-dropped') to have the robot move in particular directions; also, to complete various tasks! These tasks ranged from escaping a maze of desktop computers and TRS-80s, to racing another robot to save a 3D printed robot figure!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="trs" src="images/robot-TRS.jpg"&gt;
&lt;img alt="maze" src="images/robot-share.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;When connected via bluetooth, students can control their robots using the scratch based program. They set up instructions to have keystrokes control its movements, or they set up instructions to have the robots complete a list of commands.  &lt;/p&gt;
&lt;p&gt;When the robots are connected directly to the computer, code can be uploaded straight to the robots' arduino compatible board. Once uploaded, the robot was turned on and it was able to run through each step of the uploaded code. This was useful when having the robots move autonomously, i.e. by themselves. This is the 'Roaming' code example. While compelting this program, if the robot's whiskers collided with an object, it would make the adjustments neccessary to move around that object. This is similar to how autonomous vacuum cleaners do their job. While navigating through the maze autonomously, campers had to tweak their code to have it complete the maze smoothly.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="tinker" src="images/robot-tinker.jpg"&gt;
&lt;img alt="mazeit" src="images/robot-rev.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Mini Overview of your BombiniBot Robot&lt;/h3&gt;
&lt;p&gt;BombiniBot has two motors and two tentacles. You can control the speed and direction of motors and read the tentacle values through your program.
It also has an LED on top. You can control the blinking of this LED from your Scratch program. (You can turn it ON, blink it at different speeds or turn it OFF).  &lt;/p&gt;
&lt;p&gt;BombiniBot runs on 6 AA batteries. The battery holder is mounted with Velcro in the BombiniBot belly.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Turning your Robot&lt;/h3&gt;
&lt;p&gt;You can use several strategies for turning:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can run one motor slower than the other, and as a result the robot will turn in the direction of the slower motor.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For sharper turn: stop one motor and run the other motor, this results in a sharper turn in the direction of stopped motor.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Precise sharp turn: run one motor in forward direction and the other in reverse direction, this results in the BombiniBot turning sharply in the direction of the reverse motor.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Steps to take to continue coding your robot at home are outlined below:&lt;/strong&gt;   &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Three Preceding Steps to Control your BombiniBot Robot&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Scratch based programming environment&lt;/strong&gt; from &lt;a href="http://www.mindsensors.com/content/76-bombinibot-assembly-instructions-and-downloads"&gt;mindsensors.com&lt;/a&gt; and choose the windows link or the mac link depending on your operating system.   &lt;/p&gt;
&lt;p&gt;i) This will download as a compressed (zip) file, so unzip the folder once it is done downloading.&lt;br&gt;
  i) The folder will shown as 'BombiniBotWin' or 'BombiniBotMac'  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the Arduino drivers &lt;a href="http://www.mindsensors.com/stem-with-robotics/43-bombinibot-kit-teach-robotics-and-scratch-programming"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;i) Scroll down till you see &lt;strong&gt;DOWNLOAD&lt;/strong&gt;, select this, then select the download file for Arduino CH430 Drivers. Unzip the folder once it has completed downloading.&lt;br&gt;
  i) This will greatly help with pairing the robot successfully.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Arduino Environment&lt;/strong&gt; on &lt;a href="http://www.mindsensors.com/content/76-bombinibot-assembly-instructions-and-downloads"&gt;mindsensors.com&lt;/a&gt; Unzip the folder once it has completed downloading.  &lt;/p&gt;
&lt;p&gt;i) You will use this when programming your Arduino Compatible Board. 
  i) The folder will be shown as 'arduino-1.6.3-windows' or 'arduino-1.6.3-mac'  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;Connect your Robot to Bluetooth:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Turn your robot on. &lt;em&gt;If the LED light on your is blinking fast, your robot is ready to pair. If the LED is solid red or is blinking slow, follow the troubleshooting steps below&lt;/em&gt;  &lt;ul&gt;
&lt;li&gt;On your computer, open Settings. &lt;/li&gt;
&lt;li&gt;Navigate to Devices to get to bluetooth. Make sure bluetooth is 'On'. &lt;/li&gt;
&lt;li&gt;Pair your robot to the computer. Your robot number is specified on the robot itself on the top board, the BombiniBot board.    &lt;/li&gt;
&lt;li&gt;Under Related Settings, click More Bluetooth Options and select COM Ports. Note the COM Port number for the Outgoing Direction. (I suggest writing the COM Port down for reference).  &lt;/li&gt;
&lt;li&gt;Once you have paired your robot and noted the Outgoing COM Port, open the &lt;strong&gt;bbbpanel&lt;/strong&gt; found in the BombiniBot folder you downloaded previously.&lt;ul&gt;
&lt;li&gt;Under BombiniBot Port: select the correct Outgoing COM Port you noted earlier.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select Connect  (If connected, your robot's LED light should now be green)  &lt;/li&gt;
&lt;li&gt;Once connected, select Run Scratch  &lt;ul&gt;
&lt;li&gt;With the scratch based programming environment that is open, you can add instructions for your robot by dragging and dropping them.  &lt;/li&gt;
&lt;li&gt;To have your robot carry out these instructions, click the green flag at the top right of the window and watch your robot perform the steps you told it to perform!  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Run Your Robot using Arduino:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Turn your robot off. &lt;em&gt;If the LED light on your is blinking fast, your robot is ready to pair. If the LED is solid red or is blinking slow, follow the troubleshooting steps below&lt;/em&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect your robot to your computer with a Printer/Device cable. &lt;ul&gt;
&lt;li&gt;Make sure your robot is turned off and the battery holder unplugged while it is connect to your computer.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If your robot does not show its LED light as green, follow the steps for trouleshooting in the next section.  &lt;/li&gt;
&lt;li&gt;Run Arduino found in the 'arduino-1.6.3-windows' or 'arduino-1.6.3-mac' folder you downloaded previously.  &lt;/li&gt;
&lt;li&gt;Make sure to include the BombiniBot library by navigating to Sketch.  &lt;/li&gt;
&lt;li&gt;From here, you can add lines of code for the robot to run (without having it connected to bluetooth)  &lt;/li&gt;
&lt;li&gt;This is how we coded the robots to move autonomously.  &lt;/li&gt;
&lt;li&gt;The examples provided in the 'arduino-1.6.3' folder.&lt;ul&gt;
&lt;li&gt;To do this, select the BombiniBot folder under examples and select the examples to be opened with Arduino.&lt;/li&gt;
&lt;li&gt;From here, we were introduced to having our robots move autonomously. We tweaked the arudino code examples to uniquely maneuver our robots.   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To Upload the arduino code for your robot to carry out the instructions, click Upload. Your robot should show its LED light as green. Uplug the robot. Connect the battery holder and turn on the power to the robot.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Troubleshooting your Robot!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If your robot's LED light is a solid red, follow these steps:  &lt;ul&gt;
&lt;li&gt;Open up your command prompt (on Windows) or your Terminal (On Mac) &lt;ul&gt;
&lt;li&gt;For Windows I would suggest opening the 'Power Shell' -you can use almost all of the same commands as in the Terminal on Mac.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to the BombiniBotWin or BombiniBotMac folder  &lt;/li&gt;
&lt;li&gt;For Windows, type prog.bat COM17 (or the COM Port number you noted earlier)  &lt;/li&gt;
&lt;li&gt;For Mac, type prog.bash COM17 (or the COM Port number you noted earlier)  &lt;/li&gt;
&lt;li&gt;Then hit enter  &lt;/li&gt;
&lt;li&gt;After this program runs, your robot will show a green light (if you have your robot directly plugged in to run arduino) or will blink red (if you are trying to connect via bluetooth) and is now ready to accept instructions!  &lt;/li&gt;
&lt;li&gt;Now go back to Arduino and upload the code  &lt;br&gt;
&lt;a href="https://www.youtube.com/embed/BQvLqbQ0q_Q"&gt;Follow the steps in this video link to run the prog.bash/prog.bat&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further issues could be due to the 'whiskers' or antennae on the robot.&lt;/p&gt;
&lt;p&gt;From the mindsensors.com overview of the BombiniBot, here is a close-up of the whiskers' location and a bit on what they do&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="whiskers" src="images/robot-whiskers.jpg"&gt;
&lt;img alt="whiskers testing" src="images/robot-auto.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Hardware Checks &amp;amp; Double Checks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Verify all of your connections are solid, and cables secured in their correct homes.   &lt;/li&gt;
&lt;li&gt;Make sure your batteries are inserted into the pack correctly, facing the right way.  &lt;/li&gt;
&lt;li&gt;Confirm you've fully attached the battery connector to the battery pack. Secure the battery back on the chassis, and make sure it isn't going to slide out!  &lt;/li&gt;
&lt;li&gt;Pay attention to your whiskers, and make sure they aren't touching any parts of the PCB board. You can loosen the screws to realign them, and then tighten the screws back up to secure them.  &lt;/li&gt;
&lt;li&gt;When you're finished tinkering with your BombiniBot make sure to switch off the power!  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Challenges During the Camp:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Challenge One:&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;Get yourself familiar with Scratch, and the different commands you can issue your robot. For your first challenge, navigate through the obstacle course. Program one long Scratch program to make it through the whole course.  &lt;/p&gt;
&lt;p&gt;If you are having trouble, trying using a pencil, and paper and writing down and drawing the route your robot will need to take to navigate the course. As well as making sure to test your program as you go along to work out any of the bugs early on!  &lt;/p&gt;
&lt;p&gt;Bonus: Navigate through the obstacle course, turn around, and navigate back through it returning to where you started!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="go" src="images/robot-race.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Challenge Two:&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;Using the Arduino IDE, load up the Roam example program onto your BombiniBot. This program makes your Bombini roam anywhere until it bumps into something, which triggers it to back up, and continue on it's path.   &lt;/p&gt;
&lt;p&gt;Currently when it backs up, it will back up in the same direction, no matter which whisker was triggered.  &lt;/p&gt;
&lt;p&gt;Program your Bombini to back up to the left when the left whisker is triggered, and to the right when the right whisker is triggered.  &lt;/p&gt;
&lt;p&gt;Bonus: Switch it around so left reverses right, and right reverses left! Also try to incorporate a 360 into your reverse algorithm!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope our campers enjoy their robots and have a great rest of the summer!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="group" src="images/robot-group-1.jpg"&gt;
&lt;img alt="group2" src="images/robot-group-silly.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Thanks!  &lt;/p&gt;
&lt;p&gt;The Tech Em Studios Team  &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;em&gt;mindsensors.com&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="techcamp"></category><category term="computer science"></category><category term="robot"></category></entry><entry><title>Minecraft in 3D Camp</title><link href="/minecraft-in-3d-camp.html" rel="alternate"></link><published>2016-08-19T00:00:00-04:00</published><updated>2016-08-19T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-08-19:/minecraft-in-3d-camp.html</id><summary type="html">&lt;h2&gt;Summer 2016 Minecraft in 3D&lt;/h2&gt;
&lt;p&gt;The camp entailed Minecraft team-build challenges, 3D design and printing, hunger games bouts on a unique server created by Tech Em, and building computer-like logic gates with redstone!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="3d in minecraft" src="images/minecraft-3d-printing-3.jpg"&gt;  &lt;/p&gt;
&lt;h3&gt;Build Challenges&lt;/h3&gt;
&lt;p&gt;The camp was kicked off with a couple build challenges to show off minecraft skills …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Summer 2016 Minecraft in 3D&lt;/h2&gt;
&lt;p&gt;The camp entailed Minecraft team-build challenges, 3D design and printing, hunger games bouts on a unique server created by Tech Em, and building computer-like logic gates with redstone!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="3d in minecraft" src="images/minecraft-3d-printing-3.jpg"&gt;  &lt;/p&gt;
&lt;h3&gt;Build Challenges&lt;/h3&gt;
&lt;p&gt;The camp was kicked off with a couple build challenges to show off minecraft skills. The first challenge: students built their best haunted house in minecraft. These designs made hairs on the neck come to full attention! Then onto a challenge to build a national (or international) monument by working in teams of two or more. Designs included the White House, Abraham Lincoln memorial, the empire state building, the Arc De Triomphe and the National Monument.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;3D Printing&lt;/h3&gt;
&lt;p&gt;To get the '&lt;em&gt;3D&lt;/em&gt;' in Minecraft in 3D camp underway, the campers learned what 3D printing is all about. A dimension is basically a way to measure something, like height or width. A comprehensive way to understand dimensions by Tech Em instructor, Davis: For something to have zero dimensions, there is really no way to provide measurements for it; think of a drawing a simple dot. Now add another dot next to your original dot and connect these dots with a line. We now have a way to measure this, using length (&lt;strong&gt;OR&lt;/strong&gt; height). Now draw a few more dots with connecting lines to make a square with two dimensions; length &lt;strong&gt;and&lt;/strong&gt; height. Draw a few more dots with some angled lines to make a cube with three dimensions;length, height, width. &lt;/p&gt;
&lt;p&gt;&lt;img alt="dimensions" src="images/dimensions.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The 3D printing process starts with a 3D model on a computer. In our case, the campers built their 3D model in Minecraft on a laptop and converted that file of the minecraft build to one the printer could understand, STL (for example: My-3D-print-file.stl). This file is then sent to a 3D printer to print out their model as an object they can take home!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Set" src="images/minecraft-collab.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Using Redstone and Other Minecraft Items to Build Switching Devices&lt;/h3&gt;
&lt;p&gt;The campers switched gears by learning how to build simple binary logic gates using the famous, redstone in minecraft. To start things off, there was a lecture given on the binary number system vs. the decimal number system.
&lt;img alt="minecraft logic" src="images/minecraft-screen-gate.jpg"&gt;&lt;br&gt;
The number system most of us are familiar with, the decimal number system, uses ten digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). For the binary number sytem, there are only two digits (zero and one), so it is referred to as Base-2 (hence the 'bi' in binary). Computers store data using these zeros and ones. The more switches you add together, the more 0's and 1's you can render. We learned that 0 is equal to OFF or FALSE, and 1 is equal to ON or TRUE. A binary digit is also known as a "bit" (sound familiar?), this correlates with a &lt;em&gt;switch&lt;/em&gt; in a circuit of a computer.    &lt;/p&gt;
&lt;p&gt;Campers built a few binary logic gates (AND, OR, NOT gates) with redstone, redstone torch, redstone lamp, repeaters, and a lever in their inventory. The lever is used as our &lt;em&gt;switch&lt;/em&gt;. The lever has two states, ON or OFF (1 or 0) and is used to provide a current or send a signal through the redstone dust. Think of the redstone dust as a place for the current to run, like a wire of sorts. From what was said before, the more switches you add the more 0's and 1's you can supply; consonantly, when we begin to connect these gates together, we can make circuits. In minecraft, increasing the amount of redstone logic gates increases the amount of functions you want it to do (like opening gates or even creating elevators). Mirroring computer logic to increase functionality and memory. Below is an image to show the diagrams and their associated truth tables the campers learned this past week. These truth tables show the switching logic for each gate the campers learned to build.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="logic gates" src="images/logic-gates.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The levers portrayed the input while the redstone lamp acted as the output -just like a light switch and the light source it controls. &lt;em&gt;Learning binary logic gates helps markedly in grasping how the hardware in all computers operate and how a computer carries out tasks&lt;/em&gt;. Students were then challenged to incorporate what they learned from the lesson by participating in collaborative team builds!    &lt;/p&gt;
&lt;p&gt;Other output types could be used: Doors and gates that swung open or shut close by using the binary switching logic learned earlier. These proved very useful in the team-built zoo challenge!  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Hunger Games!&lt;/h3&gt;
&lt;p&gt;Of course, what would a minecraft in 3d summer camp be without hunger games?  &lt;br&gt;
Tech Em instructor, Chris created a hunger games minecraft server from scratch! By connecting to this server with iPads, campers were able to battle it out on the same server the hunger games way. To say the least, while these games were underway, the studio at Tech Em was bursting at the seems with excitement and fun!  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope our campers enjoy their 3D builds and have a great rest of the summer!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Camp Group" src="images/minecraft-group-picture.jpg"&gt;  &lt;/p&gt;</content><category term="techcamp"></category><category term="minecraft"></category><category term="computer science"></category><category term="3d printing"></category></entry><entry><title>Make a Movie &amp; Media Arts Camp</title><link href="/make-a-movie-media-arts-camp.html" rel="alternate"></link><published>2016-08-05T00:00:00-04:00</published><updated>2016-08-05T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-08-05:/make-a-movie-media-arts-camp.html</id><summary type="html">&lt;p&gt;Follow up Make a Movie and Media Arts Camp&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Media Arts Camp&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;The response from the Tech Em Team to what the campers created during this camp: "Wow!"&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;The Media Arts Camp is all about creating new ways to channel your inner artist and create amazing content through technology tools. The campers learned what makes art, media art. Artwork dependant on and made from technology. This can include computer animation, digital art, 3D printing, and much more. They learned of some icons that became famous for their Media Arts projects, like Andy Warhol and learned of the practical Applications of Media Arts.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3D Design and Printing&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;The campers kickoffed their creativity by completing a challenge to design a 3D object to function in the real-world once printed. From phone cases and charging stands, to 3D printed robot friends; the results were striking. To plan their design, some campers started with a drawing on paper or by researching the correct specifications/dimensions of their conceptualized composition (&lt;em&gt;big words for big ideas!&lt;/em&gt;). The campers learned how 3D design and 3D printing work together to produce their creations. A 3D printer is like a regular printer (printing in two dimensions, X and Y). Just add another dimension (X, Y, Z) to make 3D objects! Campers had the opportunity to see the process the 3D printer goes through to produce their designs!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="3d robot" src="images/robot-media-arts.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logo Design&lt;/strong&gt;&lt;br&gt;
The first challenge was to create a logo that depicted similarity to an already produced logo. Designs featured logos such as, Nasa and FedEx. The campers realized clever implementations logo designs portray: The Nike "swoosh" is rumored to be a tennis swing, the arrow in the middle of the FedEx logo. Campers used this idea of logo creation and the concept of depicting the brand name in the logo to conjure up their very own, unique logo. Unique, meaning they were called to make a logo design that illustrated themselves; i.e., their interests, hobbies, etc. -a logo that describes them. &lt;/p&gt;
&lt;p&gt;&lt;img alt="media logos" src="images/media-logos.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Photography&lt;/strong&gt;&lt;br&gt;
After a lesson on guidelines on what to pay attention to when taking a good picture, campers were released to render their inner photographer by completing a scavenger hunt!  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scavenger Hunt!&lt;/strong&gt;&lt;br&gt;
Objective: Take one picture of..  &lt;ul&gt;
&lt;li&gt;A person (could be whole person, or soemone's hand/shoe etc.)  &lt;/li&gt;
&lt;li&gt;Something in Nature (bird, plant, rock, bug, etc.)  &lt;/li&gt;
&lt;li&gt;Food item&lt;/li&gt;
&lt;li&gt;Hardware (a keyboard, mouse, monitor, iPad, tv, etc.)&lt;br&gt;
Put these pictures together by making a collage.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="headphone" src="images/media-arts-phones.jpg"&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Guidelines for Taking a Good Picture&lt;/em&gt;  &lt;ul&gt;
&lt;li&gt;Use Gridlines (a "tic-tac-toe" grid)  &lt;ul&gt;
&lt;li&gt;Position the camera so your subject appears where two of the lines meet or somewhere close to it.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pay attention to horizontal and vertical lines&lt;ul&gt;
&lt;li&gt;keep horizons level and verticals straight  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The photography projects were then printed on greeting cards!  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Animation/Comics&lt;/strong&gt;&lt;br&gt;
Using premises of a good story or movie, campers paired up to develop a digital comic. They were first presented with examples and the style of story-creating for comics. Drawings for characters and backgrounds were inputted into a comic making app. Once put together, these designs and templates on the app were assembled. The campers added music and voice-overs to culminate their comic stories! This task was concluded with presentations of their digital comics.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="digital animation" src="images/comic.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;During this camp, imaginations expanded and came to life! Using technology in art creation, more doors open to channel creative minds!  &lt;/p&gt;
&lt;p&gt;The apps used: Assembly, 123d Design by Autodesk, Toontastic, iPhoto Editor, Pic Collage  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Make a Movie Camp&lt;/h4&gt;
&lt;p&gt;The campers really came together to make amazing movies using a variety of comprehended techniques! The first day of camp, the campers learned about the schema of the movie making process.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="working" src="images/movie-lobby.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creative Project&lt;/strong&gt;&lt;br&gt;
Campers chose to proceed to make a movie with content and genre of their choosing. But first, the campers focused on brainstorming at least three movie ideas; at first individually, then in pairs, or groups of three. Once centered on an idea to make into a movie they presented it to an intern from the Center of Information Technology from Deep Run Highschool or an instructor. The groups discussed more detailed premises of their story; the protagonist (main character/hero) and their story or journey they would embark on. The students put their idea to paper using storyboard sheets. Here, they sketched scene ideas and dialogue to coincide with the scenes. Then... Lights! Camera! Action! The process of filming and editing began! The campers used props from the studio, as well as props they brought from home.  &lt;/p&gt;
&lt;p&gt;These students were enthusiastically fast at work creating masterpieces! During the week, they worked on a few more discrete project themes/styles:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Books Alive!&lt;/strong&gt;&lt;br&gt;
The students were challenge to bring a book to life by developing a movie for their favorite children's book. The guidelines for making the movie: the movie must follow close to the actual story of the book; however, alterations to the story, scenes, and characters are allowed! Additionally, to score this movie making challenge, they followed the structure taught and actively applied during their first project. Students formed pairs to bring their book to movie form, Tech Em Studios style! Books that came to life during the camp: &lt;em&gt;There is a Bird on Your Head!&lt;/em&gt;, &lt;em&gt;Knuffle Bunny&lt;/em&gt;, and &lt;em&gt;Wizard of Oz&lt;/em&gt;.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop-Motion Video&lt;/strong&gt;*
Stop motion is an animation technique to make it appear that inanimate objects are moving on their own. This can be done with drawn pictures of objects and background scenes and/or with physical objects. The object(s) is moved in small advancements admist separate frames of photos. After a short lesson on techniques to use; in order to manage this, the productions were started and the final objective accomplished. Projects ranged from 3D printed salsa videos to Tech Em class commercials!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="chip salsa" src="images/chip-salsa-art.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Movie Trailers&lt;/strong&gt;
Campers chose some of their movies to create a trailer(preview) for, to promote their movies!&lt;/p&gt;
&lt;p&gt;Here is our mini lesson on movie making, so your child can refer to when they score more movies:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Our Movie Making General Outline&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Brainstorming to Idea  &lt;/li&gt;
&lt;li&gt;Idea to Script  &lt;/li&gt;
&lt;li&gt;Script to Storyboard  &lt;/li&gt;
&lt;li&gt;Storyboard to Film  &lt;/li&gt;
&lt;li&gt;Film to Edit (to more film and edit)  &lt;/li&gt;
&lt;li&gt;To Screening/Showing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="edit" src="images/movie-edit.jpg"&gt;&lt;/p&gt;
&lt;p&gt;During the Make a Movie Camp, we used iMovie, Garageband, and special effects apps, like ActionFX to produce movie gems.  &lt;/p&gt;
&lt;p&gt;Check out the movie projects from this camp on the Tech Em Studios YouTube channel: &lt;a href="https://www.youtube.com/channel/UCy9pBQirIqjOpqHkPen2deQ"&gt;https://www.youtube.com/channel/UCy9pBQirIqjOpqHkPen2deQ&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="group" src="images/group-media-arts.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;</content><category term="techcamp"></category><category term="imovie"></category><category term="media arts"></category><category term="photography"></category><category term="3Dprinting"></category></entry><entry><title>Media Arts and Movie Camp</title><link href="/media-arts-and-movie-camp.html" rel="alternate"></link><published>2016-07-28T00:00:00-04:00</published><updated>2016-07-28T00:00:00-04:00</updated><author><name>Forest Kim</name></author><id>tag:None,2016-07-28:/media-arts-and-movie-camp.html</id><summary type="html">&lt;p&gt;Follow up on BYOC camp&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Media Arts&lt;/h4&gt;
&lt;p&gt;Media Arts!  What does that make you think about? Simple drawings or just laid-back videos?  Wrong!  Media Arts is all about creating new ways to channel your inner artist and create amazing content through technology! At Tech Em, the Media Arts program will provide all the necessary tools for your child to become a true artist; however, it's not just a simple pen-and-paper artistry that we teach. From printing sculptures through 3D printing, to making awesome movies with iMovie, and making music with GarageBand, your little artist will be able to vent all the pent up imagination and creativity into reality.  &lt;/p&gt;
&lt;h4&gt;Movie Making&lt;/h4&gt;
&lt;p&gt;Lights, Camera, Action! Does your child like making movies and wants to know more in cinematography?  Then the Movie Making camp is the right camp to be! Tech Em instructors will teach the movie making process and what needs to happen for a film to be realized!  Movies like Star Wars and Transformers go through a basic routine of movie making, and we can assist your child to become the next J.J. Abrams or even Michael Bay! From storyboarding, to finding good camera angles, and even using special effects, your child will be able to become an Academy Award winning director/actor in no time!  Feel free to see our previous camp members' movies on our YouTube!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Movie Camp" src="images/Media-Arts.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Why?&lt;/h4&gt;
&lt;p&gt;Now, you may ask: How will this benefit my child's future? Will it do much at all other than create time for them to have fun?  In fact it will!  With the knowledge they gain about technology and the creativity that they harvest, the CIT (Center for Information Technology) at Deep Run High School would be a great specialty center to be enrolled in the future.  We have students currently enrolled in the center who are assisting with our camps that have plenty of experience in IT and in movie making. The CIT looks for bright minds with interest in the Information Technology field (which entails things such as programming, web design, and even making computers), and if your child loves 3D printing, tampering with electronics, programming, and creatively coming up with new ideas, they will love being in the CIT!  &lt;/p&gt;
&lt;p&gt;Media Arts and/or the Movie Making camp could be the spark for an awesome future and career in the field of information technology or even cinema, so enroll now and let your child's inner talent blossom!  &lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Click the link below to see a few movies made by talented Tech Em Students:&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCy9pBQirIqjOpqHkPen2deQ"&gt;https://www.youtube.com/channel/UCy9pBQirIqjOpqHkPen2deQ&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;How to Get Your Child Involved&lt;/h4&gt;
&lt;p&gt;Sign up now for Make a Movie camp and Media Arts camps at &lt;a href="http://techemstudios.com/summer-camps.html"&gt;http://techemstudios.com/summer-camps.html&lt;/a&gt;  &lt;/p&gt;</content><category term="techcamp"></category><category term="imovie"></category></entry><entry><title>Build Your Own Computer Camp 2016</title><link href="/build-your-own-computer-camp-2016.html" rel="alternate"></link><published>2016-07-22T00:00:00-04:00</published><updated>2016-07-22T00:00:00-04:00</updated><author><name>Davis Mohar</name></author><id>tag:None,2016-07-22:/build-your-own-computer-camp-2016.html</id><summary type="html">&lt;p&gt;Follow up on BYOC camp&lt;/p&gt;</summary><content type="html">&lt;p&gt;To start off the week, the campers learned about how a computer works and the function of each part of the computer. We went over the processor, motherboard, RAM, power supply, solid state drives, and disk drive. Over the first two days, we installed all the parts, and wired everything up. Once the computer was built, they installed Windows 10 onto their computers as well as a variety of other programs such as antimalware, runtimes, and drivers. We then went over computer secuirty and how to best keep themselves and their computers safe from viruses, malware, or phishing. We also discussed troubleshooting steps for both hardware and software issuses so that they will be able to fix any problems that could arise in the future. &lt;/p&gt;
&lt;p&gt;All of the presentations we covered: &lt;a href="https://docs.google.com/presentation/d/1T8ERaT-Cm7jPNVmd2wAVDKt4LAflvoQ5hqoaN9F84ic/edit?usp=sharing"&gt;Computer Parts&lt;/a&gt;, &lt;a href="https://docs.google.com/presentation/d/1WZyjCNaGeupDpLhme4ypItIhnkPwYxD6ut5nj0isg3E/edit?usp=sharing"&gt;Troubleshooting&lt;/a&gt;, &lt;a href="https://docs.google.com/presentation/d/1lJvTJYlD7aN2kW3RDKmoKvHd8Q-TOKdG8H45cWhkQUE/edit?usp=sharing"&gt;Computer Safety&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have a &lt;a href="blog.techemstudios.com/computer-safety-2016.html"&gt;full blog post&lt;/a&gt; on computer safety up on our site as well.&lt;/p&gt;</content><category term="BYOC"></category></entry><entry><title>Computer Security</title><link href="/computer-security.html" rel="alternate"></link><published>2016-07-22T00:00:00-04:00</published><updated>2016-07-22T00:00:00-04:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2016-07-22:/computer-security.html</id><summary type="html">&lt;p&gt;Extra Security Post&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Computer Safety&lt;/h3&gt;
&lt;p&gt;On Wednesday after we had gotten everything hooked up, and our Windows installation completed I wanted to take some time to talk to the kids about the importance of computer,  and Internet safety.  We live in an exciting age with the Internet of Things, but with the excitement comes some risk. While it's great having all of these devices online, it makes the attack surface for malicious actors much larger. There is good news though! We can all take steps to greatly reduce our risk of falling victim to scams, viruses, and annoying adware. My goal with this post is to detail what I went over in the presentation, and also provide direct links to the software I recommend on keeping yourself safe online. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;The Threat is Real&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Over &lt;strong&gt;169 million personal records&lt;/strong&gt; were exposed in 2015, stemming from 781 publicized breaches across the financial, business, education, government and healthcare sectors. &lt;a href="http://www.idtheftcenter.org/ITRC-Surveys-Studies/2015databreaches.html"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In 2015, there were &lt;strong&gt;38 percent&lt;/strong&gt; more security incidents detected than in 2014.&lt;a href="http://www.pwc.com/gx/en/issues/cyber-security/information-security-survey.html"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;34.2%&lt;/strong&gt; of user computers were subjected to at least one web attack over the year.&lt;a href="https://securelist.com/analysis/kaspersky-security-bulletin/73038/kaspersky-security-bulletin-2015-overall-statistics-for-2015/"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are plenty of malicious actors out there, from all across the globe. It can be very hard to prosecute, and find these people because of international laws, but also because they usually take good care in making sure what they do is untraceable back to them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am convinced that there are only two types of companies: those that have been hacked and those that will be. And even they are converging into one category: companies that have been hacked and will be hacked again.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Robert S. Mueller, III, FBI Director, 2012 &lt;a href="https://archives.fbi.gov/archives/news/speeches/combating-threats-in-the-cyber-world-outsmarting-terrorists-hackers-and-spies"&gt;[4]&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can't protect ourselves from everything, and we are helpless when a company gets hacked. But we can take many steps to help protect ourselves from making it any easier for an attacker to get our information, or infect our computer with malicious software. &lt;/p&gt;
&lt;p&gt;Focus Points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Strong Passwords &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anti-Virus&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adware &amp;amp; Spyware detection&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protecting Yourself Online&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By looking into these areas, and being aware of what you are doing on the computer you will be ahead of the game, and able to detect, and know what to do if something ever happens!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Strong Passwords&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Strong Passwords" src="http://imgur.com/rMagpJb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We all love a nice, easy, quick password to type in. Something that isn't hard to remember. Guess who else loves those passwords?! Those dudes trying to get your bank account number! The password is going to be your first defense, especially with your online accounts. By creating a strong password you are making it harder for an attacker to guess that password. One of the most popular attacks towards someones password is using a Brute Force attack where they use a dictionary to guess all the combinations of various words. So by creating a password that isn't found in a dictionary, you are a step ahead of the game in protecting yourself. You'll be best protected by using upper and lower case letters, numbers, and symbols in your password. Make sure to use a minimum of 12 characters when choosing a password, and if you are really worried never use the same password twice. Using a password manager like KeyPassX &lt;a href="https://www.keepassx.org"&gt;[5]&lt;/a&gt; or LastPass &lt;a href="https://lastpass.com"&gt;[6]&lt;/a&gt; can help you keep track of all these unique, and complicated passwords! &lt;/p&gt;
&lt;h3&gt;Anti-Virus&lt;/h3&gt;
&lt;p&gt;Viruses can definitely be a pain, and make your experience frustrating. Anti-Virus programs have evolved over the years, and we have seen many different companies market their latest and greatest. Thankfully for Windows users Microsoft has gotten on board and created &lt;strong&gt;Windows Defender&lt;/strong&gt;. This is a piece of software that comes installed on Windows 8, and Windows 10. Users running systems with versions of Windows pre Windows 8, you will look for &lt;strong&gt;Security Essentials&lt;/strong&gt; which is the same thing. Both of these pieces of software will be free, and included with Windows. &lt;/p&gt;
&lt;p&gt;If you're looking to add another layer of Anti-Virus, I would suggest looking into Anti-Virus Guard &lt;a href="http://www.avg.com/us-en/homepage"&gt;[7]&lt;/a&gt;, AVG for short. It is a free, anti-virus that will help catch anything that Windows Defender might miss. &lt;/p&gt;
&lt;p&gt;Apple users can use the OS X version of AVG to protect themselves from viruses. Apple computers tend to be targeted less because they are less prevalent in the computer population than Windows operating computers. But you still should be aware of the possibilities, and protect yourself. &lt;/p&gt;
&lt;p&gt;Both of these are going to be a good first line of defense from most of the main- stream virus that your computer has potential to catch. It's very important to make sure you keep these updated, and are using the latest virus definitions. If your computer does get a virus that you are having trouble removing, look through Google for anything related to that specific virus, or seek out professional assistance. &lt;/p&gt;
&lt;h3&gt;Adware, Spyware Detection&lt;/h3&gt;
&lt;p&gt;While these types of malicious software aren't going to kill you, they will definitely make your user experience annoying. &lt;strong&gt;Adware&lt;/strong&gt; is known as a type of software that installs and displays ads on the users screen. They work by hijacking the legitimate ads on websites, and display their own. Sometimes even displaying ads outside of the web browser. They usually come from clicking on malicious links, or from installing certain kinds of software that sneak them in. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever installing new software always make sure to read the check boxes! Sometimes those check boxes will ask you if you want to install some sketchy ad package! Their hope is that you won't read them, and click next next next! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Spyware&lt;/strong&gt; is much more malicious. You can define spyware as any type of malicious software that is meant to spy on the user looking to gather login, and password information. They are looking to get into your email, and your bank accounts. Usually you will get spyware from clicking on malicious links, and downloading fake software that isn't the application you think it is. Always know the sites that you are on, and pay attention to the URL. &lt;/p&gt;
&lt;p&gt;Two pieces of software that I recommend to take care of this would be Malware Bytes&lt;a href="https://www.malwarebytes.com"&gt;[8]&lt;/a&gt;, and Super-Anti Spyware&lt;a href="http://superantispyware.com"&gt;[9]&lt;/a&gt;. Both have free versions that you can use to help remove these types of software, and help hopefully stop them before even have a chance! You need to make sure that you use the latest versions, and also before running scans, update your virus definitions. Updating your virus definitions can be done inside the application. If you don't want to have the application running all the time, I would suggest to try run it at least twice a month. It can never hurt, and will help to remove any junk that you might not even know you have! They can be sneaky! &lt;/p&gt;
&lt;h3&gt;Protecting Yourself Online&lt;/h3&gt;
&lt;p&gt;We do so much online these days! We do our banking, talk to friends, and family. We play video games, and video chat! And with Internet access available practically all over the globe, there are tons of people online, going to the same sites that we all use. Being safe online is a top priority for anyone wanting to protect their personal information, and avoid any types of identity theft. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can never over stress the importance of having a strong password. That is going to help you tremendously in avoiding someone being able to guess your password, and getting access to your account. &lt;/li&gt;
&lt;li&gt;Remember to use a combination of upper and lower case letters, numbers, and symbols. A minimum length of 12-14 characters is suggested. &lt;/li&gt;
&lt;li&gt;Don't use the same password for all your accounts, especially ones you are really trying to protect. This prevents them getting your password from one site, and than being able to compromise all your accounts. &lt;/li&gt;
&lt;li&gt;Use a password manager to help keep track of the different sites, and different passwords you create. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Two-Factor Authentication if you available. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never &lt;strong&gt;EVER&lt;/strong&gt; reveal any personally identifiable information to strangers online. There shouldn't ever been any reason to, and if someone is asking for that information there intentions should be questioned. Don't trust that just because someone has a Facebook, and pictures that they are who they say they are. You should always be cautious when talking with others online. By never revealing anything about yourself, and potentially using a pesudo first name you can keep yourself safe while navigating the web, and talking to others! &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If available for that site,  always use &lt;strong&gt;HTTPS!!!&lt;/strong&gt; HTTPS is a secure version of HTTP that will help to encrypt your traffic so if the attacker does get ahold of it, they shouldn't have any idea what it says! There are a couple plugins&lt;a href="https://www.eff.org/https-everywhere%20"&gt;[13]&lt;/a&gt; that will force your browser to use HTTPS if available. You can tell if you are using HTTPS when visiting a certain website by looking at the address bar up top and seeing a pad lock. Firefox and Google Chrome will display a green pad lock, and Safari will show gray pad lock. Also the URL will start with HTTPS instead of HTTP. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another good way to keep the malicious activity found on some websites at bay is the use of an AdBlocker. There are a couple different ones out there, but I would recommend uBlock&lt;a href="https://www.ublock.org"&gt;[11]&lt;/a&gt;, or AdBlockPlus&lt;a href="https://adblockplus.org"&gt;[10]&lt;/a&gt;. They both do the same thing, so choose either one. You don't need to install both of them. By using a piece of software like this you will be blocking ads, and reduce the chances of clicking on a malicious one. As well as be preventing some of the malicious scripts that hide on some websites. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Phishing&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Phishing is something that I wanted to mention in this post because I feel that it is a very effective attack for attackers to gain access to peoples personal accounts. And over the years has become a more prevalent threat on the Internet. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Phishing" src="http://imgur.com/s3azhQU.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Phishing is the practice of sending fake emails that appear to look real, and come from reputable sources. Usually they will be like an email from your bank saying to please reset your password, with a link below that they want you to click. Usually they will even make the email format look exactly like how a legitimate one. But that is the point, to make you think it actually came from your bank! Some tips below for detecting phishing emails: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pay very close attention to the senders email address. You can't always count on this to not be spoofed and appear to be actually from the bank, but most of the time you will see something like &lt;em&gt;bankofamerica.blah.silly@loserhacker.com&lt;/em&gt;. So while at first glance it might appear to be from Bank of America, looking a little closer we can see that it definitely didn't, and should be discarded.&lt;/li&gt;
&lt;li&gt;If the email is very vague about who specifically they are contacting that can raise some flags. For example if the message starts with "Hello TechEm, we are contacting to ..." versus just "Hello, we are contacting to ..."  This is important because attackers will send these phishing emails out en masse and usually don't know any information of the recipients. &lt;/li&gt;
&lt;li&gt;Also just look closely, and read the email before you jump to click on something in it. You might see something out of place, and easily figure out the email is fake. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the day if you are really worried that the email might be fake, just ignore it and call the company up directly. Than you can be assured that you aren't replying or clicking anything suspicious. They might even be able to tell you if they sent you an email recently so you know for sure! Better to be safe than sorry! &lt;/p&gt;
&lt;p&gt;If you want to read more about phishing, the Federal Trade Commission has written some good information&lt;a href="https://www.consumer.ftc.gov/articles/0003-phishing"&gt;[12]&lt;/a&gt; to help people learn about these types of attacks, and other tips on preventing them.&lt;/p&gt;
&lt;h3&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Like mentioned in the beginning we can't always protect ourselves from every threat out there in cyber space. But we can reduce our chances, and make exploring the web much safer for ourselves. We can take steps to prevent sketchy software from installing and infecting our computers. We can use software to detect, and clean up anything that might have been installed under our nose. And we can use methods to make sure our passwords are strong, and our accounts are locked down. Setting up alerts for logins to your accounts is always useful, and using Two-Factor authentication whenever available is the ultimate thing for locking down an account, and keeping the bad guys out.  These are all things we already do every day like locking our houses, using a locked and fire proof filing cabinet or safe. It's just instead of calling you on the phone to scam you, or knocking on your door, they send you an email, or message you through Facebook. Some of the attacks have shifted, and gotten more technical but a lot is very similar to things we already work to protect ourselves against. It's just the attack surface has changed to the computer. So we have to evolve our techniques, and adjust our perspective of the possible avenues of attacks. Thankfully it's not close to impossible, and allows us to remain safe, and avoid having information compromised! &lt;/p&gt;
&lt;p&gt;I'm sure I've left something out! And I always suggest people to look for themselves, and read through a couple different sites to learn about computer safety, and security. These are the tips, and tricks I have been using to keep myself safe online, and should give you a little overview of where to start if you are interested in protecting yourself more, and different types of software to do so. Please don't hesitant if you have any questions to reach out, and email me. I love talking about computer security, and safety! &lt;/p&gt;
&lt;p&gt;Chris Kefalas
me@chriskefalas.me&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Links:&lt;/h4&gt;
&lt;p&gt;[1] "Identity Theft Resource Center Breach Report Hits Near Record High in 2015." ID Theft Center. January 26, 2016. Accessed July 21, 2016. http://www.idtheftcenter.org/ITRC-Surveys-Studies/2015databreaches.html.&lt;/p&gt;
&lt;p&gt;[2] "Global State of Information Security® Survey 2016." PwC. Accessed July 21, 2016. http://www.pwc.com/gx/en/issues/cyber-security/information-security-survey.html.&lt;/p&gt;
&lt;p&gt;[3] "Kaspersky Security Bulletin 2015." Secure List. December 15, 2015. Accessed July 21, 2016. https://securelist.com/analysis/kaspersky-security-bulletin/73038/kaspersky-security-bulletin-2015-overall-statistics-for-2015/.&lt;/p&gt;
&lt;p&gt;[4] "Combating Threats in the Cyber World: Outsmarting Terrorists, Hackers, and Spies." FBI. March 1, 2012. Accessed July 21, 2016. https://archives.fbi.gov/archives/news/speeches/combating-threats-in-the-cyber-world-outsmarting-terrorists-hackers-and-spies.&lt;/p&gt;
&lt;p&gt;[5] https://www.keepassx.org&lt;/p&gt;
&lt;p&gt;[6] https://lastpass.com&lt;/p&gt;
&lt;p&gt;[7] http://www.avg.com/us-en/homepage&lt;/p&gt;
&lt;p&gt;[8] https://www.malwarebytes.com&lt;/p&gt;
&lt;p&gt;[9] http://superantispyware.com&lt;/p&gt;
&lt;p&gt;[10] https://adblockplus.org&lt;/p&gt;
&lt;p&gt;[11] https://www.ublock.org&lt;/p&gt;
&lt;p&gt;[12] https://www.consumer.ftc.gov/articles/0003-phishing&lt;/p&gt;
&lt;p&gt;[13] https://www.eff.org/https-everywhere%20&lt;/p&gt;</content><category term="BYOC"></category><category term="Security"></category></entry><entry><title>Design Thinking and Gaming Camp</title><link href="/design-thinking-and-gaming-camp.html" rel="alternate"></link><published>2016-07-21T00:00:00-04:00</published><updated>2016-07-21T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-07-21:/design-thinking-and-gaming-camp.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Everyone did a great job designing their games!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;The campers focused on the design thinking process to make their games. This is a user-centered approach to design a game. This process is not only used to come up with solutions for challenges relating to game design, but challenges of all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Everyone did a great job designing their games!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;The campers focused on the design thinking process to make their games. This is a user-centered approach to design a game. This process is not only used to come up with solutions for challenges relating to game design, but challenges of all types as well. A link for a more detailed look at the design process we utilized: &lt;a href="http://blog.techemstudios.com/design-thinking-outline.html"&gt;http://blog.techemstudios.com/design-thinking-outline.html&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;To begin the design process, the campers completed a mini "Design Thinking Question" sheet after playing published games on Floors, Hopscotch and Hyperpad. They wrote down at least three things they liked in the games, and at least three things they would leave out of the game that they would soon create.  &lt;/p&gt;
&lt;p&gt;We explored the apps, Floors, Hopscotch, and Hyperpad. &lt;/p&gt;
&lt;p&gt;Floors is built around the "run-and-jump" platformer genre -think of mario.   &lt;/p&gt;
&lt;p&gt;Hyperpad is a very detailed game design app; however, being very detailed, this means there can be a lot of work involved (but, well worth it!). After learning some basic techniques, campers were able to design their games with a little more ease. This app and Hopscotch, allowed the campers to really dive into computer science concepts, in terms of how programs function.If your child decides to continue with exploring Hyperpad, the 'Manual' that is included in the app under 'Learn' is extremely useful.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="design solder" src="images/design-game-solder.jpg"&gt;&lt;/p&gt;
&lt;p&gt;While working from these game design apps, the campers learned various concepts of computer science; such as, logical thinking, conditions(if this, then..) and creating variables. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;The Design Thinking Interview Activity&lt;/h3&gt;
&lt;p&gt;The campers broke up into groups of two. Each partner shared their answers from the "design thinking q's" sheet. They were then challenged to design a game for their group partner by following guidelines derived from each of their answers to the design thinking questions. Based on what app their partner wanted their game created on, they would create the game either on 1 of 3 apps the campers have been introduced to so far during the camp: Floors, Hyperpad and Hopscotch.&lt;/p&gt;
&lt;p&gt;To further the design thinking approach, the group members switched iPads to play the games they have been creating for one another. After testing out the games, they provided feedback. They recorded their feedback responses on the "Design Thinking Interview Exercise" sheet. They used this feedback to incorporate changes in the design of the game. Repeating this is key for continuing the design thinking process to design a great game (or any project).  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="whiteboard" src="images/design-game-whiteboard.jpg"&gt;
&lt;img alt="design group work" src="images/design-game-group.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;The Design Thinking Challenge&lt;/h3&gt;
&lt;p&gt;During this challenge, the campers aimed at designing a game for a particular user. On the whiteboard, the user stated what they wanted in a game. The campers designed a game either on Hopscotch or Hyperpad, because these are the apps the user wanted to play their game on. They would switch iPads periodically to provide one another feedback for further tweaking. This resulted in intricate and well-designed games! The winner of the challenge recieved a 3D printed prize.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="design challenge winner" src="images/design-game-win.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here are some tips to view the games your camper created:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your child published a game on Floors or Hopscotch,  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The links for the game(s) are in the content of the follow up email.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your child published a game on Hyperpad, you can find it by going to the Hyperpad website:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a login  &lt;/li&gt;
&lt;li&gt;click Hub located on the navigation bar  &lt;/li&gt;
&lt;li&gt;scroll down to Most Recent  &lt;/li&gt;
&lt;li&gt;click the View All  &lt;/li&gt;
&lt;li&gt;select the game  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The campers can play their created games on either Floors or Hyperpad with an iPad.  &lt;/p&gt;
&lt;p&gt;"Branching" is enabled for games on Hyperpad. Once you are on the app they will be able to edit their game by clicking Branch (Located next to the Play button by the game). This downloads their game on the account that you can create and it allows them to continue to edit and further publish.  &lt;/p&gt;
&lt;p&gt;Publishing on Hyperpad can be tricky. This is due to the images for the required screenshot and icon have certain size specifications. I used the iPhoto App to edit these images to become the correct sizes.  &lt;/p&gt;
&lt;p&gt;Feel free to contact me for help if you have any questions with any of this process or editing the game on either app.  &lt;/p&gt;
&lt;p&gt;Published games on either of the apps will have the option for users to play the game, like or dislike, and/or leave comments for feedback. This is a great aspect, because it further exemplifies the design thinking process we used to create these games. They can choose to use this feedback to continue with the design thinking process while editing their published game.  &lt;/p&gt;
&lt;p&gt;Enjoy the rest of summer!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="group picture" src="images/design-game-pic.jpg"&gt;&lt;/p&gt;</content><category term="floors"></category><category term="hyperpad"></category><category term="hopscotch"></category><category term="coding"></category><category term="game design"></category><category term="design thinking"></category><category term="techcamp"></category></entry><entry><title>Design Thinking Outline</title><link href="/design-thinking-outline.html" rel="alternate"></link><published>2016-07-21T00:00:00-04:00</published><updated>2016-07-21T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-07-21:/design-thinking-outline.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Outline for the Design Thinking Process Used in Tech Em'S Game Design Classes and Camps.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Design thinking is a user-centered approach to solving everyday problems.  This a rough outline of the design thinking process followed during the Game Design classes and camps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Observation&lt;/strong&gt;    &lt;ul&gt;
&lt;li&gt;What are your favorite games to play …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Outline for the Design Thinking Process Used in Tech Em'S Game Design Classes and Camps.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Design thinking is a user-centered approach to solving everyday problems.  This a rough outline of the design thinking process followed during the Game Design classes and camps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Observation&lt;/strong&gt;    &lt;ul&gt;
&lt;li&gt;What are your favorite games to play?&lt;/li&gt;
&lt;li&gt;Why are they your favorite games?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Brainstorming&lt;/strong&gt; (&lt;em&gt;from design thinking questions sheet&lt;/em&gt;)  &lt;ul&gt;
&lt;li&gt;What makes your favorite games fun to play? [what makes these games fun?]  &lt;/li&gt;
&lt;li&gt;What would you include in your game?  &lt;/li&gt;
&lt;li&gt;What would you leave out for your game?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;From the answers to these questions above, guidelines are now set for the design of the game. Moreover, from these guidelines, come the various challenges of finding out how to design our game using these guidelines. We start by figuring out multiple solutions to use while creating the game.     &lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Protoyping&lt;/strong&gt;    &lt;ul&gt;
&lt;li&gt;Create your game!  &lt;/li&gt;
&lt;li&gt;Keep in mind the brainstorming topics and design thinking questions  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Test your game  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what do you like?  &lt;/li&gt;
&lt;li&gt;what could you change?  &lt;/li&gt;
&lt;li&gt;what's missing? what could you add?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collaborate  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have someone else play your game - vice versa  &lt;/li&gt;
&lt;li&gt;get feedback/provide feedback  &lt;/li&gt;
&lt;li&gt;from the feedback, we conjure up more solutions to implement in the design.  &lt;/li&gt;
&lt;li&gt;repeat the process!   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Below is a rough diagram of the overall design process scheme:  &lt;br&gt;
&lt;img alt="dt diagram" src="images/DT-Process-Game-Design.jpg"&gt;&lt;br&gt;
The green arrows represent the conintuous iteration of the whole process.  &lt;/p&gt;
&lt;p&gt;We used this process to make awesome games!  &lt;/p&gt;</content><category term="floors"></category><category term="hyperpad"></category><category term="hopscotch"></category><category term="coding"></category><category term="game design"></category><category term="design thinking"></category><category term="techcamp"></category></entry><entry><title>Python Coding Camp 2016</title><link href="/python-coding-camp-2016.html" rel="alternate"></link><published>2016-07-18T00:00:00-04:00</published><updated>2016-07-18T00:00:00-04:00</updated><author><name>Davis Mohar</name></author><id>tag:None,2016-07-18:/python-coding-camp-2016.html</id><summary type="html">&lt;p&gt;Follow up on Python Coding Summer Camp&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to all our new coders for the great week at Python Coding Camp!&lt;/p&gt;
&lt;p&gt;We started off the week by diving into the basics of python. We went over basic printing, math functions, and getting user input. We finished the first day up by writing up a calculator that allowed the user to pick which operation they want to use. On day 2, we reviewed the sytax we had learned yesterday and then moved on to create a automatic mad libs program. We went over some more python features such as loops, arrays, and functions and then ended the day by starting a random sentence program that downloaded a list of random words from the internet and then would insert them into our sentence. The next two days we worked on projects such as a coin flip statistic program as well as a graphical program using the turtle library. &lt;/p&gt;
&lt;p&gt;All the code that we worked on is availble on &lt;a href="https://github.com/davismohar/techempython"&gt;github&lt;/a&gt; for you to download. &lt;/p&gt;
&lt;p&gt;To get python installed on your home computer, go to python.org, click on the downloads tab, and then download python 2.7.12 (NOT Python 3.5.2, they are not interchangeable)
You can then run the downloaded file and python should be installed on your computer! You can now run and edit any .py file using the new IDLE program that you just downloaded.&lt;/p&gt;</content><category term="python"></category><category term="coding"></category><category term="pythonista"></category></entry><entry><title>Device Camp</title><link href="/device-camp.html" rel="alternate"></link><published>2016-07-14T00:00:00-04:00</published><updated>2016-07-14T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-07-14:/device-camp.html</id><summary type="html">&lt;h2&gt;Summer 2016 Create your Own Device Camp&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pi screen" src="images/image4pitv.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The kids are now experts at using Raspbian wih the Raspberry Pis!  &lt;/p&gt;
&lt;p&gt;Throughout the Device Camp, we heavily used the terminal and learned useful commands to navigate effortlessly through the pi and to write our programs in Python. On the first day of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Summer 2016 Create your Own Device Camp&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pi screen" src="images/image4pitv.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;The kids are now experts at using Raspbian wih the Raspberry Pis!  &lt;/p&gt;
&lt;p&gt;Throughout the Device Camp, we heavily used the terminal and learned useful commands to navigate effortlessly through the pi and to write our programs in Python. On the first day of camp, the campers set up their raspberry pi devices. They wired breadboards and coded in Python 2 in order to turn on a LED light. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Set" src="images/Device-2016.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Here are just a few cool activitiy examples campers used with the raspberry pi:&lt;/p&gt;
&lt;h4&gt;Morse Code Messages by Connecting LEDs to the Raspberry Pi &amp;amp; Breadboard&lt;/h4&gt;
&lt;p&gt;During the second day of camp, the campers learned how to use morse code! First, we hooked up two more LED lights onto their wired breadboards. Then, with a morse code alphabet handy, they wrote a program in Python to have the LEDs perform a series of long blinks and short blinks (or dashes and dots in morse) to display their names and more. 
Using Morse code for telegraphs has come a long way!  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Using the Pi to Manipulate Minecraft&lt;/h4&gt;
&lt;p&gt;The campers also learned how to write a program in Python to instruct their player in Minecraft to have objects built for them. This was done without placing a single block! First, they coded to have a tower of TNT built. Next, they wrote code to have glass blocks appear under their player's feet, wherever they walked, making a glass bridge. Of course, the program was quickly revised to have TNT blocks rather than glass blocks! The lines we wrote for each program in Python to manipulate Minecraft can be found here: &lt;a href="http://blog.techemstudios.com/notes-on-setting-up-pis-to-use-minecraft-api.html"&gt;http://blog.techemstudios.com/notes-on-setting-up-pis-to-use-minecraft-api.html&lt;/a&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Engineering the LEDs and Sensor on the Breadboard&lt;/h4&gt;
&lt;p&gt;We had the Raspberry Pi sense temperature and humidity with a DHT humidity sensor. To make this possible, we added the sensor and several more connections and used the terminal to open Python and write/run the template code for temperature and humidity from an Adafruit DHT22 program. After launching python with nano, we imported the sed template code. Once the code was ran, this file called the method to return the values for celsius temperature, fahrenheit temperature, and relative humidity. Campers tweaked the code using conditional statements to make a particular LED light switch on when one of the returned values being sensed was above a specific number.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="DHT Sensor Close-Up" src="images/sensor.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;Some notes on the sensor set-up: &lt;a href="http://blog.techemstudios.com/some-code-for-rpi-temp-sensing.html"&gt;http://blog.techemstudios.com/some-code-for-rpi-temp-sensing.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Set-up to Receive Automatic Email From the Sensor&lt;/h4&gt;
&lt;p&gt;Here, the campers wrote a python program that would send the measurements the Adafruit DHT22 sensor took to a generic techem student gmail account. After successful testing, they altered the messsage to be sent.  Beyond this, they could potentially send what the sensor measures to another email account. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Engineering the code of Raspberry Pi Games&lt;/h4&gt;
&lt;p&gt;Campers were challenged to change the python code for the squirrel.py game, which acheived fascinating results!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="squirrel py screenshot" src="images/IMG_0153.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It was neat to see how comfortable the kids were with using the Raspberry Pi as the Device Camp progressed. The &lt;strong&gt;'learn by doing'&lt;/strong&gt; approach achieved inspiring results. Navigating to and from all the directories, the Python prompt, running Python programs using sudo... -the campers would recall the commands they have been learning and using, so they flew (with ease!) through the process of typing instructions to have the pi carry them out; either to the breadboard containing the sensor and LEDs, or to Minecraft.  &lt;/p&gt;
&lt;p&gt;Not only did they master the terminal and Python prompt, the campers obtained proficiency in uniquely engineering the Python language to land the results they wanted on Minecraft, the LEDs, and the sensor.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To say the least, witnessing the skills these campers learned was an impressive sight!&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;&lt;img alt="Device Camp Group" src="images/Device-Group-2016.jpg"&gt;  &lt;/p&gt;
&lt;hr&gt;</content><category term="raspberry pi"></category><category term="techcamp"></category><category term="minecraft"></category><category term="computer science"></category><category term="terminal"></category></entry><entry><title>Offsite Summer Camps</title><link href="/offsite-summer-camps.html" rel="alternate"></link><published>2016-07-05T00:00:00-04:00</published><updated>2016-07-05T00:00:00-04:00</updated><author><name>Tech Em Studios</name></author><id>tag:None,2016-07-05:/offsite-summer-camps.html</id><summary type="html">&lt;h2&gt;Weinstein JCC Minecraft in 3D Camp&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;3D Printed Minecraft Objects, Roller Coaster Tree Houses, Binary Logic Gates, Python Programming... These are just a few of the JCC campers' favorite things!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;It was another great week of technology fun, the Minecraft in 3D camp at the Weinstein Jewish Community Center, was …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Weinstein JCC Minecraft in 3D Camp&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;3D Printed Minecraft Objects, Roller Coaster Tree Houses, Binary Logic Gates, Python Programming... These are just a few of the JCC campers' favorite things!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;It was another great week of technology fun, the Minecraft in 3D camp at the Weinstein Jewish Community Center, was met with enthusiastic minds. Who wouldn't be enthused about 3D printing, computer science and Python code, all covered using Minecraft!  &lt;/p&gt;
&lt;p&gt;We started the week by hitting the ground running, with competitive build challenges for team-built tree houses and haunted houses.&lt;/p&gt;
&lt;p&gt;Throughout the week, campers tried their creative skills by designing objects in Minecraft to be printed out as a 3D object they could take home. From village houses and minecraft bows and arrows, to 'walking' creeper feet, the creativity from the campers was apparent.  &lt;/p&gt;
&lt;p&gt;The campers switched gears by learning how to build simple binary logic gates using the famous, redstone in minecraft. Campers built a few binary logic gates (AND, OR, NOT gates) with redstone, redstone torch, redstone lamp, repeaters, and a lever in their inventory. Learning binary logic gates greatly helps in understanding how the hardware in all computers operate.The levers portrayed the input while the redstone lamp acted as the output. They were then challenged to incorporate what they learned from the lesson by participating in collaborative team builds!  &lt;/p&gt;
&lt;p&gt;Other output types could be used: Doors and gates that swung open or shut close by using the binary switching logic learned earlier, proved very useful in the team-built zoo challenge!  &lt;/p&gt;
&lt;p&gt;Campers learned the basics of designing for 3D printing. Below are the steps we completed to perform this:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The 3D Print process&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Campers created a design on Minecraft.    &lt;/li&gt;
&lt;li&gt;The program, Mineways was used to turn the object into a file, recognizable by the 3D printers.  &lt;/li&gt;
&lt;li&gt;The file was sent to the 3D Printer and printed into a unique 3D object that they could take home.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="3D Printed Creeper" src="images/minecraft-3d.jpg"&gt;
&lt;img alt="Tech Em 3D Printer Hard at Work" src="images/3d-printer.jpg"&gt;
&lt;img alt="Haunted House Challenge Screenshot" src="images/3d-camp-screenshot.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;To end the last two days of camp, the campers learned how typing up a few lines of Python code can have a cool impact on gameplay. They used Python 2.7 to write instructions to have objects built in minecraft, without actually placing a single block! Python is an intuitive computer programming language.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Luther Memorial School Technology Camp&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Campers at Luther Memorial learned what technology in their world is all about!&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;Pulling concepts from our Tiny Tech lesson plans, instructors and campers discussed the nitty-gritty. Opening the floor with what technology means to us, to more advanced thought, like how we can discover step-by-step instructions, or computer programming to be found right under our noses in everyday processes that are not even technology related.  &lt;/p&gt;
&lt;p&gt;-Who knew that the steps we follow in pouring ourselves a bowl of cereal in the morning are like the steps a computer follows to run a program?!  &lt;/p&gt;
&lt;p&gt;Some of the apps explored were Lightbot Jr., The Foos and Kodable. All of these apps center around the concepts involved with computer programming, such as understanding sequences and conditions ("If this happens... Then this will happen."). Learning how to critically think was a major part of completing these engaging activities.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="A View of Lightbot app" src="images/lightbot-resize.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;We learned the basics of how technology works and how it can help us understand the world around us.  &lt;/p&gt;
&lt;p&gt;We hope our campers from JCC and Luther Memorial have a great rest of the summer!  &lt;/p&gt;</content><category term="3D printing"></category><category term="techcamp"></category><category term="minecraft"></category><category term="computer science"></category><category term="technology"></category><category term="python"></category><category term="coding"></category></entry><entry><title>Make a Movie Camp Recap</title><link href="/make-a-movie-camp-recap.html" rel="alternate"></link><published>2016-06-28T00:00:00-04:00</published><updated>2016-06-28T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-06-28:/make-a-movie-camp-recap.html</id><summary type="html">&lt;p&gt;Make a Movie Summer Camp&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;That's a Wrap!!!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;The campers really came together to make amazing movies using a variety of learned techniques!  &lt;/p&gt;
&lt;p&gt;We started with a mini lesson on basic movie making.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Our Movie Making General Outline&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Brainstorming to Idea  &lt;/li&gt;
&lt;li&gt;Idea to Script  &lt;/li&gt;
&lt;li&gt;Script to Storyboard  &lt;/li&gt;
&lt;li&gt;Storyboard to Film  &lt;/li&gt;
&lt;li&gt;Film to Edit (to more film and edit)  &lt;/li&gt;
&lt;li&gt;To Screening/Showing  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, campers formed teams and started with brainstorming at least three movie ideas. From here, we continued the process with creating a script and storyboard. Using general premises of stories, they had a protagonist go on a journey of some sort and an antagonist to shake things up.  &lt;/p&gt;
&lt;p&gt;After filming scenes from their storyboards, the editing process came into play. The "to more film and edit" holds true! More scenes were created and filmed, thus having more room for the editing process using iMovie, Garageband, and special effects apps, like ActionFX.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;From the final camp email: You can get a sample of the projects we did from our site. Login to our secure site from our homepage or from this link: &lt;a href="https://secure.techemstudios.com/enrolled_children"&gt;https://secure.techemstudios.com/enrolled_children&lt;/a&gt;. If logging in for the first time, use your square receipt id as your password (or use the password reset feature or contact us if you have trouble). You can easily change your password once logged in. From this site, you can download a zipfile containing the movie project your child created.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It was truely amazing to see the creative minds and inner big movie directors emerge while running through the videography process!  &lt;/p&gt;
&lt;p&gt;Make movies and enjoy the rest of the summer!&lt;/p&gt;</content><category term="imovie"></category><category term="techcamp"></category></entry><entry><title>Minecraft in 3D Camp Recap</title><link href="/minecraft-in-3d-camp-recap.html" rel="alternate"></link><published>2016-06-28T00:00:00-04:00</published><updated>2016-06-28T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-06-28:/minecraft-in-3d-camp-recap.html</id><summary type="html">&lt;p&gt;Minecraft in 3D Summer Camp&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Haunted Houses, 3D Printed Minecraft Objects and Binary Logic Gates, Oh My!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;It was a great experience to see creative minds design complex builds in minecraft and witness the use of teamwork to clash (hunger games style) and to create intricate switching devices in Minecraft!  &lt;/p&gt;
&lt;p&gt;Campers learned the basics of designing for 3D printing. Below are the steps we completed to perform this:  &lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The 3D Print process&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;Campers created a design on Minecraft.    &lt;/li&gt;
&lt;li&gt;The program, Mineways was used to turn the object into a file the 3D printer could recognize.  &lt;/li&gt;
&lt;li&gt;The file was sent to the 3D Printer and printed into a unique 3D object that they could take home. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;From the final camp email: You can get a sample of the projects we did from our site. Login to our secure site from our homepage or from this link: https://secure.techemstudios.com/enrolled_children. If logging in for the first time, use your square receipt id as your password (or use the password reset feature or contact us if you have trouble). You can easily change your password once logged in. From this site, you can download a zipfile containing a 3D Design file ("stl") your child created.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;During the camp, we did a few exercises of simple binary logic gates on the whiteboard then incorporated that same logic in minecraft. Campers built a few binary logic gates (AND, OR, NOT gates) using redstone. Learning binary logic gates greatly helps in understanding how the hardware in all computers operate. They were then challenged to incorporate what they learned from the lesson by participating in collaborative team builds!  &lt;/p&gt;
&lt;p&gt;We hope our campers enjoy their 3D builds and have a great rest of the summer!&lt;/p&gt;</content><category term="minecraft"></category><category term="techcamp"></category><category term="3D printing"></category><category term="computer science"></category></entry><entry><title>Accessing Published Games</title><link href="/accessing-published-games.html" rel="alternate"></link><published>2016-05-18T00:00:00-04:00</published><updated>2016-05-18T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-05-18:/accessing-published-games.html</id><summary type="html">&lt;p&gt;WEMS ASE Coding&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Everyone did a great job designing their games!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Here are some tips to view the games:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your child published a game on Floors,  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I individually sent out the links for the game(s) through an email.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your child published a game on Hyperpad, you can find it by going to the Hyperpad website:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a login  &lt;/li&gt;
&lt;li&gt;click Hub located on the navigation bar  &lt;/li&gt;
&lt;li&gt;scroll down to Most Recent  &lt;/li&gt;
&lt;li&gt;click the View All  &lt;/li&gt;
&lt;li&gt;select the game  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To play the game on either Floors or Hyperpad, you would have to play it using an iPad. Maybe down the road, the creators will make a version to play/edit on a PC or MAC.  &lt;/p&gt;
&lt;p&gt;I enabled "Branching" for games on Hyperpad. Once you are on the app they will be able to edit their game by clicking Branch (Located next to the Play button by the game). This downloads their game on the account that you just created and it allows them to continue to edit and further publish.  &lt;/p&gt;
&lt;p&gt;Publishing on Hyperpad can be tricky. This is due to the images for the required screenshot and icon have certain size specifications. I used the iPhoto App to edit these images to become the correct sizes.  &lt;/p&gt;
&lt;p&gt;Feel free to contact me for help if you have any questions with any of this process or editing the game on either app.  &lt;/p&gt;
&lt;p&gt;The creators of Hyperpad are very helpful and prompt with replying to any questions.  &lt;/p&gt;
&lt;p&gt;Published games will have the option for users to play the game and leave comments for feedback. This is an awesome aspect of publishing; in that, it further exemplifies the design thinking process we used to create these games. They can choose to use this feedback to continue editing their published game.   I mentioned in an earlier post this class,   http://blog.techemstudios.com/ase-coding.html, this process is used extensively to come up with solutions for challenges of all kinds. I hope to further explore this in our Design Thinking and Gaming summer camp. They can choose to use this feedback to continue editing their published game.  &lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; .mine&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Course Wrap-Up &amp;amp; A Look at Our Design Approach&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;For the second half of the ASE Coding, we learned about the design thinking process and we used this practice to design our own game(s).&lt;/p&gt;
&lt;p&gt;We became comfortable with making games on various platforms (Floors, Hyperpad and Gamepress). During the course of our game design, we utilized design thinking by having our rough drafts played by other classmates to provide feedback to one another.&lt;/p&gt;
&lt;p&gt;While working from these game design apps, we learned various concepts of computer science and from the coding half of the course; such as, logical thinking, conditions(if this, then..), creating variables.&lt;/p&gt;
&lt;p&gt;I will send out individual emails to you all that will have the name of the project(s) the students have been working on so you can get to them. They have been working on their projects in either Floors or Hyperpad, or both.&lt;/p&gt;
&lt;p&gt;Design thinking is a user-centered approach to solving everyday problems. I have been using a rough outline of the design thinking process as it pertains to this course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Observation  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are your favorite games to play?&lt;/li&gt;
&lt;li&gt;Why are they your favorite games?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainstorming (design thinking questions)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What makes your favorite games fun to play? [what makes these games fun?]  &lt;/li&gt;
&lt;li&gt;What would you include in your game?  &lt;/li&gt;
&lt;li&gt;What would you leave out for your game?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protoyping  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create your game!  &lt;/li&gt;
&lt;li&gt;Keep in mind the brainstorming topics and design thinking questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementation  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test your game  &lt;ul&gt;
&lt;li&gt;what do you like?  &lt;/li&gt;
&lt;li&gt;what could you change?  &lt;/li&gt;
&lt;li&gt;what's missing? what could you add?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collaborate  &lt;ul&gt;
&lt;li&gt;have someone else play your game - vice versa  &lt;/li&gt;
&lt;li&gt;get feedback/provide feedback  &lt;/li&gt;
&lt;li&gt;repeat the process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We used this process to make awesome games!  &lt;/p&gt;
&lt;p&gt;Note: We are unable to publish projects on Gampress. This app is for the most part, disabled, the creaters of the app moved their efforts to their new app, Hyperpad.  &lt;/p&gt;
&lt;h1&gt;***  ||||||| .r248&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Title: Course Wrap-Up  &lt;br&gt;
Author: Josef Seiler&lt;br&gt;
Date: 2016-5-5&lt;br&gt;
Category: Classes&lt;br&gt;
Tags: floors, hyperpad, coding, game design, design thinking&lt;br&gt;
Summary: WEMS ASE Coding  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Course Wrap-Up &amp;amp; A Look at Our Design Approach&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For the second half of the ASE Coding, we learned about the design thinking process and we used this practice to design our own game(s).&lt;/p&gt;
&lt;p&gt;We became comfortable with making games on various platforms (Floors, Hyperpad and Gamepress). During the course of our game design, we utilized design thinking by having our rough drafts played by other classmates to provide feedback to one another.&lt;/p&gt;
&lt;p&gt;While working from these game design apps, we learned various concepts of computer science and from the coding half of the course; such as, logical thinking, conditions(if this, then..), creating variables.&lt;/p&gt;
&lt;p&gt;I will send out individual emails to you all that will have the name of the project(s) the students have been working on so you can get to them. They have been working on their projects in either Floors or Hyperpad, or both.&lt;/p&gt;
&lt;p&gt;Design thinking is a user-centered approach to solving everyday problems. I have been using a rough outline of the design thinking process as it pertains to this course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Observation  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are your favorite games to play?&lt;/li&gt;
&lt;li&gt;Why are they your favorite games?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brainstorming (design thinking questions)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What makes your favorite games fun to play? [what makes these games fun?]  &lt;/li&gt;
&lt;li&gt;What would you include in your game?  &lt;/li&gt;
&lt;li&gt;What would you leave out for your game?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protoyping  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create your game!  &lt;/li&gt;
&lt;li&gt;Keep in mind the brainstorming topics and design thinking questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementation  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test your game  &lt;ul&gt;
&lt;li&gt;what do you like?  &lt;/li&gt;
&lt;li&gt;what could you change?  &lt;/li&gt;
&lt;li&gt;what's missing? what could you add?  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collaborate  &lt;ul&gt;
&lt;li&gt;have someone else play your game - vice versa  &lt;/li&gt;
&lt;li&gt;get feedback/provide feedback  &lt;/li&gt;
&lt;li&gt;repeat the process  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We used this process to make awesome games!  &lt;/p&gt;
&lt;p&gt;Note: We are unable to publish projects on Gampress. This app is for the most part, disabled, the creaters of the app moved their efforts to their new app, Hyperpad.  &lt;/p&gt;
&lt;p&gt;***  &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; .r249&lt;/p&gt;</content><category term="floors"></category><category term="hyperpad"></category><category term="coding"></category><category term="game design"></category><category term="design thinking"></category></entry><entry><title>Led Pendant Follow-up</title><link href="/led-pendant-follow-up.html" rel="alternate"></link><published>2016-05-16T00:00:00-04:00</published><updated>2016-05-16T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2016-05-16:/led-pendant-follow-up.html</id><summary type="html">&lt;p&gt;Follow up on LED pendant projects&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Thank you!&lt;/h3&gt;
&lt;p&gt;I want to pass on my enthusiastic thanks for letting us provide
Technology Enrichment to you and your kids! &lt;/p&gt;
&lt;h3&gt;LED Pendant Information&lt;/h3&gt;
&lt;p&gt;Here is some more information about the LED pendants your kids coded
as the final project for their Elementary Computer Science class. And, if your kid did not get to complete her/his
code, please
&lt;a href="mailto:info@techemstudios.com?subject=finish-led"&gt;send us an email&lt;/a&gt;
so that we can setup a time you all can come
by our studio at Shady Grove and Nuckols to complete the coding.&lt;/p&gt;
&lt;p&gt;The pendant consists of three main parts: the 8x8 LED matrix display;
a microcontroller (it's actually a &lt;a href="https://www.adafruit.com/products/1222"&gt;"Gemma" microcontroller from
Adafruit&lt;/a&gt;); and the lithium polymar (&lt;a href="https://www.adafruit.com/products/1578"&gt;lipo&lt;/a&gt;) rechargeable battery. There
is an "on/off" switch on the Gemma or you simply plug the battery in to start the
display and unplug to stop. The battery plugs into the bottom of the
microcontroller in the off-white or black receptacle. The socket for
the battery is quite tight, so it may take some fingernails and
pulling the white connector back and forth to ease it out of the
socket. Please don't pull by the wires -- the wires will come out of
the connector if they are yanked.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gemma battery socket" src="/images/gemma-battery.jpg"&gt;&lt;/p&gt;
&lt;p&gt;On the top of the microcontroller is a micro USB receptacle which is
used to transfer the code to the microcontroller (any USB connector
will work to connect a laptop/desktop to the
microcontroller). However, this plug does not charge the battery. See
the section below if you and your kid would like to get the software
necessary to refine their code or re-code their LED.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gemma mini usb socket" src="/images/gemma-usb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;You should also have a very &lt;a href="https://www.adafruit.com/products/1304"&gt;small charger&lt;/a&gt; for the battery. This
charger plugs into a USB port and will charge the lipo battery. There
is a red light when charging and a green light that indicates the
battery is fully charged.&lt;/p&gt;
&lt;h3&gt;LED Coding information&lt;/h3&gt;
&lt;p&gt;There are detailed tutorials available at adafruit if you would like
to know how we constructed the pendant and all the component
specifications. However, this is a quick overview to get you
(re)coding the LED frame designs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;a href="https://learn.adafruit.com/introducing-gemma/setting-up-with-arduino-ide"&gt;Arduino IDE v1.05 with Gemma software&lt;/a&gt; for your computer or laptop.&lt;/li&gt;
&lt;li&gt;Configure the Arduino IDE to use the Gemma 8MHz and tinyISP.&lt;ul&gt;
&lt;li&gt;Tools -&amp;gt; Board -&amp;gt; Adafruit Gemma 8MHz&lt;/li&gt;
&lt;li&gt;Tools -&amp;gt; Programmer -&amp;gt; USBtinyISP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download the required
 &lt;a href="https://github.com/adafruit/TinyWireM/archive/master.zip"&gt;LED library&lt;/a&gt;,
  unzip and put it in the Adafruit Arduino
libraries directory.&lt;ul&gt;
&lt;li&gt;Put the TinyWireM directory in your Documents/Arduino/libraries directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://secure.techemstudios.come/enrolled_children"&gt;Login&lt;/a&gt; to our
  website and download your code or send us an email if you have
  not received information on how to get your code.&lt;/li&gt;
&lt;li&gt;Unzip your code into a directory.&lt;/li&gt;
&lt;li&gt;Go into that directory and double-click on the file named for your
kid with a .ino suffix. This will launch Adafruit Arduino.&lt;/li&gt;
&lt;li&gt;The LED design is in the "bmo.h" file that will be automatically
loaded on the second tab when you launch Arduino (for those of you who
have programmed in C or C++ this is simply a header file). Your child
should know how to edit this file to enhance or change their design.&lt;/li&gt;
&lt;li&gt;Anywhere there is a "//" is a code comment and the text after it
    is for explanation and not used in the design.&lt;/li&gt;
&lt;li&gt;Each "frame" of the design consists of 8 lines of 8 1's and 0's
    preceded by a "B" and followed with a ",". Thus, the lines
    correspond to the rows in the matrix and a 1 will light the led at
    that position and a 0 will turn off the led at that position.&lt;/li&gt;
&lt;li&gt;Each frame concludes with a decimal number on the 9th line
      followed by a comma. This decimal number represents the delay in
      hundredths of a second for this frame. For example, if you want
      the first frame to display for half a second, use 50. If you
      want it to display for a whole second, use 100. This value can
      only go up to 255 (a little over 2.5 seconds).&lt;/li&gt;
&lt;li&gt;The file has some statements at the beginning of the file that you
    shouldn't change and the file must conclude with a "};" on the last line.&lt;/li&gt;
&lt;li&gt;Once you are happy with your design, you should compile it to make
sure there are no errors.&lt;/li&gt;
&lt;li&gt;After an error-free compile, plug in your microcontroller and you
have about 10 seconds to click on the "upload" icon (on the top left
of the IDE, there is a right arrow for upload) once the red light on
the Gemma starts flashing to transfer the
code to the microcontroller. Please note, the newer Gemma
microcontrollers (late 2015 classes) take a few times plugging into
your computer before they will go into the programming mode. Make sure
the red light is flashing before you attempt the code upload.&lt;/li&gt;
&lt;li&gt;Make sure you are happy with the design -- if you are, you may unplug
  the USB and use the battery to power the microcontroller.&lt;/li&gt;
&lt;li&gt;If you want to change the design again, it is easiest to unplug the
  usb until you have re-compiled the code and plug in when you are
  ready to try again.&lt;/li&gt;
&lt;li&gt;Wait a few seconds for the code to transfer and the microcontroller
to reboot and display the frames in your design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, feel free to comment here or shoot us an email if you have ANY
questions or issues.&lt;/p&gt;</content><category term="computer science"></category><category term="led"></category><category term="gemma"></category><category term="arduino"></category><category term="coding"></category></entry><entry><title>Programming (Spring 2016)</title><link href="/programming-spring-2016.html" rel="alternate"></link><published>2016-05-09T00:00:00-04:00</published><updated>2016-05-09T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2016-05-09:/programming-spring-2016.html</id><summary type="html">&lt;p&gt;Concepts and Homework&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Spring 2016 Programming, Tuesday mornings and Thursday nights&lt;/h3&gt;
&lt;p&gt;We'll use this blog page to post some of the code/concepts we learn in class and to post the challenges/homework to ensure you all are practicing in between classes. Just like sports or other schools subjects, practice makes perfect. At this point in your learning to code, the more you practice writing code and testing it and exploring changes and modifications, the better you will get. Remember, by the end of this class, you should be able to write somewhat complex programs to solve problems. Feel free to contact me via email if you have questions or use the comments section below.&lt;/p&gt;
&lt;h3&gt;Some more background for parents&lt;/h3&gt;
&lt;p&gt;For this class we are using Python. Specifically, we have been using Python 2.7 which you can download and install from &lt;a href="http://www.python.org"&gt;python.org&lt;/a&gt;. Your student should know how to launch Python's editor, IDLE and use that to create and modify programs. They are learning the syntax for the language in our class (as well as the general terms we used to describe part of a program, like: identifier, keyword, literal, expression, statement, conditional, function, etc.) It will take awhile for them to absorb these terms and thats ok -- we'll review them practically every class. You can always take the code from this page and paste it into a new file in IDLE and from the menu, choose Run -&amp;gt; Run Module which will run the program in another window.&lt;/p&gt;
&lt;h3&gt;The random sentence code&lt;/h3&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/wray/4e469b9d87cb8d7e2bbe.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3&gt;Assignment 1&lt;/h3&gt;
&lt;p&gt;Using the random sentence code, just as we replaced the nouns with animals, try replacing your verbs with verbs form the random from random lists: https://www.randomlists.com/data/verbs.json .&lt;/p&gt;
&lt;p&gt;Then, you can explore replacing the object of your sentence with a noun from the pictionary list from random lists:
https://www.randomlists.com/data/pictionary.json .&lt;/p&gt;
&lt;h3&gt;Moon weight code&lt;/h3&gt;
&lt;p&gt;&lt;script src="https://gist.github.com/wray/a6555c41154642196d9f.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3&gt;Assignment 2&lt;/h3&gt;
&lt;p&gt;Take a look at the moon weight code and make sure you understand how to define a function and then use (or call) a function. As we discussed, this is a fundamental concept in many languages, especially Python. Good programmers will break up their code into functions to avoid using the same code (patterns of code) over and over again throughout their program. Remember, this is your primary weapon to support DRY (DO NOT REPEAT YOURSELF).&lt;/p&gt;
&lt;p&gt;Now, for the hard part of the assignment. Go back to your random sentence code and assignment 1 where I asked you to use a list of verbs and pictionary. Notice that you will end up repeating 2 lines of code every time you grab a list. And this code is pretty complex and tricky (so it's easy to mistype and introduce a mistake). So, look at those lines and pick out all the parts that are exactly the same and the small part that is different. You should then be able to put that code in a function. And take the one place that HAS TO BE "different" and use that as input into the function. So, try putting that code into a function defined like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="c1"&gt;# Your code goes here&lt;/span&gt;

     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, this function takes in as input (one parameter), the name of the word collection from the randomlists site, and returns a random word from that list. This is a little tricky because your existing code may use a list variable that is specifically named (e.g. animals). When you put this into a function that can be retrieving whatever list is specified by the input, you will want to make that variable less specific (e.g. words) -- in other words, this variable name does not have to change for each collection. The other hint in solving this involved string addition (we call concatenation). You will need to change the url to get the specified list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.randomlists.com/data/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;collection_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.json&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, remember in class we wrote some code where we would use a function on a function (call a function within a function call). For extra credit, you can use this technique to make your function definition just one line of code. Here is an example of that syntax -- note how the parenthesis control the order of the functions (just like in math). The inner function will be called first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;12&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As always, comment here or email me if you have an issues or questions.&lt;/p&gt;
&lt;h3&gt;Assignment 3&lt;/h3&gt;
&lt;p&gt;Here is a real quick assignment to have you all continue to practice converting a problem to a programmed solution. Create a program that generates the &lt;a href="https://www.mathsisfun.com/numbers/fibonacci-sequence.html"&gt;Fibonacci Sequence&lt;/a&gt;. Create the sequence in a Python list. You can simply calculate the first 20 or 30 numbers. For extra credit, use a Python function as part of your solution.&lt;/p&gt;
&lt;h3&gt;Assignment 4&lt;/h3&gt;
&lt;p&gt;To make sure we get some more creativity into the class, we worked on a text-based choose your own adventure game in class. So, keep working on your choose your own adventure game (text version). Here is my short little choose your own adventure, just for your reference. Think about how your adventure design is like an upside down tree with branches. We actually call these blocks of code branches! Think about how to test your program -- you'll want to make sure you visit every branch to ensure all of your code works.&lt;/p&gt;
&lt;script src="https://gist.github.com/wray/48cef3a6766ece0d8370.js"&gt;&lt;/script&gt;

&lt;h3&gt;Assignment 5&lt;/h3&gt;
&lt;p&gt;Make sure you have your fibonnacci program working with the graph. Explore the matplotlib library by graphing different lists: remember, it will simply plot x,y coordinates when provided a list of x values and a list of y values. The lists should be the same size.&lt;/p&gt;
&lt;p&gt;Spoiler alert!! Please make sure your code is working first, before you take a look at this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pyplot&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Assignment 6&lt;/h3&gt;
&lt;p&gt;Because Blaise Pascal is considered an early Computer Scientists and actually created and sold his mechanical "Pascal's Calculater" that is a wonderful example of early mechanical computers. Let's honor him by creating a program to generate &lt;a href="http://www.mathsisfun.com/pascals-triangle.html"&gt;Pascal's Triangle&lt;/a&gt;. As you think about the steps to create each row in the triangle, see if you can create a function that takes as input a row in the triangle to return the next row.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pascal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prev_row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="c1"&gt;# Your code goes here&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With a simple function to compute the next row  you can create a loop that calls this function repeatedly to build the triangle. One hint  is that you need to start the triangle with a list containing the number 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another hint is that the second row is a special case -- youf function could simply return [1,1] when input [1], because the Pascal's triangle pattern is much simpler to implement once you have 2 numbers in your list.&lt;/p&gt;
&lt;p&gt;For extra credit, you can test your triangle by making sure that the sum of each row is equal to 2 raised to the row level in the tree, using 0 for the first row. In python, we use ** to indicate an exponent. So, the sum of the first row should equal 2**0, which is true cause the first row is simply 1. The second row is [1,1] so the sum is 2, which is equal to 2**1. And so on, and so on. And for super extra credit, you can graph the sums of the row -- use the row level for the y axis and the sum for the x axis.&lt;/p&gt;
&lt;h3&gt;Assignment 7&lt;/h3&gt;
&lt;p&gt;Make sure you understand how we solved Assignment 6 and you are clear on the difference between defining a function and calling (or using) a function. Because we wrote a function that returns the next row in Pascal's triangle based on the current row input, we are able to efficiently generate the triangle.&lt;/p&gt;
&lt;p&gt;For the next assignment, I'd like for you all to try and get pyglet installed and run the following simple program. To install pyglet, you can go &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Home"&gt;here&lt;/a&gt; and actually choose the &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Download"&gt;download&lt;/a&gt; link.&lt;/p&gt;
&lt;p&gt;Once downloaded, you should be able to unzip the download and look for a file in the directory called setup.py. You should be able to run this by double-clicking on it. Or you may have to launch IDLE (python) and open that file and choose run. Running that file will install pyglet on your machine and then you will be able to start using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyglet&lt;/span&gt;

&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyglet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyglet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;font_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;font_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Times New Roman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_draw&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on_draw&lt;/span&gt;

&lt;span class="n"&gt;pyglet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Assignment 8 (started in class, can finish at home)&lt;/h3&gt;
&lt;p&gt;Whether you realize it or not, you have already been using Object Oriented concepts because Python is an object-based language. We have discussed in class over the past two weeks the different between a class and an object -- a class provides the definition (code) so that many objects can be created from that class. Similar to functions, you define the class once to be used again and again every time you need an object of that class. We started with a class to define a multi-sided die and worked up to a simple dice rolling exercise where each die keeps track of its own history.&lt;/p&gt;
&lt;p&gt;See the following gist -- should be similar to the code you wrote in class:
&lt;script src="https://gist.github.com/wray/3f56149db45d954beed20764ad1b7c1e.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;To keep going with this assignment, think about how you could add code to the MultiSidedDie class to keep track of how often each side is rolled. The solution requires creating a dictionary variable in the class. The dictionary should have a key for each side of the dice where the value is updated each time that side is rolled. Using this stats dictionary and history list, you can then calculate the roll percentage for each side.&lt;/p&gt;
&lt;p&gt;Remember the syntax for a dictionary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# creating and populating a dictionary&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;

&lt;span class="c1"&gt;# getting values from a dictionary&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Assignment 9 (also mostly done in class)&lt;/h3&gt;
&lt;p&gt;One of the many benefits of Object Oriented design and programming is to organize your code the same way humans organize their world -- classifications and class hiearchies. Defining a general class allows you to define more specific sub-classes without having to re-define the parent class methods. For example, we started to create some code to "model" a book. When using a book in the real world, you need to be able to read the book, turn pages, and place a bookmark to pick up where you left off before.&lt;/p&gt;
&lt;p&gt;Review the following code which should look similar to the code you wrote in class:
&lt;script src="https://gist.github.com/wray/707297e73e401d01329b87060b48ddbf.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;For fun, think about what you would need to do to create another sub-class of Book that is a pop up book.&lt;/p&gt;
&lt;h3&gt;Python 3 and Graphics&lt;/h3&gt;
&lt;p&gt;We are going to change direction a little bit and use Python 3 now and the graphics that come with Python 3 (along with a simple graphics library to make things a bit easier).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;a href="http://python.org"&gt;Python 3&lt;/a&gt; (if you haven't already).&lt;/li&gt;
&lt;li&gt;Download &lt;a href="http://mcsp.wartburg.edu/zelle/python/graphics.py"&gt;graphics.py&lt;/a&gt; and put the file in the same folder as your python code.&lt;/li&gt;
&lt;li&gt;Create a simple file using the Python3 IDLE with simply:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;graphics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Run the program and in the window that opens, type in this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphWin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You should see another window has popped up.&lt;/li&gt;
&lt;li&gt;So, then you can:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget, you can "use the source, Luke" and open the graphics.py file to see what other options you have -- we'll be using this graphics package for the final projects.&lt;/p&gt;
&lt;h3&gt;Assignment 10 (mostly covered in class)&lt;/h3&gt;
&lt;p&gt;Once you have graphics setup as above, we played around with the graphics file and talked about how it is Object-Oriented (as is most graphics modern graphics packages). Not only can we draw shapes in our graphics window, but we can also create entry boxes and wait for mouse clicks.&lt;/p&gt;
&lt;p&gt;However, we quickly found that the graphics.py library doesn't include a button. So, we used our new Object-Oriented skills to extend the library to include a button. Make sure your code for the button is working for this assignment. Don't worry if some of the syntax seems odd -- class initializers can be confusing because the method must be named &lt;strong&gt;init&lt;/strong&gt; . And when we extend classes, we will want to call the parent class' initializer (the first line of code in our Button initializer). We then did something even more advanced -- we overrode the draw method in Rectangle to make sure our button class draws not just the rectangle, but also the text label.&lt;/p&gt;
&lt;script src="https://gist.github.com/wray/b4744c0bdea2ccd7e3cc0e5b8150f8f2.js"&gt;&lt;/script&gt;

&lt;h3&gt;Assignment 11&lt;/h3&gt;
&lt;p&gt;For the final two weeks of class I'd like for everyone to go back to their choose your own adventure game and have it run with a graphics window. I'll start posting a few hints for that here.&lt;/p&gt;
&lt;p&gt;I hope you all have been able to carry on with what we started in class. My graphics choose your own adventures follows below. Please come to class with questions on my use of the keywords break and pass.&lt;/p&gt;
&lt;script src="https://gist.github.com/wray/11b9c498651c14ef81e7d33a028438cf.js"&gt;&lt;/script&gt;

&lt;h3&gt;Final Assignment&lt;/h3&gt;
&lt;p&gt;We have also been talking about the Dice Poker game so the final final project will be to also make that game use a graphics interface. You'll need to show the dice, the player's score and their current roll score. You'll need to have buttons to roll again as well as some way to choose which dice to re-roll.&lt;/p&gt;</content><category term="python"></category><category term="pythonista"></category></entry><entry><title>Elementary Computer Science</title><link href="/elementary-computer-science.html" rel="alternate"></link><published>2016-05-03T00:00:00-04:00</published><updated>2016-05-03T00:00:00-04:00</updated><author><name>Josef Seiler</name></author><id>tag:None,2016-05-03:/elementary-computer-science.html</id><summary type="html">&lt;p&gt;Elem/Mid Intro to Computer Science&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Notes for the final sessions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This week we are starting on our final project. We will use binary to code our very own LED pendant! We will use concepts we learned from the binary language, the language computers speak. Specifically, 1 codes for "on", and 0 codes for "off." First, we will make a design using pencil and paper. Then, we will use the Koder app to transfer our code to upload on the pendant. We will complete this for the final class, next week, so you can take the pendants home and show them off!&lt;/p&gt;
&lt;p&gt;Last week we wrote our first program in Pythonista, the classic "Hello World" program. We also wrote code to generate a calculator that could perform the following operations: addition, subtraction, multplication and division.&lt;/p&gt;
&lt;p&gt;Some computer pioneers we reviewed from the previous week:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alan Turing  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;invented the Turing Machine  &lt;/li&gt;
&lt;li&gt;defined core concepts of computer science: computation and algorithm  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grace Hopper  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a Navy Admiral  &lt;/li&gt;
&lt;li&gt;coined the term "debugging" (literally, after finding a moth in one of the machines she was working on!)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edsger Dijkstra  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recieved Turing Award  &lt;/li&gt;
&lt;li&gt;pioneer of distributed computing   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Barbara Liskov&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recieved Turing Award&lt;/li&gt;
&lt;li&gt;Object-Oriented Programming  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also learned how to search for something, using a binary search tree! When we use a binary search tree, we compare each node and we either search to left subtree or right subtree or we 'cut' our tree in half. This allows a search to happen much faster than it would otherwise.We explored this by picking a number between 1 and 20, then searching our tree until we found (or did not find) that number.&lt;/p&gt;
&lt;p&gt;A few terms from the past two weeks:&lt;br&gt;
&lt;strong&gt;computer program&lt;/strong&gt; &lt;em&gt;a set of written instructions to be carried out by the computer.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;algorithm&lt;/strong&gt; &lt;em&gt;a procedure for solving a problem.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;procedure&lt;/strong&gt; &lt;em&gt;a set of reusable instructions&lt;/em&gt; - &lt;em&gt;remember using procedures in lightbot?&lt;/em&gt;&lt;/p&gt;</content><category term="pythonista"></category><category term="koder"></category><category term="LED pendant"></category><category term="binary search tree"></category></entry><entry><title>ECS1 at Tech Em</title><link href="/ecs1-at-tech-em.html" rel="alternate"></link><published>2016-03-03T00:00:00-05:00</published><updated>2016-03-03T00:00:00-05:00</updated><author><name>Joe Seiler</name></author><id>tag:None,2016-03-03:/ecs1-at-tech-em.html</id><summary type="html">&lt;p&gt;Elementary Computer Science&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;strong&gt;Intro to Elementary Computer Science&lt;/strong&gt;&lt;/h1&gt;
&lt;h2&gt;What we went over: Variables/values&lt;/h2&gt;
&lt;h1&gt;In terms of math, we defined a variable to be a quantity that is able to assume different numerical values.Variables store values so we can use them multiple times.&lt;/h1&gt;
&lt;hr&gt;
&lt;h1&gt;What apps we used in class: &lt;strong&gt;Hopscotch&lt;/strong&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h1&gt;Exercise we completed in Hopscotch:&lt;/h1&gt;
&lt;h1&gt;To explore how to use values within variables, we programmed our character, a text object (your name) to make a square using a loop (from our first Hopscotch challenge last week).&lt;/h1&gt;
&lt;h1&gt;We assigned a value (which is constant, this way we can use it more than once) as "X", some of you chose your name or other word for the value.&lt;/h1&gt;
&lt;h1&gt;We set our value to display a number, "1."&lt;/h1&gt;
&lt;h1&gt;We then used the value we created to set our text object as that value ("X"). Our text object was now displaying the number 1 as it performed the sequence of instructions to make a square.&lt;/h1&gt;
&lt;h1&gt;To have our value continuously count up, we input 'Increase value' to be a part of our square instructions. We set it to increase our value "X" by 1.&lt;/h1&gt;
&lt;h1&gt;Now, when we played our square instructions, each time your object turned to make the corner of the square, that number value increased by 1!&lt;/h1&gt;
&lt;h1&gt;If you had your loop repeat 100 times or forever (endless loop), the object would increase its value by 1 until it reached 100 or it would keep counting up to infinity!&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ar_aYu-_WHI"&gt;Link to a simliar exercise we did to showcase variable usage in Hopscotch app&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h1&gt;Terms:&lt;/h1&gt;
&lt;h2&gt;&lt;strong&gt;A Variable&lt;/strong&gt; a quantity that is able to assume different numerical values.&lt;/h2&gt;
&lt;h2&gt;&lt;strong&gt;Value&lt;/strong&gt; remains constant.&lt;/h2&gt;
&lt;h2&gt;&lt;strong&gt;Loop&lt;/strong&gt; a sequence of instructions that is repeated until it recieves the order to stop.&lt;/h2&gt;
&lt;hr&gt;
&lt;h1&gt;Next class we will recap on logic gates and learn how we can combine them to form adders!&lt;/h1&gt;
&lt;hr&gt;
&lt;h1&gt;See you next class, March 21st!&lt;/h1&gt;</content><category term="variables"></category><category term="hopscotch"></category></entry><entry><title>Gaming at TES (Fall 2015)</title><link href="/gaming-at-tes-fall-2015.html" rel="alternate"></link><published>2015-11-18T00:00:00-05:00</published><updated>2015-11-18T00:00:00-05:00</updated><author><name>Wray</name></author><id>tag:None,2015-11-18:/gaming-at-tes-fall-2015.html</id><summary type="html">&lt;p&gt;Gaming ASE follow-up&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks again for letting Tech Em provide After School Enrichment for
your kids!&lt;/p&gt;
&lt;p&gt;We worked primarily in two iOS-based apps for this class: Floors and
GamePress/Hyperpad.&lt;/p&gt;
&lt;h3&gt;Floors&lt;/h3&gt;
&lt;p&gt;Floors is available for iOS (free) at &lt;a href="http://www.projectpixelpress.com"&gt;Pixel Press Floors&lt;/a&gt;.
Floors leverages "Design Thinking" -- we asked the kids
to think about the aspects of games that they like versus those that
they don't like. We actually played some games in the Floors arcade
for some comparisons before they started on their games. All students
have projects in the Floors arcade. I know some of them had better
names for there games, but in the spirit of anonymity while making
sure they can find their games, I published them in the arcade using
the techemstudios account naming them "TES-N" where N is their iPad
number (refer to your email).&lt;/p&gt;
&lt;h3&gt;GamePress&lt;/h3&gt;
&lt;p&gt;Game Press is available on iOS (free) at &lt;a href="http://www.gamepressapp.com"&gt;GamePress App&lt;/a&gt;.
GamePress is a bit more technical and uses a behavior-oriented
strategy for creating games. This is similar to apps like Scratch, but
in GamePress, the options are much more complex and students can
adjust things like the physics-related aspects of characters and
enemies. If your student worked through a GamePress App, it will be on
their thumb drive. What you'll need to do is first install
GamePress app on your iOS device and either email the .tap
file on the thumb drive to your iOS device (iPad) or AirDrop the file
to your iOS device. Your device should give you the option to open up
the file in GamePress to play the game and/or continue editing it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The classic two-player tank game" src="/images/hs-talk-35.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;More&lt;/h3&gt;
&lt;p&gt;Some of the students preferred Floors and kept working on
their games there and some moved on with GamePress. I would certainly encourage them to keep working (or create new games) with either app.&lt;/p&gt;
&lt;p&gt;Please don't hesitate to comment here or email us if you have any
feedback or questions. We'd love to help these students continue
exploring software creation and learn more about Computer Science and
Software Engineering!&lt;/p&gt;</content><category term="Floors"></category><category term="GamePress"></category><category term="Hyperpad"></category></entry><entry><title>Coding at TES (Fall 2015)</title><link href="/coding-at-tes-fall-2015.html" rel="alternate"></link><published>2015-11-17T00:00:00-05:00</published><updated>2015-11-17T00:00:00-05:00</updated><author><name>Wray</name></author><id>tag:None,2015-11-17:/coding-at-tes-fall-2015.html</id><summary type="html">&lt;p&gt;Gaming ASE follow-up&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks again for letting Tech Em provide After School Enrichment for
your kids!&lt;/p&gt;
&lt;p&gt;We worked primarily using iOS-based apps for this class. The list of
those apps is provided below along with iOS alternatives where
appropriate:&lt;/p&gt;
&lt;h3&gt;Lightbot&lt;/h3&gt;
&lt;p&gt;Students guide a robot around 3D blocks while learning key Coding
terms and concepts. I highly encourage you to get this app for your
student and encourage them to work through the levels and read the
instructions and guidelines as they go along -- we discussed many of
them throughout the course. Go to &lt;a href="http://lightbot.com"&gt;lightbot.com&lt;/a&gt; for
more information and to get the app for Android or your desktop/laptop.&lt;/p&gt;
&lt;h3&gt;Hopscotch&lt;/h3&gt;
&lt;p&gt;Building on some of the concepts learned in Lightbot while adding a
few more aspects of behavior-oriented programming,
&lt;a href="http://gethopscotch.com"&gt;hopscotch&lt;/a&gt; is a terrific platform where kids truly
have fun creating their own apps and games while practicing their
coding techniques.&lt;/p&gt;
&lt;h3&gt;Pythonista&lt;/h3&gt;
&lt;p&gt;We did a little bit of coding in a text-based language, called
&lt;a href="http://python.org"&gt;python&lt;/a&gt;. This coding language is used for education and
in the Software Engineering profession. Getting started here is a
great way to continue your student's education in Computer Science and
programming that will prepare them for High School courses.&lt;/p&gt;
&lt;h3&gt;Floors&lt;/h3&gt;
&lt;p&gt;Floors is available for iOS (free) at &lt;a href="http://www.projectpixelpress.com"&gt;Pixel Press Floors&lt;/a&gt;.
Floors leverages "Design Thinking" -- we asked the kids
to think about the aspects of games that they like versus those that
they don't like. We actually played some games in the Floors arcade
for some comparisons before they started on their games. All students
have projects in the Floors arcade. I know some of them had better
names for there games, but in the spirit of anonymity while making
sure they can find their games, I published them in the arcade using
the techemstudios account naming them "TES-N" where N is their iPad
number (refer to your email).&lt;/p&gt;
&lt;p&gt;Please don't hesitate to comment here or email us if you have any
feedback or questions. We'd love to help these students continue
exploring software creation and learn more about Computer Science and
Software Engineering!&lt;/p&gt;</content><category term="Lightbot"></category><category term="Hopscotch"></category><category term="Python"></category></entry><entry><title>Gaming Camp (July 2015)</title><link href="/gaming-camp-july-2015.html" rel="alternate"></link><published>2015-09-01T00:00:00-04:00</published><updated>2015-09-01T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-09-01:/gaming-camp-july-2015.html</id><summary type="html">&lt;p&gt;Gaming Camp Follow-up&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summer 2015 Gaming (Updated for the August Camp)&lt;/h3&gt;
&lt;p&gt;You can access your &lt;a href="http://www.gamepressapp.com"&gt;Hyperpad (formerly GamePress)&lt;/a&gt; app or Unity projects by logging into TechEm's &lt;a href="https://secure.techemstudios.com"&gt;secure site&lt;/a&gt;. There is an enrollment record for every class, course, or camp you take at TechEm. So, go to the record for the gaming camp and there will be a zipfile that contains the GamePress app(s) you created during the camp or the Unity projects you edited or created.&lt;/p&gt;
&lt;h3&gt;GamePress is now Hyperpad&lt;/h3&gt;
&lt;p&gt;If you started with the Gamepress App and did not convert to &lt;a href="https://itunes.apple.com/us/app/id886106438"&gt;Hyperpad&lt;/a&gt; during camp, you can open your GamePress app in Hyperpad. As you learned, this app provides a
   more advanced visual, event-oriented system that is optimized for
   building classic arcade-style games. Please note that Gamepress is
   no longer available on the app store. The good news is that your GamePress game will open in
   Hyperpad. The bad news is that many of the GamePress graphics
   (sprites) do not convert. Custom graphics convert and you can
   create your own graphics to replace those that did not
   convert. Please, feel free to contact us if you have any issues or
   questions pertaining to the GamePress -&amp;gt; Hyperpad conversions. This
   has actually been a good learning experience for our student
   app/game developers because they see how designing and creating
   graphics is just as time consuming and important as the actual game
   play logic and coding.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Students testing a GamePress app" src="/images/gaming.jpg"&gt;&lt;/p&gt;
&lt;p&gt;For Unity, make sure you have the latest version of Unity installed, unzip the package and you will see your various projects -- play or edit them within the Unity environment.&lt;/p&gt;
&lt;h3&gt;Recap on what we did&lt;/h3&gt;
&lt;p&gt;We split into two groups, the Hyperpad group and the Unity group.&lt;/p&gt;
&lt;p&gt;The Hyperpaders worked mainly with GamePress to build games in answer to several challenges put forth by the instructors. On the final day, they finished up their "primary" games and everyone "tested" the games. There were also several Minecraft sessions to break-up the GamePress sessions.&lt;/p&gt;
&lt;p&gt;Hyperpad gives the students experience in event-driven programming and basic game logic. The games created are arcade style, 2-D. The instructor challenges were presented in order to show the many different types of games and applications that can be created in this environment.&lt;/p&gt;
&lt;p&gt;The Unity group worked at first on a 2D pong game (July Session -- August session they started in 3D). They quickly moved on to more advanced 3D concepts, learning first about camera positioning and terrain in a 3D gamespace. They were able to then import a full 3D game and make their own modifcations.&lt;/p&gt;
&lt;p&gt;Unity is a professional gaming environment with a learning curve that we get the campers over during their week. They should be able to continue editing the games they edited/created and should be ready to continue with advanced edits and basic programming in the environment.&lt;/p&gt;
&lt;p&gt;And contact us if you have any issues or questions!&lt;/p&gt;
&lt;p&gt;Happy gaming. &lt;/p&gt;</content><category term="gaming"></category><category term="gamepress"></category><category term="unity"></category></entry><entry><title>App Camp (Summer 2015)</title><link href="/app-camp-summer-2015.html" rel="alternate"></link><published>2015-08-27T00:00:00-04:00</published><updated>2015-08-27T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-08-27:/app-camp-summer-2015.html</id><summary type="html">&lt;p&gt;App Camp Follow-up&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summer 2015 App Camps&lt;/h3&gt;
&lt;p&gt;For many of the students in app camp this summer, we actually used apps to create apps. This is a nice way to get kids used to some of the basic concepts required to program (code) and ultimately build mobile applications. We jumped around using some of the best learning/app/game creation apps available. And all of them got an introduction to some text-based coding (Python) for some quick learning and exposure to programming language concepts.&lt;/p&gt;
&lt;h3&gt;Apps Used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.techemstudios.com/tablet-app-lightbot.html"&gt;Lightbot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.gethopscotch.com"&gt;Hopscotch&lt;/a&gt; -- Similar to MIT's
   scratch programming system for kids,
   Hopscotch provides a visual programming environment that takes
   advantage of tablet capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gamepress App, which is now &lt;a href="https://itunes.apple.com/us/app/id886106438"&gt;Hyperpad&lt;/a&gt; -- This app provides a
   more advanced visual, event-oriented system that is optimized for
   building classic arcade-style games.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that Gamepress is
   no longer available on the app store. The good news is that your GamePress game will open in
   Hyperpad. The bad news is that many of the GamePress graphics
   (sprites) do not convert. Custom graphics convert and you can
   create your own graphics to replace those that did not
   convert. Please, feel free to contact us if you have any issues or
   questions pertaining to the GamePress -&amp;gt; Hyperpad conversions. This
   has actually been a good learning experience for our student
   app/game developers because they see how designing and creating
   graphics is just as time consuming and important as the actual game
   play logic and coding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="http://python.org"&gt;python programming language&lt;/a&gt; (text-based language) using
 &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pythonista Fun&lt;/h3&gt;
&lt;script src="https://gist.github.com/wray/1f699e6240fb9b0a94a0.js"&gt;&lt;/script&gt;</content><category term="python"></category><category term="pythonista"></category><category term="hyperpad"></category></entry><entry><title>JCC Coding</title><link href="/jcc-coding.html" rel="alternate"></link><published>2015-08-27T00:00:00-04:00</published><updated>2015-08-27T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-08-27:/jcc-coding.html</id><summary type="html">&lt;p&gt;JCC Coding Camp Follow-up&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summer 2015 JCC Coding Camp Recap&lt;/h3&gt;
&lt;p&gt;Thank you so much for sending your kids to our Coding Camp at the JCC
this summer! We've include a brief recap of the different apps we used
that allowed us to present basic to intermediate concepts of
coding. Along with our hands on experience, we had a chance to present
some computer science history and general computing concepts.  &lt;/p&gt;
&lt;p&gt;So, please visit our main &lt;a href="http://techemstudios.com"&gt;site&lt;/a&gt; for
information on continuing your child's education in Computer Science
and Programming. Our
&lt;a href="http://techemstudios.com/all-classes.html"&gt;Fall classes&lt;/a&gt;  start the week of September 14th.&lt;/p&gt;
&lt;h3&gt;Recap on the apps we used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.techemstudios.com/tablet-app-lightbot.html"&gt;Lightbot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.gethopscotch.com"&gt;Hopscotch&lt;/a&gt; -- Similar to MIT's
   scratch programming system for kids,
   Hopscotch provides a visual programming environment that takes
   advantage of tablet capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gamepress App, which is now &lt;a href="https://itunes.apple.com/us/app/id886106438"&gt;Hyperpad&lt;/a&gt; -- This app provides a
   more advanced visual, event-oriented app that is optimized for
   building classic arcade-style games.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href="http://python.org"&gt;python programming language&lt;/a&gt; (text-based language) using
 &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A sample of our mad libs code for pythonista
&lt;script src="https://gist.github.com/wray/eafb281cae007a30f841.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Contact us with questions, more information and feedback&lt;/h3&gt;
&lt;p&gt;We'd love to here from you all by either commenting here on the blog,
emailing us or calling us (Contact Us on our &lt;a href="http://techemstudios.com"&gt;website&lt;/a&gt;).&lt;/p&gt;</content><category term="coding"></category><category term="python"></category></entry><entry><title>Notes on setting up pis for I/O lessons</title><link href="/notes-on-setting-up-pis-for-io-lessons.html" rel="alternate"></link><published>2015-08-21T00:00:00-04:00</published><updated>2015-08-21T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-08-21:/notes-on-setting-up-pis-for-io-lessons.html</id><summary type="html">&lt;p&gt;Some notes and code&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just dropping in some code for instructors, students, and everyone
[updated August 2015].&lt;/p&gt;
&lt;h3&gt;Initial Config&lt;/h3&gt;
&lt;p&gt;For classes and camps, we always start with an SD card that has
raspian (the Operating System) pre-installed. Of course, for the last
camp, we started with blank SD cards! So, on that first day, we were
actually loading the OS on your cards.&lt;/p&gt;
&lt;p&gt;After logging in, we then ran&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo raspi-config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in order to extend the filesystem, set the correct time, and set the
correct keyboard.&lt;/p&gt;
&lt;p&gt;We also configured your wi-fi adapter by running the gui&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;startx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and using the wifi settings to scan for networks, choose the network,
type in the password, and connect. Remember, you'll have to do this
for your home wireless netework. Try to run startx without sudo. If
the GUI doesn't come up, you may have to use sudo. When you are using
the LEDS or the temp sensor, you will have to run python as sudo.&lt;/p&gt;
&lt;h3&gt;Config for LEDs, Minecraft and Temp sensor&lt;/h3&gt;
&lt;p&gt;In lieu of burning a pre-configured SD, we can run this script on a
raspbian pi (model 2 with pre-loaded raspian from Adafruit) in order to get python development tools, the
RPi GPIO library and the DHT library from Adafruit. Note, that this setup
assumes your pi has network (Internet) connectivity. You can type in
these commands separately, starting with the first line not containing
a #.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# Run this command using sudo&lt;/span&gt;

&lt;span class="c1"&gt;# Beforehand, you should expand filesystem, turn on ssh&lt;/span&gt;
&lt;span class="c1"&gt;# and of course configure network.&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;easy_install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;distribute&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt; &lt;span class="n"&gt;RPi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adafruit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Adafruit_Python_DHT&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;Adafruit_Python_DHT&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;LEDs&lt;/h3&gt;
&lt;p&gt;So, for the Output portion of the I/O lesson (easier than input so you
may as well start here), assume a green LED is wired to #20 and a red
LED is wired to #21.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;GPIO&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BCM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GREEN_LED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; 
&lt;span class="n"&gt;RED_LED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GREEN_LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RED_LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;green_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GREEN_LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;red_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RED_LED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, a simple session to use these methods would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;led&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;green_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;red_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;green_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;red_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Extend the LED Morse Code output&lt;/h3&gt;
&lt;p&gt;We started a program that reads input from a user and converts that
input into LED morse code. Start with this snippet and see if you can
finish it -- let us know how you do!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Remember, everything after a # is a comment&lt;/span&gt;
&lt;span class="c1"&gt;# Comments are here for humans to explain code to&lt;/span&gt;
&lt;span class="c1"&gt;# other humans. Anything after a # is ignored by&lt;/span&gt;
&lt;span class="c1"&gt;# the computer&lt;/span&gt;

&lt;span class="c1"&gt;# Use the imports you have for the leds&lt;/span&gt;
&lt;span class="c1"&gt;# For example: from led import *&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;#whatever code you already have here&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# whatever code you already have here&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse_a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse_b&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse_c&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse_d&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse_e&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse_t&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;morse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;morse_&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; not defined in morse yet.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Type in text to convert to morse code.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;morse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you save this file as "morse_output.py" for example, you may run it
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;morse_output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Input Sensor (Temp/Humidity Sensor including in your Tech Em kit)&lt;/h3&gt;
&lt;p&gt;For the Input part of the lesson, here is some code that provides a single simple method to
return temperature and humidity (from a DHT-22 temperature/humidity
sensor &lt;a href="https://learn.adafruit.com/dht-humidity-sensing-on-raspberry-pi-with-gdocs-logging/wiring"&gt;wired to pin #4&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Template code for temperature and humidity from an Adafruit DHT22&lt;/span&gt;
&lt;span class="c1"&gt;# sensor. Don&amp;#39;t forget to update this file if you connect the DHT22 &lt;/span&gt;
&lt;span class="c1"&gt;# to another data pin,&lt;/span&gt;
&lt;span class="c1"&gt;# want to change the delay, or logic for mailing. &lt;/span&gt;
&lt;span class="c1"&gt;# For example, you may only want to&lt;/span&gt;
&lt;span class="c1"&gt;# send notifications when certain thresholds are exceeded.&lt;/span&gt;
&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;span class="c1"&gt;# Code provided for Tech Em students and open under Gnu GPL&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Wray Mills&lt;/span&gt;
&lt;span class="c1"&gt;# 20141115&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Adafruit_DHT&lt;/span&gt;
&lt;span class="c1"&gt;# Tech Em mail utility&lt;/span&gt;
&lt;span class="c1"&gt;# from mailit import *&lt;/span&gt;

&lt;span class="n"&gt;sensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_DHT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DHT22&lt;/span&gt;
&lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_temp_humidity&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;humidity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_DHT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;temp_f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;32.0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;humidity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Launch python with sudo, import this file and call the method to get
the tuple of celsius temperature, fahrenheit temperature, and relative humidity.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rpi prototype board with DHT22 on one side and two LEDs on the other" src="/images/rpi-io.jpg"&gt;&lt;/p&gt;</content><category term="raspberry pi"></category><category term="adafruit"></category><category term="python"></category></entry><entry><title>Minecraft Camp (August 2015)</title><link href="/minecraft-camp-august-2015.html" rel="alternate"></link><published>2015-08-09T00:00:00-04:00</published><updated>2015-08-09T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2015-08-09:/minecraft-camp-august-2015.html</id><summary type="html">&lt;p&gt;August Minecraft Camp follow-up&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some notes on the various things we did or discussed over the week. Some of the students stayed on Minecraft Pocket Edition, while most of the students worked on preparing a world for a final show-down using the PC version. Regardless, you and your students can use this blog post as a reference for doing more on your own with Minecraft.&lt;/p&gt;
&lt;h3&gt;Minecraft PE Server&lt;/h3&gt;
&lt;p&gt;We discussed servers and clients and the networking involved to make games like minecraft work. We setup a minecraft PE server. If you are interested in running a PE server for your own home network, you can find one here (you must use the development version to be compatible with the latest iOS Pocket Edition):&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pocketmine.net"&gt;Get PocketMine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The instructions are relatively straightforward and this server acts similar to the PC server version in that it will create several configuration files after the first time the server is run. However, please keep in mind the following pros and cons when it comes to running this server vs. simply sharing your PE world with others on your network (essentially Minecraft PE can run as a "server" for others on your network).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PocketMine will support more players (especially if you have an i7 machine with 8+ GB ram).&lt;/li&gt;
&lt;li&gt;PocketMine will allow op commands at the console so you have more control over your world.&lt;/li&gt;
&lt;li&gt;Just like the PC edition, PocketMine has access controls (whitelist) to constrain access.&lt;/li&gt;
&lt;li&gt;Just like the PC edition, PocketMine will support some plugins.&lt;/li&gt;
&lt;li&gt;If you expose your PocketMine server to the Internet (port forward), users outside your network can join your server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PocketMine is not as stable and can get glitchy and force reconnects, etc.&lt;/li&gt;
&lt;li&gt;PocketMine does require a separate laptop/pc running it on the network so its not as easy to create an "ad-hoc" world.&lt;/li&gt;
&lt;li&gt;PocketMine is not quite as up-to-date as Minecraft PE and certainly behind the PC edition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another &lt;a href="http://www.howtogeek.com/202961/how-to-run-a-local-minecraft-pe-server-for-fun-and-persistent-world-building/"&gt;nice article&lt;/a&gt; to read with information on PocketMine and configuring it.&lt;/p&gt;
&lt;p&gt;So, the other thing we covered with some of the students in camp is how you can actually get another app that works with Apple's Game Center that allows you to expose your PocketMine PE world outside of your network. This is actually pretty cool, but a little tricky to setup. Furthermore, there are so many people just waiting for new PE worlds to be exposed that your world can quickly be invaded by TNT wielding and lava toting fire starters! The app's site does an ok job explaining how to set things up, but feel free to shoot me an email or comment here if you have some issues:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://itunes.apple.com/us/app/multiplayer-for-minecraft-pe/id609704981?mt=8"&gt;Multiplayer for Minecraft PE&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Minecraft PE powered rails and redstone&lt;/h3&gt;
&lt;p&gt;We also spent some time on minecraft PE showing how one can use powered rails and build binary logic gates! There is a &lt;a href="https://www.youtube.com/watch?v=bLK58PRzaSU"&gt;good YouTube resource&lt;/a&gt; for doing that.&lt;/p&gt;
&lt;p&gt;We didn't get to doing this in PC redstone, but I would encourage that you all try this at home (and let us know how it goes).&lt;/p&gt;
&lt;p&gt;&lt;img alt="August 2015 Minecraft camp" src="/images/minecraft-camp1.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Minecraft Bukkit server and Python&lt;/h3&gt;
&lt;p&gt;So, we also did quite a bit with a version of minecraft known as Bukkit. This is similar to the version that runs on the raspberry pi in that it allows us to make server modifications using Python. Here are roughly the steps we went through (and the students who coded should mostly remember how this goes).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the AdventuresInMinecraft zipfile from your enrollment record (which includes some of "instructor code" that we used during the week) or download the starter kit from &lt;a href="http://blog.techemstudios.com/minecraft-camp-august-2015.html"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go to the "AdventuresInMinecraft" directory&lt;/li&gt;
&lt;li&gt;Run the StartBukkit command&lt;/li&gt;
&lt;li&gt;Launch Minecraft&lt;/li&gt;
&lt;li&gt;Make sure your Minecraft profile is using version 1.6.4 (yes, bukkit is not near the latest version)&lt;/li&gt;
&lt;li&gt;Choose multiplayer, direct connect, with a host of "localhost"&lt;/li&gt;
&lt;li&gt;Launch the Python 2.* "IDLE" application&lt;/li&gt;
&lt;li&gt;Open up any of the modules we created in the "AdventuresInMinecraft/MyAdventures" directory&lt;/li&gt;
&lt;li&gt;The IDLE application has the option to "Run Module" which will run the python code that connects to your running bukkit server and whose results you should see in your running Minecraft application.&lt;/li&gt;
&lt;li&gt;Remember, building large structures (like a sphere of size 100 or greater) will take some time. Build this out of TNT and light and you will likely bog down your server for an hour or so!&lt;/li&gt;
&lt;li&gt;If your world is lagging due to some large build, you can go into "AdventuresInMinecraft/Bukkit" and delete your world! Of course, you are &lt;em&gt;deleting your world&lt;/em&gt;, so test your builds before you build in a world you want to keep.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thank you&lt;/h3&gt;
&lt;p&gt;Thanks again. I probably learned more than you all did and I appreciate that. Please comment here or send me email if you need anything else. For those of you who were using our laptops and want to do the Bukkit server on your own, let me know if you need more detailed instructions and I'll work with you all. Check out our Fall classes coming up. I know you all would do great in these classes and I'm happy to talk to you about which class would be best for your child.&lt;/p&gt;</content><category term="minecraft"></category><category term="python"></category><category term="bukkit"></category></entry><entry><title>3D Printing Summer Camp Recap</title><link href="/3d-printing-summer-camp-recap.html" rel="alternate"></link><published>2015-07-27T00:00:00-04:00</published><updated>2015-07-27T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-07-27:/3d-printing-summer-camp-recap.html</id><summary type="html">&lt;p&gt;3D Printing Camp Follow-up&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summer 2015 3D Printing Camp Recap&lt;/h3&gt;
&lt;p&gt;Thank you so much for sending your kids/coming to our 3D printing
camp. Please see the details below on what we did throughout the week and some pointers and links if you want to continue exploring the 3D printing world.&lt;/p&gt;
&lt;p&gt;Also, please visit our main &lt;a href="http://techemstudios.com"&gt;site&lt;/a&gt; for
information on more summer camps at our studio and our Computer Science and Programming courses. Our Fall schedule will be up this week!&lt;/p&gt;
&lt;h3&gt;Where are the rest of the prints??&lt;/h3&gt;
&lt;p&gt;We have them at the studio. Feel free to come by and pick them up --
we have camps this week and next week from 9 to 4 Monday through
Thursday. We can also ship them to you. And don't hesitate to let us
know if we missed a print or if you would like a replacement print.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jets from the printer" src="/images/3d-fun.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Recap on what we did&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Geometry lesson: 0D, 1D, 2D, and 3D --
    We discussed some mathematical aspects of 3
    dimensions. They immediately started working with the 123D design
    app to create their first "free-form" design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.123dapp.com/design"&gt;123D Design&lt;/a&gt; --
   This app is actually free and is a great start for those just
   starting with CAD or the experienced designer. We use this app
   for a majority of our design work (the students spent a good deal
   of time using it during the week). We encourage the use of "primitive" shapes and
   basic manipulations, but also allow them to use some of the
   "built-in" shapes and full examples from the gallery.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.makerbot.com/printshop"&gt;Print Shop by Makerbot&lt;/a&gt; --
   This app allowed the students to draw a picture on paper, take a
   picture, and "extrude" it into a 3D design. Most of the students
   used it to create rings and some of the other built-in design
   maniuplations. This provides a nice break from the more technical
   CAD-oriented 123D app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D printer pen --
   Throughout the week, the students were allowed to use the 3D
   printer pen to accentuate their designs or create separate designs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minecraft --
   As is the case for most camps for this age group, incorporating
   minecraft is a must. And actually, it works well for a 3D printing
   camp since the minecraft world is 3D. The campers worked on a
   structure in minecraft that we printed in miniature in white.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other technology and math educational apps --
    Because we spent many hours together, we let the students explore some of the other apps we have loaded on our iPads (and use for some of our other classes and camps). One of our popular apps that some tried out is &lt;a href="http://blog.techemstudios.com/tablet-app-lightbot.html"&gt;lightbot&lt;/a&gt;. Let me know if your kid tried out some other apps and I can give you some background and additional information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our printers --
    Some of you all had some questions about printers and buying one for home use. We use &lt;a href="http://makerbot.com"&gt;Makerbot&lt;/a&gt; printers and I highly recommend the previous generation Replicator 2 and Replicator 2x; however, they may be hard to find now. You may even want to research Replicator clones. The newer generation of Replicators with their "smart extruders" have actually proven to be less reliable and "less smart". There is actually a class action lawsuit being filed against Makerbot and their smart extruder technology. As is the case with most emerging technologies, it may be a few more years before a clear leader emerges with reliable products at a good price. And finally, a wonderful place to go and look and all that is being designed for 3D printing is &lt;a href="http://thingiverse.com"&gt;thingiverse&lt;/a&gt;. You'll be amazed at all the great designs people have uploaded to share with the world.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks again and Happy printing! &lt;/p&gt;</content><category term="3dprinting"></category><category term="minecraft"></category></entry><entry><title>JCC 3D</title><link href="/jcc-3d.html" rel="alternate"></link><published>2015-07-24T00:00:00-04:00</published><updated>2015-07-24T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-07-24:/jcc-3d.html</id><summary type="html">&lt;p&gt;3D Printing Camp Follow-up&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summer 2015 3D Printing at the JCC&lt;/h3&gt;
&lt;h3&gt;By Wray Mills and Davis Mohar&lt;/h3&gt;
&lt;p&gt;Thank you so much for sending your kids/coming to our 3D printing camp
at the JCC. Please see the details below on what we did throughout the week and some pointers and links if you want to continue exploring the 3D printing world.&lt;/p&gt;
&lt;p&gt;Also, please visit our main &lt;a href="http://techemstudios.com"&gt;site&lt;/a&gt; for information on summer camps at our studio and our Computer Science and Programming courses. Our Fall schedule will be up next week!&lt;/p&gt;
&lt;h3&gt;Where are the rest of the prints??&lt;/h3&gt;
&lt;p&gt;We are continuing to print some students' 3rd design and everyone's
4th design (most of the 4th designs were built in minecraft). We will
bring the prints back to the JCC and email everyone to let you all
know when they are ready. We appreciate your patience and the students know
that while the 3D printers are really cool, the current consumer and
small-business grade additive 3D printers are slow.&lt;/p&gt;
&lt;h3&gt;Recap on what we did&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Geometry lesson: 0D, 1D, 2D, and 3D --
    On the first day we discussed some mathematical aspects of 3
    dimensions. They immediately started working with the 123D design
    app to create their first "free-form" design. The afternoon
    challenge was a self-portrait.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.123dapp.com/design"&gt;123D Design&lt;/a&gt; --
   This app is actually free and is a great start for those just
   starting with CAD or the experienced designer. We use this app
   for a majority of our design work (the students spent a good deal
   of time using it this week). We encourage the use of "primitive" shapes and
   basic manipulations, but also allow them to use some of the
   "built-in" shapes and full examples from the gallery. The challenge
   for the second day was to design some type of vehicle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.makerbot.com/printshop"&gt;Print Shop by Makerbot&lt;/a&gt; --
   This app allowed the students to draw a picture on paper, take a
   picture, and "extrude" it into a 3D design. Most of the students
   used it to create rings and some of the other built-in design
   maniuplations. This provides a nice break from the more technical
   CAD-oriented 123D app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D printer pen --
   Throughout the week, the students were allowed to use the 3D
   printer pen to accentuate their designs or create separate designs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minecraft --
   As is the case for most camps for this age group, incorporating
   minecraft is a must. And actually, it works well for a 3D printing
   camp since the minecraft world is 3D. The campers worked on a
   structure in minecraft that we will be printing for them during the
   next week. So, the camp did turn into a minecraft camp the last day
   -- once we start with minecraft, its tough to pull the kids back
   into a more traditional design app. But, that's ok, we asked them
   to take turns explaining to the group how minecraft relates to a 3D design
   and printing class. The interesting thing is that most of the kids
   explained that building in minecraft requires creativitiy and a similar creative process used while creating designs in the 123D design app (its just more fun in minecraft).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other technology and math educational apps --
    Because we spent many hours together, we let the students explore some of the other apps we have loaded on our iPads (and use for some of our other classes and camps). One of our popular apps that some tried out is &lt;a href="http://blog.techemstudios.com/tablet-app-lightbot.html"&gt;lightbot&lt;/a&gt;. Let me know if your kid tried out some other apps and I can give you some background and additional information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our printers --
    Some of you all had some questions about printers and buying one for home use. We use &lt;a href="http://makerbot.com"&gt;Makerbot&lt;/a&gt; printers and I highly recommend the previous generation Replicator 2 and Replicator 2x; however, they may be hard to find now. You may even want to research Replicator clones. The newer generation of Replicators with their "smart extruders" have actually proven to be less reliable and "less smart". There is actually a class action lawsuit being filed against Makerbot and their smart extruder technology. As is the case with most emerging technologies, it may be a few more years before a clear leader emerges with reliable products at a good price. And finally, a wonderful place to go and look and all that is being designed for 3D printing is &lt;a href="http://thingiverse.com"&gt;thingiverse&lt;/a&gt;. You'll be amazed at all the great designs people have uploaded to share with the world.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks again and Happy printing! &lt;/p&gt;</content><category term="3dprinting"></category><category term="minecraft"></category></entry><entry><title>Coding Camp 2015</title><link href="/coding-camp-2015.html" rel="alternate"></link><published>2015-07-21T00:00:00-04:00</published><updated>2015-07-21T00:00:00-04:00</updated><author><name>Davis Mohar</name></author><id>tag:None,2015-07-21:/coding-camp-2015.html</id><summary type="html">&lt;p&gt;Review and Follow Up&lt;/p&gt;</summary><content type="html">&lt;h4&gt;By Davis Mohar&lt;/h4&gt;
&lt;p&gt;Thanks for a great week everyone!&lt;/p&gt;
&lt;p&gt;Last week, we split into two groups, beginners and people who already had some experience with coding. The group with experience coding started the week working with python, and the beginner group started out with Lightbot and Hopscotch in order to introduce programming concepts such as finding patterns and creating functions to complete this pattern.&lt;/p&gt;
&lt;p&gt;The advanced group spent the first day on an introduction to python. On the second and third days, we continued with input/output and learned about data stuctures and the turtle library, which provides easy graphics in python. We ended the camp working on some challenges that ranged from more turtle graphics to a dice games.&lt;/p&gt;
&lt;p&gt;The beginner group spent the first day in Lightbot, which focuses on pattern recognition. The first half of the second day we started with Hopscotch, which emphasis creating functions to use multiple times. In the second half of the day, we started with python, learning the basic syntax as well as creating a basic calculator. On the third day we added features on to the calculator, such as the ability to use multiple operators and also created a dice rolling simulator using the python random number library. The final day was spent learning the turtle library.&lt;/p&gt;
&lt;p&gt;Both Lightbot and Hopscotch can be found on the Apple App Store, There is a free trial version of lightbot as well as the full version for $3. Hopscotch is free on the App Store.&lt;/p&gt;
&lt;p&gt;Pythonista, the app we used to write and run python code on the ipads can be downloaded from the App Store for $7 or Python can be downloaded for free to run on your computer &lt;a href="https://www.python.org/downloads/"&gt;here&lt;/a&gt;
(make sure you download Python 2.7.10 and not Python 3.4.3, they have significant differences)&lt;/p&gt;
&lt;p&gt;If you are interested in continuing learning python, &lt;a href="http://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076"&gt;Python for Kids&lt;/a&gt; is a great place to start.&lt;/p&gt;</content><category term="coding"></category><category term="python"></category></entry><entry><title>Some Code for RPi temp uploading</title><link href="/some-code-for-rpi-temp-uploading.html" rel="alternate"></link><published>2015-07-16T00:00:00-04:00</published><updated>2015-07-16T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-07-16:/some-code-for-rpi-temp-uploading.html</id><summary type="html">&lt;p&gt;Some notes and code&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just dropping in some code for students to use.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="c1"&gt;# Google Spreadsheet DHT Sensor Data-logging Example&lt;/span&gt;

&lt;span class="c1"&gt;# Depends on the &amp;#39;gspread&amp;#39; package being installed.  If you have pip installed&lt;/span&gt;
&lt;span class="c1"&gt;# execute:&lt;/span&gt;
&lt;span class="c1"&gt;#   sudo pip install gspread&lt;/span&gt;

&lt;span class="c1"&gt;# Copyright (c) 2014 Adafruit Industries&lt;/span&gt;
&lt;span class="c1"&gt;# Author: Tony DiCola&lt;/span&gt;

&lt;span class="c1"&gt;# Permission is hereby granted, free of charge, to any person obtaining a copy&lt;/span&gt;
&lt;span class="c1"&gt;# of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal&lt;/span&gt;
&lt;span class="c1"&gt;# in the Software without restriction, including without limitation the rights&lt;/span&gt;
&lt;span class="c1"&gt;# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&lt;/span&gt;
&lt;span class="c1"&gt;# copies of the Software, and to permit persons to whom the Software is&lt;/span&gt;
&lt;span class="c1"&gt;# furnished to do so, subject to the following conditions:&lt;/span&gt;

&lt;span class="c1"&gt;# The above copyright notice and this permission notice shall be included in all&lt;/span&gt;
&lt;span class="c1"&gt;# copies or substantial portions of the Software.&lt;/span&gt;

&lt;span class="c1"&gt;# THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&lt;/span&gt;
&lt;span class="c1"&gt;# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&lt;/span&gt;
&lt;span class="c1"&gt;# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&lt;/span&gt;
&lt;span class="c1"&gt;# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&lt;/span&gt;
&lt;span class="c1"&gt;# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&lt;/span&gt;
&lt;span class="c1"&gt;# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&lt;/span&gt;
&lt;span class="c1"&gt;# SOFTWARE.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Adafruit_DHT&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gspread&lt;/span&gt;

&lt;span class="c1"&gt;# Type of sensor, can be Adafruit_DHT.DHT11, Adafruit_DHT.DHT22, or Adafruit_DHT.AM2302.&lt;/span&gt;
&lt;span class="n"&gt;DHT_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_DHT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DHT22&lt;/span&gt;

&lt;span class="c1"&gt;# Example of sensor connected to Raspberry Pi pin 23&lt;/span&gt;
&lt;span class="n"&gt;DHT_PIN&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; 
&lt;span class="c1"&gt;# Example of sensor connected to Beaglebone Black pin P8_11&lt;/span&gt;
&lt;span class="c1"&gt;#DHT_PIN  = &amp;#39;P8_11&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Google Docs account email, password, and spreadsheet name.&lt;/span&gt;
&lt;span class="n"&gt;GDOCS_EMAIL&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GDOCS_PASSWORD&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GDOCS_SPREADSHEET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;XXX&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# How long to wait (in seconds) between measurements.&lt;/span&gt;
&lt;span class="n"&gt;FREQUENCY_SECONDS&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login_open_sheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spreadsheet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Connect to Google Docs spreadsheet and return the first worksheet.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gspread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spreadsheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sheet1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;worksheet&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Unable to login and get spreadsheet.  Check email, password, spreadsheet name.&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Logging sensor measurements to {0}.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GDOCS_SPREADSHEET_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print &amp;#39;Press Ctrl-C to quit.&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# Login if necessary.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;worksheet&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;login_open_sheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GDOCS_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDOCS_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDOCS_SPREADSHEET_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Attempt to get sensor reading.&lt;/span&gt;
&lt;span class="n"&gt;humidity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_DHT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DHT_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DHT_PIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Skip to the next reading if a valid measurement couldn&amp;#39;t be taken.&lt;/span&gt;
&lt;span class="c1"&gt;# This might happen if the CPU is under a lot of load and the sensor&lt;/span&gt;
&lt;span class="c1"&gt;# can&amp;#39;t be reliably read (timing is critical to read the sensor).&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;humidity&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Temperature: {0:0.1f} C&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Humidity:    {0:0.1f} %&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;humidity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Append the data in the spreadsheet, including a timestamp&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;worksheet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append_row&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;9.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;32.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;humidity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Error appending data, most likely because credentials are stale.&lt;/span&gt;
    &lt;span class="c1"&gt;# Null out the worksheet so a login is performed at the top of the loop.&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Append error, logging in again&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="c1"&gt;#time.sleep(FREQUENCY_SECONDS)&lt;/span&gt;
    &lt;span class="c1"&gt;#continue&lt;/span&gt;

&lt;span class="c1"&gt;# Wait 30 seconds before continuing&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wrote a row to {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GDOCS_SPREADSHEET_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#time.sleep(FREQUENCY_SECONDS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="raspberry pi"></category><category term="adafruit"></category><category term="python"></category></entry><entry><title>Minecraft Camp</title><link href="/minecraft-camp.html" rel="alternate"></link><published>2015-06-29T00:00:00-04:00</published><updated>2015-06-29T00:00:00-04:00</updated><author><name>Davis Mohar</name></author><id>tag:None,2015-06-29:/minecraft-camp.html</id><summary type="html">&lt;p&gt;Review and Follow Up&lt;/p&gt;</summary><content type="html">&lt;h4&gt;By Davis Mohar&lt;/h4&gt;
&lt;p&gt;Thanks for such a great Camp everybody!&lt;/p&gt;
&lt;p&gt;Once you download the and unzip the zipfile that is part of your https://secure.techemstudios.com enrollment record, simply follow these instructions to run any of the programs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go into the AdventuresInMinecraft folder, then bukkit, then run the start program&lt;/li&gt;
&lt;li&gt;Start up minecraft&lt;/li&gt;
&lt;li&gt;On the bottom left corner, select new profile, and then on the 'use version' box, select release 1.6.4&lt;/li&gt;
&lt;li&gt;Select Save Profile&lt;/li&gt;
&lt;li&gt;Select Play&lt;/li&gt;
&lt;li&gt;Select Muliplayer&lt;/li&gt;
&lt;li&gt;Click Direct Connect&lt;/li&gt;
&lt;li&gt;In the Server Adress box, enter in localhost&lt;/li&gt;
&lt;li&gt;Back in the AdventuresInMinecraft folder, go into the MyAdventures folder and run any of the programs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are insterested in continuing to learn about programming for minecraft, then you can buy the "Adventures in Minecaft" book &lt;a href="http://www.amazon.com/Adventures-Minecraft-David-Whale/dp/111894691X"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="minecraft"></category><category term="python"></category></entry><entry><title>Minecraft for Parents</title><link href="/minecraft-for-parents.html" rel="alternate"></link><published>2015-06-22T00:00:00-04:00</published><updated>2015-06-22T00:00:00-04:00</updated><author><name>Nathan Parr</name></author><id>tag:None,2015-06-22:/minecraft-for-parents.html</id><summary type="html">&lt;p&gt;Useful Information about Minecraft for Parents&lt;/p&gt;</summary><content type="html">&lt;h4&gt;By Nathan Parr&lt;/h4&gt;
&lt;p&gt;Although Minecraft is a relatively simple game, Minecraft is difficult to describe to someone who has never played.
At its core, Minecraft is about breaking and moving cubes to gain different items and using those items to survive and build.  However, this description does not allude to the complexity of the game which is primarily limited only by your imagination.  The best way to describe the game might be to list some things you can do with it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build electronic circuits&lt;/li&gt;
&lt;li&gt;Build and play full chess games&lt;/li&gt;
&lt;li&gt;Recreate famous architecture &lt;/li&gt;
&lt;li&gt;Build a functioning computer&lt;/li&gt;
&lt;li&gt;Build models of cities&lt;/li&gt;
&lt;li&gt;Collaboratively build and create structures, including all kinds of buildings&lt;/li&gt;
&lt;li&gt;Explore the virtual world and see new things&lt;/li&gt;
&lt;li&gt;Explore dungeons and fight monsters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several different ways to play Minecraft.   There is single player mode for those who want to build and explore by themselves, as well as several different kinds multiplayer for those who would like to experience the game with their friends.  There is also survival mode for those who want a challenge and a creative mode for those who want to build without restrictions.  In Minecraft, survival mode is a little bit violent, but the intensity can be chosen by the user so you can set limits.  Other than that there is no real objectionable content in the game.
The most contentious aspect of Minecraft is, without question, servers (a server is a place where Minecraft players can play the game together from the comfort of their own homes).  Servers can be fun but they are accompanied by risks.  Those risks stem from the fact that the some servers are not operated by Mojang (the creators of Minecraft), but instead are created and operated by users.  Many of them have unmoderated text based communication.  As such the safety of a server must be assessed on a case by case basis if you feel that your child is not mature enough to choose servers responsibly and cope with any misbehavior by other players.
If your child wishes to explore collaborative play, there are several different options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The safest option is probably a LAN world (LAN is an acronym for Local Area Network which allows people connect their computers if they are close together).  A LAN world would allow your child and their friends to connect to a shared world through your home network.  This can be done through Minecraft and is almost as safe as solo play.  In addition, it is as easy as clicking a button.  The downside is that all of the computers involved need to be in the same house which limits the utility of this option. &lt;/li&gt;
&lt;li&gt;The next safest option would be to set up a whitelist-only server using your own computer.  Only people that the admins of a server select can access one of these servers.  This would allow your child to play with any friend you approve from their own homes (explain server requirements).  There are directions online for how to do this.  And it is not as complicated as you would expect.  Your child can probably do this. There are lots of YouTube videos explaining how to do it.  It’s a great learning experience. The only risk is if your child adds someone inappropriate without your permission.  You will need at least some computer literacy to do this.  If you wish to try this, &lt;a href="http://www.google.com/url?q=http%3A%2F%2Fminecraft.gamepedia.com%2FTutorials%2FSetting_up_a_server&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNHW9VoTx8b7SmnuraGMRk-ss6e6dg"&gt;this&lt;/a&gt; is a guide to setting up a server, and &lt;a href="http://www.google.com/url?q=http%3A%2F%2Fwww.akliz.net%2Fmanage%2Fknowledgebase%2F5%2FHow-to-Set-Up-the-White-List-on-a-Minecraft-Server.html&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNHk1QQDCgXJ2SNLKCJWeK71aTLhhg"&gt;this&lt;/a&gt; is a guide to setting up the whitelist.  &lt;/li&gt;
&lt;li&gt;The final option is to allow your child to join servers set up by others.  One of their friends may have a whitelist server for which you can confirm the whitelist policy with their parents.  If that is not the case, if you feel that your child is not mature enough to safely select a server there are family-friendly servers which may be a better option.  &lt;a href="http://www.google.com/url?q=http%3A%2F%2Fwww.brightpips.com%2F11-family-friendly-minecraft-servers-where-your-kid-can-play-safely-online%2F&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNEhUDKvhBTGRI6mAHQsTwcC7XYYNg"&gt;This&lt;/a&gt; page has a list of good family friendly servers and a simple, easy to understand, explanation of relevant vocabulary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Minecraft Camp" src="/images/mc-camp.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Another contentious aspect of the game is modding.  Mods are modifications to Minecraft that change the game in some way.  Mods are, for the most part, relatively safe, in terms of content.  The big risk for mods is computer viruses.  This risk can be mitigated by scanning  the file multiple times with different antivirus programs.  You should check the reviews of a mod before you download it because a poorly made mod may render Minecraft incompatible. Look for well-known developers with lots of good reviews.  It’s even better if the mod is sanctioned by Mojang.  For an extra layer of protection, your child can probably confirm with friends who use the mod that they have not had any problems with it.  In addition, one should not install multiple mods at once unless it is explicitly stated that the two are compatible.  Otherwise the game will may cease to function.  Mods are not something I would recommend unless you, or someone helping to install the mod, are very computer literate.  If your child becomes an advanced user, they can even learn to code by developing their own mod.&lt;/p&gt;</content><category term="minecraft"></category></entry><entry><title>WEMS Elementary Technology</title><link href="/wems-elementary-technology.html" rel="alternate"></link><published>2015-06-04T00:00:00-04:00</published><updated>2015-06-04T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2015-06-04:/wems-elementary-technology.html</id><summary type="html">&lt;p&gt;WEMS 2014/2015 Elementary Technology wrap-up&lt;/p&gt;</summary><content type="html">&lt;h3&gt;WEMS Elementary Technology&lt;/h3&gt;
&lt;p&gt;I have had a really great time teaching Technology to the WEMS Elementary students! They have been such a terrific and patient class this year as we reviewed things as complex as Binary Logic gates, the binary number system, and even the hexadecimal number system. I truly enjoy instructing in the Montessori environment as they are so open to new concepts and can help me relate them to their other subjects. And the older students are able to help the younger students in a way that reinforces everyone's understanding. I especially appreciate their patience because we steered away from the afternoon iPad sessions and stuck to a more traditional lecture/show-and-tell approach -- they did some iPad technology work on their own.&lt;/p&gt;
&lt;p&gt;Due to the recurring request by the students for me to bring them transistors, they now each have their very own (PNP) transistor and an LED! Again, I am so pleased with their enthusiasm and now understanding of how transistors (used to implement switching/digital logic) are the basic building blocks for the digital devices we all own and carry around today.&lt;/p&gt;
&lt;p&gt;And for those students who actually want to build something with their transistor and LED, you can go to &lt;a href="http://www.adafruit.com"&gt;adafruit&lt;/a&gt; and &lt;a href="http://amazon.com"&gt;amazon&lt;/a&gt; (specific links to items coming) to order a few additional items to build a simple switching circuit and even a NOT gate (ask your child to explain a not gate -- hopefully they'll remember what a truth table is and show you the truth table for AND, OR, and NOT). To get started with their transistor and LED, they should probably get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prototyping breadboard&lt;/li&gt;
&lt;li&gt;9V wire and battery&lt;/li&gt;
&lt;li&gt;550 Ohm resistors&lt;/li&gt;
&lt;li&gt;push button switch&lt;/li&gt;
&lt;li&gt;pack of jumper wires&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to order more switches, transistors and leds. You may want to see if the remaining Richmond Radio Shack stores still have some electronics project starter kits which include many of these things in one nice bundle.&lt;/p&gt;
&lt;p&gt;You can then build this simple circuit whereby pressing the button turns on the transistor which turns on the "main" circuit to turn on the LED. Note the position of the transistor -- the flat side is facing down in the pictures (which lines the three leads to the transistor to be in the order of emitter, base, and collector). Your child may remember earlier in the year when we had several of them pretend to be a transistor and we had one student providing power, one student controlling, and another student as the LED -- the controlling student was "wired" to the base.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simple switching circuit -- off" src="/images/simple-off.jpg"&gt;
&lt;img alt="Simple switching circuit -- off" src="/images/simple-off2.jpg"&gt;
&lt;img alt="Simple switching circuit -- on" src="/images/simple-on.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Then, your child should enjoy this simple wiring change that allows the transistor to stop the "main" circuit. That is, pressing the button will turn off the LED -- essentially creating the NOT logic. The light is on unless the button is pressed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Not gate -- off" src="/images/not-off.jpg"&gt;
&lt;img alt="Not gate -- off" src="/images/not-off2.jpg"&gt;
&lt;img alt="Not gate -- on" src="/images/not-on.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Please feel free to comment here or send me an email wray(at)techemstudios.com .&lt;/p&gt;</content><category term="edtech"></category><category term="transistors"></category><category term="leds"></category><category term="binary"></category></entry><entry><title>Notes on setting up pis to use Minecraft API</title><link href="/notes-on-setting-up-pis-to-use-minecraft-api.html" rel="alternate"></link><published>2015-05-20T00:00:00-04:00</published><updated>2015-05-20T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-05-20:/notes-on-setting-up-pis-to-use-minecraft-api.html</id><summary type="html">&lt;p&gt;Some notes and code&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just dropping in some code for instructors, students, and everyone
[for Raspberry Pi 2].&lt;/p&gt;
&lt;p&gt;Let's grab some Python libraries that can connect to your Minecraft World.
Login to your pi and launch the GUI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;startx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open up a browser and go to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;www.wiley.com/go/adventuresinminecraft
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and download the starter kit. Choose "open" and open the program
called Xarchiver. Click Action -&amp;gt; Extract on the Xarchiver menu. Type
/home/pi in the Extract to: text box.&lt;/p&gt;
&lt;p&gt;Now, open up IDLE (Python) and create a new program file. You'll want
to save this file in the "My Adventures" folder you just created. You
can name this first file "hello_minecraft.py". This actually assumes
you have already done the LED input lesson and have a file led.py that
you have copied into your "My Adventures" folder. Finally, since this
code uses the raspberry pi I/O, you'll need to open up a new terminal
window (LX Terminal), change directory (using "cd") to "My Adventures"
and run the file with sudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mcpi.minecraft&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;minecraft&lt;/span&gt;

&lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minecraft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minecraft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postToChat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello Minecraft World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTilePos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;led&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;green_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;green_led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, running this would go something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;My Adventures&amp;quot;&lt;/span&gt;
sudo python hello_minecraft.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Want to build something?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mcpi.minecraft&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;minecraft&lt;/span&gt;
&lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minecraft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minecraft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mcpi.block&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;block&lt;/span&gt;

&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTilePos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TNT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is another cool program to try.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mcpi.minecraft&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;minecraft&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mcpi.block&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;block&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;mc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minecraft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minecraft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;bridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;buildBridge&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTilePos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AIR&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WATER_FLOWING&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WATER_STATIONARY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GLASS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;coordinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GLASS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;coordinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;coordinate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AIR&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;buildBridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And while you are at it, can you post the current temp to the chat??
The hint here is that you should copy your temp.py file into your
"MyAdventures" sub-directory, comment-out the deliver method and
update the print method (at the end of the file) to postToChat. And,
don't forget to do the minecraft setup (imports and creation) in order
to postToChat.&lt;/p&gt;
&lt;p&gt;What else can you do? Do you want to do? You all now have temp input,
led output, minecraft control, and outbound email capabilities!!&lt;/p&gt;</content><category term="raspberry pi"></category><category term="python"></category><category term="Minecraft"></category></entry><entry><title>Some Code for RPi temp sensing</title><link href="/some-code-for-rpi-temp-sensing.html" rel="alternate"></link><published>2015-05-13T00:00:00-04:00</published><updated>2015-05-13T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-05-13:/some-code-for-rpi-temp-sensing.html</id><summary type="html">&lt;p&gt;Some notes and code&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just dropping in some code for students to use.&lt;/p&gt;
&lt;p&gt;After wiring your DS18B20, you need to prep your pi for using
it. After logging in, do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /boot/config.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And add this line to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dtoverlay=w1-gpio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, reboot your pi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's test the temp sensor with these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo modprobe w1-gpio
sudo modprobe w1-therm
cd /sys/bus/w1/devices
ls
cd 28&amp;lt;tab&amp;gt;
cat w1_slave
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see two lines with a "YES" at the end of the first line and
the temp reading at the end of the second. Once you've done this, go
ahead and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~
sudo startx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and launch python2, create a new file and put the code below in
it. Save it as temp.py.&lt;/p&gt;
&lt;p&gt;Here is the associated code that reads from the DS18B20 temp sensor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="c1"&gt;#from mailit import *&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modprobe w1-gpio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modprobe w1-therm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;base_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/sys/bus/w1/devices/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;device_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;28*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;device_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device_folder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/w1_slave&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_temp_raw&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_temp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_temp_raw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;YES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_temp_raw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;equals_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;equals_pos&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;temp_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;equals_pos&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;temp_c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1000.0&lt;/span&gt;
        &lt;span class="n"&gt;temp_f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp_c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;32.0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp_c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp_f&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The current temp is: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;C, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;F&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_temp&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="c1"&gt;#deliver(&amp;#39;The current temp is: %dC, %dF&amp;#39; % (read_temp()))&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a very simple/generic mailing routine. Uncomment the "from
mailit import *" and the function call to "deliver" in the above
routine to have your temp reading sent via email. You should save this
code in a file called mailit.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Simple smtp mail utility to be used by Tech Em students.&lt;/span&gt;
&lt;span class="c1"&gt;# This will run on the RPi with the Occidentalis install.&lt;/span&gt;
&lt;span class="c1"&gt;# Thus, it is a handy utility to use along with adafruit sensors&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 201406 Wray Mills&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c1"&gt;### &lt;/span&gt;
&lt;span class="c1"&gt;# Change to your settings&lt;/span&gt;
&lt;span class="c1"&gt;###&lt;/span&gt;
&lt;span class="n"&gt;pi_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wray-pi&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;somebody@somewhere.com&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;## Feel free to reuse the techem student relay&lt;/span&gt;
&lt;span class="n"&gt;mail_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;student@techemstudios.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mail_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pword-on-whiteboard&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RPi output&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtpout.secureserver.net&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3535&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Use 587 for gmail&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#smtpserver.starttls() # Uncomment this line for gmail&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="raspberry pi"></category><category term="adafruit"></category><category term="python"></category></entry><entry><title>Gaming at TES (Winter 2015)</title><link href="/gaming-at-tes-winter-2015.html" rel="alternate"></link><published>2015-03-25T00:00:00-04:00</published><updated>2015-03-25T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2015-03-25:/gaming-at-tes-winter-2015.html</id><summary type="html">&lt;p&gt;Gaming ASE follow-up&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks again for letting Tech Em provide After School Enrichment for
your kids! This was a terrific group -- very focused and pretty quiet
considering they were mostly working on and playing games! Well, that
is until they found out they could play iTunes radio on their iPads
the last day!&lt;/p&gt;
&lt;p&gt;We worked primarily in two iOS-based apps for this class: Floors and
GamePress.&lt;/p&gt;
&lt;h3&gt;Floors&lt;/h3&gt;
&lt;p&gt;Floors is available for iOS (free) at &lt;a href="http://www.projectpixelpress.com"&gt;Pixel Press Floors&lt;/a&gt;.
Floors leverages "Design Thinking" -- we asked the kids
to think about the aspects of games that they like versus those that
they don't like. We actually played some games in the Floors arcade
for some comparisons before they started on their games. All students
have projects in the Floors arcade. I know some of them had better
names for there games, but in the spirit of anonymity while making
sure they can find their games, I published them in the arcade using
the techemstudios account naming them "TES-N" where N is their iPad
number (refer to your email).&lt;/p&gt;
&lt;h3&gt;GamePress&lt;/h3&gt;
&lt;p&gt;Game Press is available on iOS (free) at &lt;a href="http://www.gamepressapp.com"&gt;GamePress App&lt;/a&gt;.
GamePress is a bit more technical and uses a behavior-oriented
strategy for creating games. This is similar to apps like Scratch, but
in GamePress, the options are much more complex and students can
adjust things like the physics-related aspects of characters and
enemies. If your student worked through a GamePress App, it will be on
their thumb drive. What you'll need to do is first install
GamePress app on your iOS device and either email the .tap
file on the thumb drive to your iOS device (iPad) or AirDrop the file
to your iOS device. Your device should give you the option to open up
the file in GamePress to play the game and/or continue editing it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The classic two-player tank game" src="/images/hs-talk-35.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;More&lt;/h3&gt;
&lt;p&gt;Some of the students preferred Floors and kept working on
their games there and some moved on with GamePress. I would certainly encourage them to keep working (or create new games) with either app.&lt;/p&gt;
&lt;p&gt;Please don't hesitate to comment here or email us if you have any
feedback or questions. We'd love to help these students continue
exploring software creation and learn more about Computer Science and
Software Engineering!&lt;/p&gt;</content><category term="Floors"></category><category term="GamePress"></category></entry><entry><title>Homeschool Conference (201503)</title><link href="/homeschool-conference-201503.html" rel="alternate"></link><published>2015-03-24T00:00:00-04:00</published><updated>2015-03-24T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2015-03-24:/homeschool-conference-201503.html</id><summary type="html">&lt;p&gt;Highlights from my presentation&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I covered a bunch of stuff, here are some of the references
and high points from my talk: "Technology in your Homeschool Curriculum"&lt;/p&gt;
&lt;p&gt;&lt;img alt="Homeschool Student working on code for microcontroller" src="/images/hs-talk-40.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;The links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.org"&gt;Code.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/us/app/circuit-coder/id492180472"&gt;Circuit Coder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lightbot.com"&gt;Lightbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://scratch.mit.edu"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gethopscotch.com"&gt;Hopscotch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gamepressapp.com"&gt;GamePress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.projectpixelpress.com/floors/"&gt;Floors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.adafruit.com"&gt;Adafruit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.raspberrypi.org"&gt;RaspberryPi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;History&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Prehistoric: Tally Sticks&lt;/li&gt;
&lt;li&gt;1800's, mechanical: Pascal's Calculator, Arithmometer, Babbage's&lt;/li&gt;
&lt;li&gt;Machines, Ada Lovelace&lt;/li&gt;
&lt;li&gt;1940's, vacuum tube: ENIAC&lt;/li&gt;
&lt;li&gt;1970' to today: microchip and the raspberry pi&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ENIAC vs. Raspberry Pi&lt;/h4&gt;
&lt;p&gt;&lt;img alt="ENIAC vs. Raspberry Pi" src="/images/hs-talk-11.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Binary Logic&lt;/h3&gt;
&lt;p&gt;What can one do with billions of transistors?&lt;/p&gt;
&lt;p&gt;Start with one transistor, simple switching device (digital). It's on
or off, true or false, 0 or 1. Wire a couple together and you get an
AND gate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AND Gate" src="/images/hs-talk-15.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Combine a NOT gate and an AND gate and you can solve the
truth table where you want the output to be true (1) only when B
is 1. That is to say: let there be truth when (NOT A) AND B.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Quarter&amp;quot; Adder" src="/images/hs-talk-18.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So, if you wire the A input to a NOT gate and have that go into an AND gate that
B is also wired to, then you have the result. Suppose you now want to add A
and B, then simply use the mirror of (NOT A) AND B and "OR" it: ((NOT A)
AND B) OR (A AND (NOT B)). That gives you the sum, but don't forget
the carry which is simply A AND B.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Half adder truth table" src="/images/hs-talk-19.jpg"&gt;
&lt;img alt="Half adder circuit" src="/images/hs-talk-21.jpg"&gt;
&lt;img alt="Half adder running circuit" src="/images/hs-talk-22.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now you have a binary half adder (you can add two digits). Combine two
of those (along with an OR of the CARRY output for each) and you have
a full adder. String together 3 full adders and you can add two 3
digit binary numbers!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Binary addition" src="/images/hs-talk-27.jpg"&gt;
&lt;img alt="Binary adder circuit" src="/images/hs-talk-28.jpg"&gt;
&lt;img alt="Binary adder running circuit" src="/images/hs-talk-29.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Wasn't that easy??&lt;/p&gt;
&lt;h3&gt;Coding&lt;/h3&gt;
&lt;p&gt;Having gone through lightbot, a teacher can re-iterate the
fundamentals with a language like Python: procedures, overloading,
loops, and conditionals. Futhermore, with concepts learned in Scratch,
Hopscotch, and even game-creation apps like GamePress, variables of
varying data-types can be explained. Start with a simple program to
emulate "Mad Libs" and work up to more complex programs that can
leverage device (pythonista) libraries for accelerometer or screen
input; leverage minecraft (Bukkit server) libraries to build things in
a Minecraft world; leverage GPIO libraries to read sensor input/update
led output from a raspberry pi cobbler kit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Make it... Fun" src="/images/hs-talk-46.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This BMO-creeper contains a student coded microcontroller, not TNT.&lt;/p&gt;
&lt;p&gt;&lt;img alt="BMO-Creeper" src="/images/hs-talk-41.jpg"&gt;&lt;/p&gt;</content><category term="computer science"></category><category term="binary"></category><category term="python"></category><category term="raspberry pi"></category><category term="adafruit"></category><category term="gemma"></category><category term="lightbot"></category></entry><entry><title>NFES Winter Session</title><link href="/nfes-winter-session.html" rel="alternate"></link><published>2015-03-24T00:00:00-04:00</published><updated>2015-03-24T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-03-24:/nfes-winter-session.html</id><summary type="html">&lt;p&gt;Follow up on the LED pendant projects&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Thank you!&lt;/h3&gt;
&lt;p&gt;I want to pass on my enthusiastic thanks for letting us provide
Technology Enrichment to NFES! Joe and I thoroughly enjoyed the kids
and the class and look forward to providing more enrichment at
NFES. &lt;a href="mailto:info@techemstudios.com?subject=NFES-feecback"&gt;Let us know&lt;/a&gt;
if you (and your kids) have any additional feedback for us.&lt;/p&gt;
&lt;h3&gt;LED Pendant Information&lt;/h3&gt;
&lt;p&gt;Here is some more information about the LED pendants your kids coded
for our class.&lt;/p&gt;
&lt;p&gt;The pendant consists of three main parts: the 8x8 LED matrix display;
a microcontroller (it's actually a &lt;a href="https://www.adafruit.com/products/1222"&gt;"Gemma" microcontroller from
Adafruit&lt;/a&gt;); and the lithium polymar (&lt;a href="https://www.adafruit.com/products/1578"&gt;lipo&lt;/a&gt;) rechargeable battery. There
is no "on/off" switch -- you simply plug the battery in to start the
display and unplug to stop. The battery plugs into the bottom of the
microcontroller in the off-white receptacle.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gemma battery socket" src="/images/gemma-battery.jpg"&gt;&lt;/p&gt;
&lt;p&gt;On the top of the microcontroller is a mini USB receptacle which is
used to transfer the code to the microcontroller (any USB connector
will work to connect a laptop/desktop to the
microcontroller). However, this plug does not charge the battery. See
the section below if you and your kid would like to get the software
necessary to refine their code or re-code their LED.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gemma mini usb socket" src="/images/gemma-usb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Your child should also have a very &lt;a href="https://www.adafruit.com/products/1304"&gt;small charger&lt;/a&gt; for the battery. This
charger plugs into a USB port and will charge the lipo battery. There
is a red light when charging and a green light that indicates the
battery is fully charged.&lt;/p&gt;
&lt;h3&gt;LED Coding information&lt;/h3&gt;
&lt;p&gt;There are detailed tutorials available at adafruit if you would like
to know how we constructed the pendant and all the component
specifications. However, this is a quick overview to get your child
(re)coding the LED frame designs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;a href="https://learn.adafruit.com/introducing-gemma/setting-up-with-arduino-ide"&gt;Arduino IDE v1.05 with Gemma software&lt;/a&gt; for your computer or laptop.&lt;/li&gt;
&lt;li&gt;Configure the Arduino IDE to use the Gemma 8MHz and tinyISP.&lt;ul&gt;
&lt;li&gt;Tools -&amp;gt; Board -&amp;gt; Adafruit Gemma 8MHz&lt;/li&gt;
&lt;li&gt;Tools -&amp;gt; Programmer -&amp;gt; USBtinyISP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download the required
 &lt;a href="https://github.com/adafruit/TinyWireM/archive/master.zip"&gt;LED library&lt;/a&gt;,
  unzip and put it in the Adafruit Arduino
libraries directory.&lt;ul&gt;
&lt;li&gt;Put the TinyWireM directory in your Documents/Arduino/libraries directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://secure.techemstudios.come/enrolled_children"&gt;Login&lt;/a&gt; to our website and download your kid's code.&lt;/li&gt;
&lt;li&gt;Unzip your kid's code into a directory.&lt;/li&gt;
&lt;li&gt;Go into that directory and double-click on the file named for your
kid with a .ino suffix. This will launch Adafruit Arduino.&lt;/li&gt;
&lt;li&gt;The LED design is in the "bmo.h" file that will be automatically
loaded on the second tab when you launch Arduino (for those of you who
have programmed in C or C++ this is simply a header file). Your child
should know how to edit this file to enhance or change their design.&lt;/li&gt;
&lt;li&gt;Anywhere there is a "//" is a code comment and the text after it
    is for explanation and not used in the design.&lt;/li&gt;
&lt;li&gt;Each "frame" of the design consists of 8 lines of 8 1's and 0's
    preceded by a "B" and followed with a ",". Thus, the lines
    correspond to the rows in the matrix and a 1 will light the led at
    that position and a 0 will turn off the led at that position.&lt;/li&gt;
&lt;li&gt;Each frame concludes with a decimal number on the 9th line
      followed by a comma. This decimal number represents the delay in
      hundredths of a second for this frame. For example, if you want
      the first frame to display for half a second, use 50. If you
      want it to display for a whole second, use 100. This value can
      only go up to 255 (a little over 2.5 seconds).&lt;/li&gt;
&lt;li&gt;The file has some statements at the beginning of the file that you
    shouldn't change and the file must conclude with a "};" on the last line.&lt;/li&gt;
&lt;li&gt;Once you are happy with your design, you should compile it to make
sure there are no errors.&lt;/li&gt;
&lt;li&gt;After an error-free compile, plug in your microcontroller and you
have about 10 seconds to click on the "upload" icon (on the top left
of the IDE, there is a right arrow for upload) to transfer the
code to the microcontroller.&lt;/li&gt;
&lt;li&gt;Make sure you are happy with the design -- if you are, you may unplug
  the USB and use the battery to power the microcontroller.&lt;/li&gt;
&lt;li&gt;If you want to change the design again, it is easiest to unplug the
  usb until you have re-compiled the code and plug in when you are
  ready to try again.&lt;/li&gt;
&lt;li&gt;Wait a few seconds for the code to transfer and the microcontroller
to reboot and display the frames in your design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, feel free to comment here or shoot us an email if you have ANY
questions or issues.&lt;/p&gt;</content><category term="computer science"></category><category term="led"></category><category term="gemma"></category><category term="arduino"></category><category term="coding"></category></entry><entry><title>Craft of Minecraft (Winter 2015)</title><link href="/craft-of-minecraft-winter-2015.html" rel="alternate"></link><published>2015-03-16T00:00:00-04:00</published><updated>2015-03-16T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2015-03-16:/craft-of-minecraft-winter-2015.html</id><summary type="html">&lt;p&gt;The promised blog page that goes along with the winter Craft of Minecraft&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Minecraft PE Server&lt;/h3&gt;
&lt;p&gt;We started the class discussing servers and clients and the networking involved to make games like minecraft work. We setup a minecraft PE server (that is actually still running). If you are interested in running a PE server for your own home network, you can find a fairly stable version here:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.pocketmine.net"&gt;Get PocketMine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The instructions are relatively straightforward and this server acts similar to the PC server version in that it will create several configuration files after the first time the server is run. However, please keep in mind the following pros and cons when it comes to running this server vs. simply sharing your PE world with others on your network (essentially Minecraft PE can run as a "server" for others on your network).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Good&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PocketMine will support more players (especially if you have an i7 machine with 8+ GB ram).&lt;/li&gt;
&lt;li&gt;PocketMine will allow op commands at the console so you have more control over your world.&lt;/li&gt;
&lt;li&gt;Just like the PC edition, PocketMine has access controls (whitelist) to constrain access.&lt;/li&gt;
&lt;li&gt;Just like the PC edition, PocketMine will support some plugins.&lt;/li&gt;
&lt;li&gt;If you expose your PocketMine server to the Internet (port forward), users outside your network can join your server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PocketMine is not as stable and can get glitchy and force reconnects, etc.&lt;/li&gt;
&lt;li&gt;PocketMine does require a separate laptop/pc running it on the network so its not as easy to create an "ad-hoc" world.&lt;/li&gt;
&lt;li&gt;PocketMine is not quite as up-to-date as Minecraft PE and certainly behind the PC edition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another &lt;a href="http://www.howtogeek.com/202961/how-to-run-a-local-minecraft-pe-server-for-fun-and-persistent-world-building/"&gt;nice article&lt;/a&gt; to read with information on PocketMine and configuring it.&lt;/p&gt;
&lt;p&gt;So, the other thing we covered in class is how you can actually get another app that works with Apple's Game Center that allows you to expose your PocketMine PE world outside of your network. This is actually pretty cool, but a little tricky to setup. Furthermore, there are so many people just waiting for new PE worlds to be exposed that your world can quickly be invaded by TNT wielding and lava toting fire starters! The app's site does an ok job explaining how to set things up, but feel free to shoot me an email or comment here if you have some issues:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://itunes.apple.com/us/app/multiplayer-for-minecraft-pe/id609704981?mt=8"&gt;Multiplayer for Minecraft PE&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Minecraft PE powered rails and redstone&lt;/h3&gt;
&lt;p&gt;We also spent some time on minecraft PE showing how one can use powered rails and build binary logic gates! There is a &lt;a href="https://www.youtube.com/watch?v=bLK58PRzaSU"&gt;good YouTube resource&lt;/a&gt; for doing that.&lt;/p&gt;
&lt;p&gt;We didn't get to doing this in PC redstone, but I would encourage that you all try this at home (and let us know how it goes). In fact, once we move our newer server (and the world they played in the last day), it would be awesome if some of the students could build some logic gates in that world to share with other students. We will definitely give them credit for providing instructional materials!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Winter 2015 Minecraft class" src="/images/minecraft-class1.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Minecraft Bukkit server and Python&lt;/h3&gt;
&lt;p&gt;So, we also did quite a bit with a version of minecraft known as Bukkit. This is the same version that runs on the raspberry pi and it worked well for the group we had in our class -- allowing us to make server modifications using Python. Here are roughly the steps we went through (and the students should mostly remember how this goes).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the "AdventuresInMinecraft" directory&lt;/li&gt;
&lt;li&gt;Run the StartBukkit command&lt;/li&gt;
&lt;li&gt;Launch Minecraft&lt;/li&gt;
&lt;li&gt;Make sure your Minecraft profile is using version 1.6.4 (yes, bukkit is not near the latest version)&lt;/li&gt;
&lt;li&gt;Choose multiplayer, direct connect, with a host of "localhost"&lt;/li&gt;
&lt;li&gt;Launch the Python 2.* "IDLE" application&lt;/li&gt;
&lt;li&gt;Open up any of the modules we created in the "AdventuresInMinecraft/MyAdventures" directory&lt;/li&gt;
&lt;li&gt;The IDLE application has the option to "Run Module" which will run the python code that connects to your running bukkit server and whose results you should see in your running Minecraft application.&lt;/li&gt;
&lt;li&gt;Remember, building large structures (like a sphere of size 100 or greater) will take some time. Build this out of TNT and light and you will likely bog down your server for an hour or so!&lt;/li&gt;
&lt;li&gt;If your world is lagging due to some large build, you can go into "AdventuresInMinecraft/Bukkit" and delete your world! Of course, you are &lt;em&gt;deleting your world&lt;/em&gt;, so test your builds before you build in a world you want to keep.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Winter 2015 Minecraft class" src="/images/minecraft-class2.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Thank you&lt;/h3&gt;
&lt;p&gt;Thanks again. I probably learned more than you all did and I appreciate that. Please comment here or send me email if you need anything else. For those of you who were using our laptops and want to do the Bukkit server on your own, let me know if you need more detailed instructions and I'll work with you all. Check out our Spring session and Summer Camps coming up. We are combining raspberry pi and minecraft for some fun projects -- I know you all would do great in these classes and I'm happy to talk to you in advance if you have specific objectives in mind for your next minecraft/pi projects.&lt;/p&gt;</content><category term="minecraft"></category><category term="python"></category><category term="bukkit"></category></entry><entry><title>FORTRAN and CoffeeScript</title><link href="/fortran-and-coffeescript.html" rel="alternate"></link><published>2015-03-11T00:00:00-04:00</published><updated>2015-03-11T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-03-11:/fortran-and-coffeescript.html</id><summary type="html">&lt;p&gt;A week in the life...&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Language Elegance&lt;/h3&gt;
&lt;p&gt;What does FORTRAN and CoffeeScript have in common? Well, aside from
being programming languages (of course, there could be some arguments
about formal languages vs. scripting languages vs. meta-scripting
language -- just humor me for now), not much. But, I have the
"pleasure" of working on a project that is using both. And, in fact,
in a horrible violation of DRY, we are currently defining probability
distributions and prob. dist. approximations in both! This will change soon; however, for now, it
makes the project kind of cool. Its like the best and worst of
old-school and new school. One can actually learn from reviewing dated
FORTRAN code just as one can learn from the CoffeeScript and actually
cross-leverage some concepts. Regardless, one can't help but
appreciate the elegance of the CoffeeScript compared with the
FORTRAN. Check this out:&lt;/p&gt;
&lt;h4&gt;FORTRAN&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!   Creating the Normal Approximation function. For now, we are using this from the shell.f module for the&lt;/span&gt;
&lt;span class="c"&gt;!   Gaussian distributions.&lt;/span&gt;
    &lt;span class="k"&gt;RECURSIVE FUNCTION &lt;/span&gt;&lt;span class="n"&gt;normal_approx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;IMPLICIT NONE&lt;/span&gt;
&lt;span class="k"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;KIND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;INTENT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
      &lt;span class="kt"&gt;REAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;KIND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;normal_approx&lt;/span&gt;
      &lt;span class="kt"&gt;INTEGER&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="c"&gt;!     if z is less than 0, then the value above is equal&lt;/span&gt;
&lt;span class="c"&gt;!     to 1 - Q(-z), so return 1 - temp&lt;/span&gt;
      &lt;span class="k"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;span class="k"&gt;         &lt;/span&gt;&lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;normal_approx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;END IF&lt;/span&gt;


&lt;span class="c"&gt;!     calculate the number according to the polynomial (these should be constants)&lt;/span&gt;
      &lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.0498673470&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;                          &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.0211410061&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
     &lt;span class="mi"&gt;2&lt;/span&gt;                          &lt;span class="mf"&gt;0.0032776263&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
     &lt;span class="mi"&gt;3&lt;/span&gt;                          &lt;span class="mf"&gt;0.0000380036&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
     &lt;span class="mi"&gt;4&lt;/span&gt;                          &lt;span class="mf"&gt;0.0000488906&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
     &lt;span class="mi"&gt;5&lt;/span&gt;                          &lt;span class="mf"&gt;0.0000053830&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; 

&lt;span class="c"&gt;!     verify that the number is within the computational&lt;/span&gt;
&lt;span class="c"&gt;!     limits of the dist_r &lt;/span&gt;
      &lt;span class="k"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;span class="k"&gt;         &lt;/span&gt;&lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;END IF&lt;/span&gt;
&lt;span class="k"&gt;      IF&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)))).&lt;/span&gt;&lt;span class="nb"&gt;AND&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;THEN&lt;/span&gt;
&lt;span class="k"&gt;         &lt;/span&gt;&lt;span class="n"&gt;normal_approx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;END IF&lt;/span&gt;

&lt;span class="k"&gt;      WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;FMT&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;normal approx at &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; is &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;normal_approx&lt;/span&gt;

    &lt;span class="k"&gt;END FUNCTION&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Coffeescript&lt;/h4&gt;
&lt;p&gt;Granted, this could use a little more comments. But, it essentially
looks just like the definition for the Normal Approximation in the
textbook, so we can simply reference the section in the function definition comment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0498673470&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0211410061&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mf"&gt;0.0032776263&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0000380036&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mf"&gt;0.0000488906&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0000053830&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0..6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Digital Logic Design&lt;/h3&gt;
&lt;p&gt;Oh, and just to make the week even more well-rounded (in a Comp
Sci. sense), I've had a couple of my elementary classes working
through the binary number system, basic logic gates to form
half-adders to form full-adders to perform multi-digit binary
arithmetic! All this provides a nice setup for their Arduino sketches
for a microcontroller to control an 8x8 LED matrix.&lt;/p&gt;
&lt;h3&gt;Minecraft, Arduino, Python, FORTRAN, C, Ruby, and Coffeescript for&lt;/h3&gt;
&lt;h4&gt;LED controllers, minecraft server mods, enrollment systems, and&lt;/h4&gt;
&lt;h4&gt;probabilistic distribution fitting engines&lt;/h4&gt;
&lt;p&gt;And actually even a few more languages/tasks in between. So, actually, if every week could be this cool, that
would be awesome. In fact, what makes this even better is that I get
to share a lot of this with our next generation of Software
Engineers. It's extremely rewarding to see such young students "coding"
away in Python or even writing out bytes in bits for an Arduino sketch
--  yes, 3rd graders defining bytes using bits in C. And to have an
intern who is still just a sophomore in high school defining multiple
ruby on rails environments (and all the related excruciating
regression testing getting all the gems at the right versions) who can
do such a task with very, very little guidance from me! And to work
with an undergrad on a graduate-level project who is such a gifted
coder in the most modern languages (like CoffeeScript) and who is
headed to Microsoft this year, makes me very comfortable with the
future of technology in the US!!&lt;/p&gt;</content><category term="FORTRAN"></category><category term="coffeescript"></category><category term="binary logic"></category><category term="half-adder"></category></entry><entry><title>LED demo code</title><link href="/led-demo-code.html" rel="alternate"></link><published>2015-03-03T00:00:00-05:00</published><updated>2015-03-03T00:00:00-05:00</updated><author><name>Wray Mills</name></author><id>tag:None,2015-03-03:/led-demo-code.html</id><summary type="html">&lt;p&gt;Some notes and code&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just dropping in some code for instructors, students, and everyone.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Animation data for Trinket/Gemma + LED matrix backpack jewelry. &lt;/span&gt;

&lt;span class="cp"&gt;#define REPS 255 &lt;/span&gt;&lt;span class="c1"&gt;// Number of times to repeat the animation loop (1-255)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;PROGMEM&lt;/span&gt; &lt;span class="n"&gt;anim&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 1 frame&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B11111111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 0.5 second delay&lt;/span&gt;

  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 2 frame&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 0.5 second delay&lt;/span&gt;

  &lt;span class="n"&gt;B10010010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 3 frame&lt;/span&gt;
  &lt;span class="n"&gt;B01001001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00100100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B10010010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B01001001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00100100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B10010010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B01001001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 0.25 second delay&lt;/span&gt;

  &lt;span class="n"&gt;B00100100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B10010010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B01001001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00100100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B10010010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B01001001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B00100100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;B10010010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 0.25 second delay&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="adafruit"></category><category term="arduino"></category></entry><entry><title>NFES Follow Up</title><link href="/nfes-follow-up.html" rel="alternate"></link><published>2014-11-10T00:00:00-05:00</published><updated>2014-11-10T00:00:00-05:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-11-10:/nfes-follow-up.html</id><summary type="html">&lt;p&gt;Follow up on the LED pendant projects&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Thank you!&lt;/h3&gt;
&lt;p&gt;I want to pass on my enthusiastic thanks for letting us provide
Technology Enrichment to NFES! Kayla and I thoroughly enjoyed the kids
and the class and look forward to providing more enrichment at NFES. In
fact, we have learned a lot after our first (and largest enrichment
class ever) session there. Thus, we are really excited to offer a
continuation of this course where we plan to have a lower
student-teacher ratio and will prioritize the hands-on projects over
the classroom lecture. So, please &lt;a href="mailto:info@techemstudios.com?subject=NFES-session-2"&gt;let us know&lt;/a&gt; if you (and your kids)
will be interested in a continuation session this winter. We would
have it at the same time on Thursdays and the winter session runs January 22 -
Feb 26.&lt;/p&gt;
&lt;h3&gt;LED Pendant Information&lt;/h3&gt;
&lt;p&gt;Here is some more information about the LED pendants your kids coded
for our class. And, if your kid did not get to complete her/his code
on the last day, please &lt;a href="mailto:info@techemstudios.com?subject=finish-led"&gt;send us an email&lt;/a&gt; so that we can setup some
time in the winter when we are back at NFES or a time you all can come
by our studio at Shady Grove and Nuckols to complete the coding.&lt;/p&gt;
&lt;p&gt;The pendant consists of three main parts: the 8x8 LED matrix display;
a microcontroller (it's actually a &lt;a href="https://www.adafruit.com/products/1222"&gt;"Gemma" microcontroller from
Adafruit&lt;/a&gt;); and the lithium polymar (&lt;a href="https://www.adafruit.com/products/1578"&gt;lipo&lt;/a&gt;) rechargeable battery. There
is no "on/off" switch -- you simply plug the battery in to start the
display and unplug to stop. The battery plugs into the bottom of the
microcontroller in the off-white receptacle.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gemma battery socket" src="/images/gemma-battery.jpg"&gt;&lt;/p&gt;
&lt;p&gt;On the top of the microcontroller is a mini USB receptacle which is
used to transfer the code to the microcontroller (any USB connector
will work to connect a laptop/desktop to the
microcontroller). However, this plug does not charge the battery. See
the section below if you and your kid would like to get the software
necessary to refine their code or re-code their LED.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gemma mini usb socket" src="/images/gemma-usb.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Your child should also have a very &lt;a href="https://www.adafruit.com/products/1304"&gt;small charger&lt;/a&gt; for the battery. This
charger plugs into a USB port and will charge the lipo battery. There
is a red light when charging and a green light that indicates the
battery is fully charged.&lt;/p&gt;
&lt;h3&gt;LED Coding information&lt;/h3&gt;
&lt;p&gt;There are detailed tutorials available at adafruit if you would like
to know how we constructed the pendant and all the component
specifications. However, this is a quick overview to get your child
(re)coding the LED frame designs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;a href="https://learn.adafruit.com/introducing-gemma/setting-up-with-arduino-ide"&gt;Arduino IDE v1.05 with Gemma software&lt;/a&gt; for your computer or laptop.&lt;/li&gt;
&lt;li&gt;Configure the Arduino IDE to use the Gemma 8MHz and tinyISP.&lt;ul&gt;
&lt;li&gt;Tools -&amp;gt; Board -&amp;gt; Adafruit Gemma 8MHz&lt;/li&gt;
&lt;li&gt;Tools -&amp;gt; Programmer -&amp;gt; USBtinyISP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download the required
 &lt;a href="https://github.com/adafruit/TinyWireM/archive/master.zip"&gt;LED library&lt;/a&gt;,
  unzip and put it in the Adafruit Arduino
libraries directory.&lt;ul&gt;
&lt;li&gt;Put the TinyWireM directory in your Documents/Arduino/libraries directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://secure.techemstudios.come/enrolled_children"&gt;Login&lt;/a&gt; to our website and download your kid's code.&lt;/li&gt;
&lt;li&gt;Unzip your kid's code into a directory.&lt;/li&gt;
&lt;li&gt;Go into that directory and double-click on the file named for your
kid with a .ino suffix. This will launch Adafruit Arduino.&lt;/li&gt;
&lt;li&gt;The LED design is in the "bmo.h" file that will be automatically
loaded on the second tab when you launch Arduino (for those of you who
have programmed in C or C++ this is simply a header file). Your child
should know how to edit this file to enhance or change their design.&lt;/li&gt;
&lt;li&gt;Anywhere there is a "//" is a code comment and the text after it
    is for explanation and not used in the design.&lt;/li&gt;
&lt;li&gt;Each "frame" of the design consists of 8 lines of 8 1's and 0's
    preceded by a "B" and followed with a ",". Thus, the lines
    correspond to the rows in the matrix and a 1 will light the led at
    that position and a 0 will turn off the led at that position.&lt;/li&gt;
&lt;li&gt;Each frame concludes with a decimal number on the 9th line
      followed by a comma. This decimal number represents the delay in
      hundredths of a second for this frame. For example, if you want
      the first frame to display for half a second, use 50. If you
      want it to display for a whole second, use 100. This value can
      only go up to 255 (a little over 2.5 seconds).&lt;/li&gt;
&lt;li&gt;The file has some statements at the beginning of the file that you
    shouldn't change and the file must conclude with a "};" on the last line.&lt;/li&gt;
&lt;li&gt;Once you are happy with your design, you should compile it to make
sure there are no errors.&lt;/li&gt;
&lt;li&gt;After an error-free compile, plug in your microcontroller and you
have about 10 seconds to click on the "upload" icon (on the top left
of the IDE, there is a right arrow for upload) to transfer the
code to the microcontroller.&lt;/li&gt;
&lt;li&gt;Make sure you are happy with the design -- if you are, you may unplug
  the USB and use the battery to power the microcontroller.&lt;/li&gt;
&lt;li&gt;If you want to change the design again, it is easiest to unplug the
  usb until you have re-compiled the code and plug in when you are
  ready to try again.&lt;/li&gt;
&lt;li&gt;Wait a few seconds for the code to transfer and the microcontroller
to reboot and display the frames in your design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, feel free to comment here or shoot us an email if you have ANY
questions or issues.&lt;/p&gt;</content><category term="computer science"></category><category term="led"></category><category term="gemma"></category><category term="arduino"></category><category term="coding"></category></entry><entry><title>Some Notes for Build Code Connect</title><link href="/some-notes-for-build-code-connect.html" rel="alternate"></link><published>2014-10-23T00:00:00-04:00</published><updated>2014-10-23T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-10-23:/some-notes-for-build-code-connect.html</id><summary type="html">&lt;p&gt;Some notes&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Quick notes from last night&lt;/h3&gt;
&lt;p&gt;The site I was using for the Minecraft setup on the pi is &lt;a href="http://picraftbukkit.webs.com/pi-minecraft-server-how-to"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would suggest using your new SD card to setup minecraft. Once I go through that process, I will publish it here. You can always get started by going to raspberrypi.org and following the instructions to get the latest Raspian installed on your pi on the new SD card. That will actually take the most time -- getting the java version of minecraft running on that will be easy.&lt;/p&gt;
&lt;p&gt;You can use the comments here on this site to ask questions and/or shoot me an email. You could even send me an email from your pi -- just don't send it every 5 minutes!!&lt;/p&gt;</content><category term="computer science"></category><category term="python"></category><category term="raspberry pi"></category></entry><entry><title>Some Notes for Homeschool Level 2 Computer Science and Tween/Teen Intro to Coding</title><link href="/some-notes-for-homeschool-level-2-computer-science-and-tweenteen-intro-to-coding.html" rel="alternate"></link><published>2014-10-21T00:00:00-04:00</published><updated>2014-10-21T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-10-21:/some-notes-for-homeschool-level-2-computer-science-and-tweenteen-intro-to-coding.html</id><summary type="html">&lt;p&gt;Some notes and assignments&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember, we have been doing two things when coding in our classes:&lt;/p&gt;
&lt;p&gt;1) Using a command or terminal window to run python3. So far, we typically accomplish this by opening a terminal or command prompt and then using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd your_project/working_directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is "your_project/working_directory" ? Well, that depends on what you are using to edit the program files. If you are using Aptana then your project directory may be something like "Documents/Aptana Studio 3 Workspace/wray". Once you find it, remember that directory (write it down maybe). And once you have changed directory (using the cd command) into that area, you don't need to move out of that directory for the remainder of your session. So, to run the python interpreter and test your python code, you will use a command like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will start the python interpreter -- you know you are in the interpreter because you will get the triple greater-than prompt. When you see that you can start testing your code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;your_cool_python_file&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;call_your_cool_python_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;your_parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;your_parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;your_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YourClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_paramater1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;init_parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) The second thing we do when coding is actually edit your python files. Using your favorite editor (e.g. Aptana, Eclipse, nano, vi), you will edit your python source files to be tested in the terminal window. Don't forget to save your changes. And you should restart the python interpreter every time and re-import your file, like this (in the python terminal):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;your_command_prompt&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;your_cool_python_file&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Homework/Final Assignment&lt;/h3&gt;
&lt;p&gt;I've been threatening homework for the past two weeks. So, let me post some here for you all. First, please review the instructions above and make sure you are proficient at editing python files and testing them. If nothing else, I want you to be very comfortable doing this so that you can continue to code and be ready for follow-up courses. Secondly, I want you to look at a "case study" in your book: go to page 399 and look at case study 12.3. This is the project I would like you all to do. There is a text-based version and then a graphics version if you are up to that challenge. In order to do the latter, you will likely need to start on the first part before Wednesday. Please come in Wednesday with any questions or issues you may have with this. It is very challenging, but I know you all are up to it. If you do want a bit more background (i.e. if you want something relatively dry to read to help you sleep) you can actually read the first part of Chapter 12 that starts on page 385. This material is very advanced so don't be discouraged if it doesn't make sense, but please email or post a question/discussion here on the blog.&lt;/p&gt;
&lt;p&gt;Oh, and the link to some of the materials (like graphics.py) is &lt;a href="http://mcsp.wartburg.edu/zelle/python/"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="computer science"></category><category term="python"></category></entry><entry><title>Web App Camp</title><link href="/web-app-camp.html" rel="alternate"></link><published>2014-09-07T00:00:00-04:00</published><updated>2014-09-07T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-09-07:/web-app-camp.html</id><summary type="html">&lt;p&gt;Camp notes for students&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Web Camp Sites Update&lt;/h1&gt;
&lt;p&gt;Most sites are up. Please watch your email -- I will send you an email when your site is ready. I do apologize for the delay, but we are spending some time doing additional customizations for each site. Also, in previous emails, I told you all to access the site using the username I put on the whiteboard the last day of camp. Instead, please use the username 'ec2-user' (referenced below). &lt;/p&gt;
&lt;h1&gt;Maintaining your site&lt;/h1&gt;
&lt;p&gt;I'll send you an email with your specific instructions. I am adding basic authentication to most sites (most everyone asked for it), so in that email will be a separate password for your site. Your login will be an "administrative" login -- other users may register, but they will be restricted on what they can do on your site. Once your site is up, you can maintain your site by connecting to the server like we did in class OR you can install ruby and ruby on rails on your own computer. Later, I'll include a brief overview of how to work on your own computer and then copy the files to the server. For now, you can use the server I have setup.&lt;/p&gt;
&lt;h1&gt;Editing your files&lt;/h1&gt;
&lt;p&gt;If you have Koder installed on your tablet, you can edit files just like you did in class. You will need to create a new remote SFTP project where the username is the name of your site and the username/password is what I wrote on the whiteboard. Your project will be in the same directory location it was for class (e.g. /webappcamp/&amp;lt;your_app&gt;).&lt;/p&gt;
&lt;p&gt;If you don't have Koder or want to use your computer, you can use &lt;a href="http://www.barebones.com/products/bbedit/"&gt;bbedit&lt;/a&gt; on the Mac or use &lt;a href="http://www.thetechrepo.com/main-articles/542.html"&gt;WinSCP with Notepad++&lt;/a&gt;. Really, with WinSCP, you can use whatever editor you may already use.&lt;/p&gt;
&lt;h1&gt;Accessing the console&lt;/h1&gt;
&lt;p&gt;If you have iSSH installed on your tablet, you can connect to the server using the same username/password I wrote on the whiteboard. On Windows, you can use &lt;a href="http://www.putty.org"&gt;putty.exe&lt;/a&gt; to access the server and on Mac you can use the terminal with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -l ec2-user &amp;lt;your_app&amp;gt;.techemstudios.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are essentially two things you will need the access to do:&lt;/p&gt;
&lt;p&gt;After you make changes, to reload your applicaiton and see the changes, you need to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /webappcamp/&amp;lt;your_app&amp;gt;
bundle exec rake assets:precompile
touch tmp/restart.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If your site isn't working, you may want to review the application logfile (assume you are still in your app directory -- first command above):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -500 log/production.log
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;An example of how to make changes&lt;/h1&gt;
&lt;p&gt;A student had the typical setup we created in camp: The main "articles" with the ability to "post" comments on an article. So, they have "articles" and "posts". He noted that when viewing a particular posted comment on an article that page has a link at the bottom of the page called "back". And when we generated the scaffold code, it assumed "back" from a post should take you back to the lists of posts. Well, in our case, we don't want that. We want "back" to go to the list of articles (really the home page in our case). So, we needed to go in and modify that link. Here is what we did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a remote editor to open up the file /webappcamp/&lt;your_app&gt;/app/views/posts/show.html.erb&lt;/li&gt;
&lt;li&gt;Change the line of code where it creates the back link to use "articles_path" instead of "posts_path".&lt;/li&gt;
&lt;li&gt;Save the change.&lt;/li&gt;
&lt;li&gt;Access the console as described above: enter the 3 unix commands.&lt;/li&gt;
&lt;li&gt;Refresh your browser viewing the page and voila! Your change is there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please feel free to continue to comment and/or send me email if you have more questions. I'm very happy to help you all maintain your sites and work with you all to make it easier. In other words, now that you know what the actual unix commands are to reloaded your app on the EC2 user, I can provide you all with a simpler way to execute that in one command from your desktop or laptop. I do want you all to understand what is going on before we build out some of that automagic.&lt;/p&gt;
&lt;p&gt;Some sites/apps we visited/used by day:&lt;/p&gt;
&lt;h1&gt;Monday&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.w3schools.com/html/tryit.asp?filename=tryhtml_intro"&gt;w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.koderapp.com"&gt;koder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;Tuesday&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.zinger-soft.com/iSSH_features.html"&gt;iSSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;Wednesday&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://guides.rubyonrails.org/getting_started.html"&gt;Ruby on Rails tutorial (a blog)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;Thursday&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://guides.rubyonrails.org/getting_started.html#adding-a-second-model"&gt;Ruby on Rails tutorial (creating a relation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NoamB/sorcery"&gt;sorcery (authentication)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="web"></category><category term="html"></category></entry><entry><title>Trac setup with GitHub</title><link href="/trac-setup-with-github.html" rel="alternate"></link><published>2014-08-18T00:00:00-04:00</published><updated>2014-08-18T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-08-18:/trac-setup-with-github.html</id><summary type="html">&lt;p&gt;Trac server setup with Git&lt;/p&gt;</summary><content type="html">&lt;p&gt;This entry documents the setup for the Trac/SVN server -- using git (on github) as the primary remote repository instead of the hosted svn.&lt;/p&gt;
&lt;p&gt;We are using a server that hosts both SVN as well as several trac instances. This server resides within our internal restricted network. We'll refer to the trac/svn server as trac-1.&lt;/p&gt;
&lt;p&gt;Essentially, the Trac-Git setup is detailed &lt;a href="http://trac.edgewall.org/wiki/TracGit"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I went through the process of adding a git repository (as the default) to an existing Trac project. The configuration essentially points to a locally cloned git repository (local on the Trac server). And this works well, but sort of assumes that this local repository is either an integrated git remote repository (one where all developers are syncing their changes) or that itself is being synced separately. And while I can setup post-receive hooks on the repository, these won't work unless developers are pushing to this repository or someone is fetching from the integrated repository (in github in our case). So, while not the best solution, I've setup a cron job to fetch from the github repository every 15 minutes. So far this seems to work out fairly well.&lt;/p&gt;
&lt;p&gt;Definitely open to suggestions here.&lt;/p&gt;
&lt;p&gt;I will be setting up some post-receive hooks to enhance the integration, so I may run across a better solution.&lt;/p&gt;</content><category term="trac"></category><category term="git"></category></entry><entry><title>Gaming Camp</title><link href="/gaming-camp.html" rel="alternate"></link><published>2014-07-18T00:00:00-04:00</published><updated>2014-07-18T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-07-18:/gaming-camp.html</id><summary type="html">&lt;p&gt;Notes on gamepress downloads&lt;/p&gt;</summary><content type="html">&lt;p&gt;You can access your &lt;a href="http://www.gamepressapp.com"&gt;GamePress&lt;/a&gt; app by logging into TechEm's &lt;a href="https://secure.techemstudios.com"&gt;secure site&lt;/a&gt;. There is an enrollment record for every class, course, or camp you take at TechEm. So, go to the record for the gaming camp and there will be a zipfile that contains the GamePress app(s) you created during the camp.&lt;/p&gt;
&lt;p&gt;So, all you need to do is transfer the game files to your iPad and open up in GamePress. Once you have GamePress installed, one easy way to do this is email yourself the file (using an email address you can access on the iPad). When you choose the attachment on the iPad, you will have the option to "open in" GamePress. Do that and you can edit and/or play your game!!&lt;/p&gt;
&lt;p&gt;And contact us if you have any issues or questions!&lt;/p&gt;
&lt;p&gt;Happy gaming. &lt;/p&gt;</content><category term="gaming"></category><category term="gamepress"></category><category term="unity"></category></entry><entry><title>Rpi Temp. and Humidity sensing</title><link href="/rpi-temp-and-humidity-sensing.html" rel="alternate"></link><published>2014-06-19T00:00:00-04:00</published><updated>2014-06-19T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-06-19:/rpi-temp-and-humidity-sensing.html</id><summary type="html">&lt;p&gt;Some notes and code&lt;/p&gt;</summary><content type="html">&lt;p&gt;Login to your pi and enter some commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install build-essential python-dev
git clone git://github.com/adafruit/Adafruit_Python_DHT
cd Adafruit_Python_DHT
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we'll look at an example to test reading your sensor from Python.&lt;/p&gt;
&lt;p&gt;Once everyone has their sensors working again via Python. Copy in this new mailit.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Simple smtp mail utility to be used by Tech Em students.&lt;/span&gt;
&lt;span class="c1"&gt;# This will run on the r-pi with the Occidentals install.&lt;/span&gt;
&lt;span class="c1"&gt;# Thus, it is a nice utility to use along with adafruit sensors&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Tech Em Studios, Gnu GPL&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 201406 Wray Mills&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="c1"&gt;###&lt;/span&gt;
&lt;span class="c1"&gt;# Change to your settings&lt;/span&gt;
&lt;span class="c1"&gt;###&lt;/span&gt;
&lt;span class="n"&gt;pi_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;your-pi&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;somebody@somewhere.com&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;## Feel free to reuse, but please don&amp;#39;t abuse the techem student relay&lt;/span&gt;
&lt;span class="n"&gt;mail_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxx@techemstudios.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mail_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pword&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;smtp.somwhere.net&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;smtp_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3535&lt;/span&gt; &lt;span class="c1"&gt;# Use 587 for gmail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RPi output&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;smtp_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Use 587 for gmail&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;#smtpserver.starttls() # Uncomment this line for gmail&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;smtpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And create a new file called temp_humidity_emailer.py and copy this code into it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Template code for emailing temperature and humidity from an Adafruit DHT22&lt;/span&gt;
&lt;span class="c1"&gt;# sensor. Don&amp;#39;t forget to update this file if you connect the DHT22 to another data pin,&lt;/span&gt;
&lt;span class="c1"&gt;# want to change the delay, or logic for mailing. For example, you may only want to&lt;/span&gt;
&lt;span class="c1"&gt;# send notifications when certain thresholds are exceeded.&lt;/span&gt;
&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;span class="c1"&gt;# Code provided for Tech Em students and open under Gnu GPL&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Wray Mills&lt;/span&gt;
&lt;span class="c1"&gt;# 20140618&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Adafruit_DHT&lt;/span&gt;
&lt;span class="c1"&gt;# Tech Em mail utility&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mailit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;sensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_DHT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DHT22&lt;/span&gt;
&lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_temp_humidity&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;humidity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adafruit_DHT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;temp_f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;9.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;32.0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp_f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;humidity&lt;/span&gt;


&lt;span class="n"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The current temp is &lt;/span&gt;&lt;span class="si"&gt;%0.2f&lt;/span&gt;&lt;span class="s1"&gt; C, &lt;/span&gt;&lt;span class="si"&gt;%0.2f&lt;/span&gt;&lt;span class="s1"&gt; F, with a humidty of &lt;/span&gt;&lt;span class="si"&gt;%0.2f%%&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_temp_humidity&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we'll talk about "cron" and look at how you can setup your pi such that whenever you power it up on a network, it will start sensing temp and humidity every x minutes. Of course, don't forget to adjust your mailit.py in order to configure who gets notified via email or text.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo crontab -e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the nano editor to add a line like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0,15,30,45 * * * * /usr/bin/python /home/pi/temp_humidity_emailer.py &amp;gt;&amp;gt; /home/pi/log/cron.log 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To exit, ctrl-x, answer yes and then hit enter.&lt;/p&gt;
&lt;p&gt;Don't forget, this is your pi and your code so you should try to modify the code (in temp_humidity_emailer.py) to only send notifications when the temp and/or humidity goes below or above some set levels. Ask me if you want to discuss how to properly create those conditions.&lt;/p&gt;
&lt;p&gt;Now, if you want to "permanently" attach your sensor to the board to plug into the top of the pi, let's solder!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="RPi with DHT22 sensor on top board" src="/images/pi-with-dht22.jpg"&gt;&lt;/p&gt;</content><category term="raspberry pi"></category><category term="adafruit"></category><category term="python"></category></entry><entry><title>Student LED-faced Robots (aka BMO)</title><link href="/student-led-faced-robots-aka-bmo.html" rel="alternate"></link><published>2014-06-05T00:00:00-04:00</published><updated>2014-06-05T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2014-06-05:/student-led-faced-robots-aka-bmo.html</id><summary type="html">&lt;p&gt;Some of the student design LEDs&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of the Homeschool courses and an Elementary enrichment course, we ended up making 23 LED-faced robots. That means there are 23 #rva kids who came up with their own set of LED "frames" design, coded it, and programmed their bot's microcontroller. Here are pics of some of some early prototypes followed by finished projects.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial prototype" src="http://photos-f.ak.instagram.com/hphotos-ak-xpa1/10326632_305850922903469_1379628513_n.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Code sketch test rig&lt;/p&gt;
&lt;p&gt;&lt;img alt="Code sketch test rig" src="http://scontent-b.cdninstagram.com/hphotos-xfa1/t51.2885-15/10251544_310116335803865_818320578_n.jpg"&gt;&lt;/p&gt;
&lt;p&gt;From graph paper to code&lt;/p&gt;
&lt;p&gt;&lt;img alt="Coding" src="http://photos-d.ak.instagram.com/hphotos-ak-xfp1/10299889_480754238692379_1525559746_n.jpg"&gt;&lt;/p&gt;
&lt;p&gt;L's robot&lt;/p&gt;
&lt;p&gt;&lt;img alt="L's robot" src="http://photos-a.ak.instagram.com/hphotos-ak-xpa1/10296722_602473726514704_1077854084_n.jpg"&gt;&lt;/p&gt;
&lt;p&gt;O's robot&lt;/p&gt;
&lt;p&gt;&lt;img alt="O's robot" src="http://scontent-a.cdninstagram.com/hphotos-xfp1/t51.2885-15/10413939_251208148409562_1082851062_n.jpg"&gt;&lt;/p&gt;
&lt;p&gt;M's robot&lt;/p&gt;
&lt;p&gt;&lt;img alt="M's robot" src="http://photos-h.ak.instagram.com/hphotos-ak-xpf1/10375690_652704118150967_1990901006_n.jpg"&gt;&lt;/p&gt;</content><category term="edtech"></category><category term="led"></category><category term="gemma"></category></entry><entry><title>Tech Em is a Startup run by spastically optimistic people</title><link href="/tech-em-is-a-startup-run-by-spastically-optimistic-people.html" rel="alternate"></link><published>2014-05-30T00:00:00-04:00</published><updated>2014-05-30T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2014-05-30:/tech-em-is-a-startup-run-by-spastically-optimistic-people.html</id><summary type="html">&lt;p&gt;It helps to be spastically optimistic when launching a startup&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although Tech Em is pretty different from any other startup I've done or for which I've worked, I am getting those same sensations. Sensations of spastic optimism, often followed by lows brought on from dashed expectations. Think Bi-polar.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://xerpi.com"&gt;Xerpi&lt;/a&gt; is almost 10 years old now I think and its precursor startup was the first time I had a true, large personal stake in a startup (more than just a consultant for a startup or in a senior position at a more established startup). Being so close to the startup -- completely Internet and online based where I was the IT guy (CTO title, but really a glorified coder webmaster monkey) -- I literally saw every move in my logfiles. My great friend and partner in the startup is usually very complimentary to me when it comes to running a startup. Well, except for our common spastic optimism; in fact, our typical realistic (almost cynical) attitudes about growth somehow vanish. When we get in that zone of spastic optimism, neither of us does a sanity/realistic check or even considers thinking through a worst case scenario. With a sample size of less than a dozen interactions, we would extrapolate our returns in the millions! We would spend way too much time planning how to manage the onslaught of funds and grow our business into a Google competitor (or at leat into something Google would want to buy).&lt;/p&gt;
&lt;p&gt;So, its pretty easy to see how our days and weeks would go -- with expectations set as high as Google, anything short of that was a disappoinment. So, when the next 12 interactions, or worse, a few days without any interactions went by, we would be crushed. But, then the next day would bring huge results and ultimately cashflow which only fed our spastic optimism!&lt;/p&gt;
&lt;p&gt;Starting Tech Em is similar, I mean, its not really a startup in as much as an startup-startdown or a 1,000 steps forward and 999.9999 steps back (in a best case scenario). I'm back on that treadmill with Tech Em. And luckily I'm really passionate about technology education and getting kids interested in science and engineering, because that makes it a lot easier to get through the startdown days. Well, that and my traditional consulting clients who have been great enough to continuing working with me as Tech Em makes these 0.001 steps/day.&lt;/p&gt;
&lt;p&gt;Right now with Tech Em, its all about waiting for summer camp registrations. In fact, when someone registers, that is a "VIP" email which sends an alert to my &lt;a href="http://getpebble.com"&gt;Pebble&lt;/a&gt;. When hours and days go by without that notification, the startdown is in effect. I get a notification on the Pebble and its just a news item or a text (the latter typically being a positive thing, but not usually Tech Em specific). And I'm in startdown mode up until that next registration comes and things flip back to startup mode as I try to run through all the enrollment stats again in my head -- which camps are nearing capacity? Is this a repeat family or student? How did they hear about Tech Em? What is "working" so that we can continue that and improve?! I can't wait to instruct this camp (cause, well, I have as much fun as the kids and definitely learn so much more by teaching)!&lt;/p&gt;
&lt;p&gt;Actually, my Twitter following metric will also boost me into startup mode, so go ahead and follow &lt;a href="http://twitter.com/techemrva"&gt;us&lt;/a&gt;. And as I was amending this entry, I got a call from someone registering for a camp! That and a few new twitter followers today and I'm definitely having a startup Monday.&lt;/p&gt;</content><category term="startups"></category></entry><entry><title>Adafruit Gemma Musical Notes</title><link href="/adafruit-gemma-musical-notes.html" rel="alternate"></link><published>2014-05-29T00:00:00-04:00</published><updated>2014-05-29T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-05-29:/adafruit-gemma-musical-notes.html</id><summary type="html">&lt;p&gt;Arduino (Gemma) Sketch for musical output&lt;/p&gt;</summary><content type="html">&lt;p&gt;This entry documents my attempt at mapping out some musical notes to be used by students to create their own sounds.&lt;/p&gt;
&lt;p&gt;I went ahead and created a header file to define the notes. I based the frequencies on arduino code from this &lt;a href="http://arduino.cc/en/Tutorial/Tone"&gt;site&lt;/a&gt;, which in turn references this &lt;a href="http://www.phy.mtu.edu/~suits/notefreqs.html"&gt;table&lt;/a&gt;. Essentially, dividing 1,000 by the frequency.&lt;/p&gt;
&lt;p&gt;notes.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Note frequencies to be used by the playTone method found in the Adafruit Chirp Owl written by&lt;/span&gt;
&lt;span class="cm"&gt;Becky Stern and T Main.&lt;/span&gt;

&lt;span class="cm"&gt;Created 29 May 2014&lt;/span&gt;
&lt;span class="cm"&gt;by Wray Mills&lt;/span&gt;
&lt;span class="cm"&gt;based on Sound Effects with Arudino - http://www.mycontraption.com/sound-effects-with-and-arduino&lt;/span&gt;
&lt;span class="cm"&gt;These frequencies differ from those provided on the Arduino Tone Tutorial - &lt;/span&gt;
&lt;span class="cm"&gt;http://arduino.cc/en/Tutorial/Tone and the true note accuracy has not been verified, &lt;/span&gt;
&lt;span class="cm"&gt;but the relative differences are such that simple melodies can be constructed.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_C&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;956&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_D&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;851&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_E&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;758&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_F&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;716&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_G&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;638&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_A&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;568&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_B&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;506&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_hiC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;478&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_hiD&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;426&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;note_hiG&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;319&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then use the notes in calls to playTune (provided in the Gemma tutorials) to create music like the Star Wars Theme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Generate the first few measures of the Star Wars Theme
void starwars(){
  playTone(note_D,100);
  delay(50);
  playTone(note_D,100);
  delay(50);
  playTone(note_D,100);
  delay(50);
  playTone(note_G,600);
  delay(50);
  playTone(note_hiD,600);
  delay(50);
  playTone(note_hiC,100);
  delay(50);
  playTone(note_B,100);
  delay(50);
  playTone(note_A,100);
  delay(50);
  playTone(note_hiG,600);
  delay(50);
  playTone(note_hiD,600);

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are prepping for a birthday party -- doing a variation on this &lt;a href="https://learn.adafruit.com/chirping-plush-owl-toy/overview"&gt;adafruit project&lt;/a&gt;, so I'll post all the different functions we create. Oh, and of course, I'll post the kids creations as well, I can't wait to see what they design.&lt;/p&gt;</content><category term="arduino"></category><category term="adafruit"></category><category term="gemma"></category><category term="speaker output"></category></entry><entry><title>Trac setup on SVN server</title><link href="/trac-setup-on-svn-server.html" rel="alternate"></link><published>2014-05-27T00:00:00-04:00</published><updated>2014-05-27T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-05-27:/trac-setup-on-svn-server.html</id><summary type="html">&lt;p&gt;Trac/SVN server setup documentation&lt;/p&gt;</summary><content type="html">&lt;p&gt;This entry documents the setup for a new project/group setup when using self-hosted SVN in lieu of github.&lt;/p&gt;
&lt;p&gt;We are using a server that hosts both SVN as well as several trac instances. This server resides within our internal restricted network. We'll refer to the trac/svn server as trac-1.&lt;/p&gt;
&lt;p&gt;SVN -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo svnadmin create in /Users/svn
sudo chgrp -R _www # for Apache svn service access
sudo chmod -R g+w
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add permissions for developers in ${app_root}/.svn_authz&lt;/p&gt;
&lt;p&gt;Can access via https://${trac-1.domain}/scc/${new_project} # via apache proxy connecting to specific trac instance port.&lt;/p&gt;
&lt;p&gt;Then, you can do an svn import -m "initial import"&lt;/p&gt;
&lt;p&gt;Trac - (now up to version 1.0.1)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trac-admin &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;app_root&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;new_project&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-trac initenv
trac-admin &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;app_root&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;new_project&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-trac permission add &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;admin_user&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; TRAC_ADMIN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adjust trac.conf for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;attachment size&lt;/li&gt;
&lt;li&gt;email settings (including default notification settings)&lt;/li&gt;
&lt;li&gt;svn settings! (Trac 1.0.1 does not favor or default to svn, so the svn modules need to be turned on in the conf file before you can set the repository in the interface). There is a link I should add here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immediately go in and adjust permissions to give unauthenticated none&lt;/p&gt;
&lt;p&gt;Re-arrange permissions to give authenticated a rather large set of permissions (use another project as a template).&lt;/p&gt;
&lt;p&gt;Configure the default repository.&lt;/p&gt;
&lt;p&gt;Launch on specific port (add to crontab @reboot) -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tracd -s -- port &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project_port&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --auth=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;new_project&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; trac,&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;app_root&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.htdigest,&amp;#39;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;new_project&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;#39; --base-path=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;app_root&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;new_project&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-trac
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, add users to the htdigest, update their name and email and notify them of their new credentials.&lt;/p&gt;</content><category term="trac"></category><category term="svn"></category><category term="self-hosted"></category></entry><entry><title>Tablet App - Lightbot</title><link href="/tablet-app-lightbot.html" rel="alternate"></link><published>2014-05-22T00:00:00-04:00</published><updated>2014-05-22T00:00:00-04:00</updated><author><name>Wray</name></author><id>tag:None,2014-05-22:/tablet-app-lightbot.html</id><summary type="html">&lt;p&gt;Long overdue praise for Lightbot&lt;/p&gt;</summary><content type="html">&lt;p&gt;I found &lt;a href="https://itunes.apple.com/us/app/lightbot-programming-puzzles/id657638474?mt=8"&gt;lightbot&lt;/a&gt; while looking for apps for the &lt;a href="http://code.org"&gt;Hour of Code&lt;/a&gt; last year. To be honest, I didn't think much of it at first -- quickly skimming through apps and preparing to lead my first class in an &lt;a href="http://code.org"&gt;Hour of Code&lt;/a&gt;, I missed its genius.&lt;/p&gt;
&lt;p&gt;I did download it and figured it would be great for the younger kids (1st and 2nd graders). And when I introduced them to it, I was correct. It was great for them. While I helped them through the first few challenges, I started to pick up on how great this app is. It quickly gets harder, yet in a very fun way. I also noticed the older kids watching and wanting to "play".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Procedures to solve recurring patterns" src="/images/lightbot.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So, essentially, it is a great app for any age. It is a great "game" for people who already know how to code (like myself). The way it introduces procedures, directly relating their use in solving recurring patterns is superb. Furthermore, it exposes students to procedures, loops, conditionals and even overloading.&lt;/p&gt;
&lt;p&gt;Let me continue on this last point and share a couple of stories: &lt;/p&gt;
&lt;p&gt;As I said, I wasn't entirely thorough when introducing lightbot and mostly went through the levels with the kids as they did it. I didn't realize the impact the app was having -- students were going home and getting their parents to install it. They were using it at home and quickly surpassing my experience with the app. I didn't even know that it went into overloading until I was approached by one of my 3rd grade students who relayed to me something like, "So, instruction overloading is easy to understand, but I'm stuck on this one overloading level, can you help me?" Okay, let me just say I was speechless. Remember, I was still working on some lessons for the older kids to write code in Ruby and Python; I still viewed lightbot as a solid game to keep the younger kids happy. Now, I've got a third grader who already "gets" overloading! Clearly, I had to spend more time with this app and adjust my plans to fully leverage it.&lt;/p&gt;
&lt;p&gt;Now that I have lightbot integrated into my lessons, I can introduce concepts like overloading to kids I'm teaching to code in a programming language (like Ruby and Python). For example, when we are working through the &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World, Hello &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;example, I can casually point to the "+" operator and explain that this operator is overloaded. The plus (here in Ruby) can add numbers or add strings and even add other things. First of all, overloading is not new to the lightbot kids and secondly, I hardly have to explain myself! &lt;/p&gt;
&lt;p&gt;And its exactly these type of apps that are making my job creating lesson plans and curriculum fun and exciting. When I was in middle school teaching myself BASIC, I had to wrangle with GOSUB for weeks before I even began to understand its power. Lightbot teaches this to a 1st grader in a very interactive and visual way, builds on it, and has them "practice" it as they move through levels. Whether they know it or not, they are starting to think like a coder.&lt;/p&gt;
&lt;p&gt;Therefore, I want to pass on my thanks again to the folks at &lt;a href="https://itunes.apple.com/us/artist/lightbot-inc./id657638477?mt=8"&gt;Lightbot Inc.&lt;/a&gt; who have developed &lt;a href="https://itunes.apple.com/us/app/lightbot-programming-puzzles/id657638474?mt=8"&gt;lightbot&lt;/a&gt;. It truly is a remarkable tool for #edtech instructors. It is imperative we have as many elementary students working with procedures, loops, conditionals, and yes, overloading so that its second nature for them, so they can function in the highly tech-oriented economy in which they will live.&lt;/p&gt;</content><category term="apps"></category><category term="coding"></category><category term="edtech"></category></entry><entry><title>Relaxation Tip: Solder</title><link href="/relaxation-tip-solder.html" rel="alternate"></link><published>2014-05-21T00:00:00-04:00</published><updated>2014-05-21T00:00:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-05-21:/relaxation-tip-solder.html</id><summary type="html">&lt;p&gt;Hyped up on coffee and stress? Go solder something.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seems like I've always had shaky hands. Probably why I'm not a surgeon. Well, that and I didn't even opt for pre-med, or go to medical school etc. Anyway, I did my fair share of soldering during college (mostly at a camera repair shop where I worked for a couple of years). I remember then I would need to watch my coffee and sugar intake, which was hard considering our shop was a block over from spudnuts. In order to solder, I would often have to sort of meditate for a bit to calm everything down and steady the hands. Zoom ahead 20 years and I'm trying to solder again and its a mess. The harder I concentrated, the more my hands shook -- years of coffee and restless everything syndrome while coding or "software architecting" have taken their toll. Finally, I remembered the meditation technique.&lt;/p&gt;
&lt;p&gt;Not only did this allow me to actually solder the small pieces necessary to prep student projects, but also it is healty. 1) I'm steady enough not to burn myself which is healthy and 2) this self-calming extends past the soldering session (of course now I'll start resuming normal caffeine intake to try and prove that is isn't the coffee).&lt;/p&gt;
&lt;p&gt;Regardless, if you don't already meditate or do something similar as part of your routine, find a nice soldering project that will force you to calm your nerves. Just don't breathe any of the solder fumes!&lt;/p&gt;</content><category term="soldering"></category></entry><entry><title>What is Tech Em Studios</title><link href="/what-is-tech-em-studios.html" rel="alternate"></link><published>2014-03-28T23:08:00-04:00</published><updated>2014-03-28T23:08:00-04:00</updated><author><name>Wray Mills</name></author><id>tag:None,2014-03-28:/what-is-tech-em-studios.html</id><summary type="html">&lt;p&gt;Tech Training, Classes, and Camps&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tech Em Studios offers classes and camps focused on applied computer science and computer-aided design at our studio in Short Pump and at local secondary schools. Our classes help students understand the exciting and evolving relationship of technology and creativity. So whether you want to learn about using technology for art, seriously prepare your child for an applied science and engineering program or get yourself up to speed on current device capabilities, we are building a range of curriculums to meet the needs of your family.&lt;/p&gt;
&lt;p&gt;So, that is the marketing pitch. What about the story behind the creation of Tech Em? Well, we have three girls that are 5, 7, and 9 and I was concerned about their practical technology skills. It was 2013 after all and it seemed I had just as much opportunity to learn how to code and build my own circuits and rockets back in the 80's. Having been in "corporate" IT for almost 20 years, I had not kept up with technology education opportunities (or lack thereof) for secondary school students as well as adults outside the IT profession. That is how the idea for Tech Em starting brewing.&lt;/p&gt;
&lt;p&gt;And we've become focused on the tech gap (and doing what we can to address the gap -- providing more tech education and experience). I'm referring to the gap growing between the demand for Programmers (people who can code) and people in the U.S. who can actually code. And so I've been developing curriculums that incorporate introductory Computer Science concepts in a very hands-on and applied way (designing, coding, testing, building). It actually all lines up very neatly with organizations like &lt;a href="http://code.org"&gt;code.org&lt;/a&gt;, the maker movement, all the open source hardware devices available and, of course, 3D printing.&lt;/p&gt;
&lt;p&gt;Its turning out to be more than a new business venture, but a re-awakening of my inner geek since I get to re-learn and re-appreciate applied Computer Science to teach it. Furthermore, most of the kids I work with want to code and build more than use -- that actually isn't the problem. The challenge is sorting through all that is available to streamline kids' absorption of the key concepts so that they are learning how to think like a creative coder within the level-appropriate Engineering theory and discipline.&lt;/p&gt;
&lt;p&gt;The name? Well, emersion is sort of a play on immersion, but is really the opposite of submersion. We'd like to think we are helping people rise up out of the sea of technology. Whether we are helping students keep from drowing in technology (devices) or we are training the next Engineers who are rising out of the sea of users to become builders and creators. Sounds pretty cool right, but also Tech Em just works better than Tech Im!&lt;/p&gt;</content><category term="mission"></category></entry></feed>