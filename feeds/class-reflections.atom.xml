<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Art of Technology... Training - class-reflections</title><link href="/" rel="alternate"></link><link href="/feeds/class-reflections.atom.xml" rel="self"></link><id>/</id><updated>2019-01-26T00:00:00-05:00</updated><entry><title>WEMS Coding Winter 2019 Daily Summaries</title><link href="/wems-coding-winter-2019-daily-summaries.html" rel="alternate"></link><published>2019-01-26T00:00:00-05:00</published><updated>2019-01-26T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-01-26:/wems-coding-winter-2019-daily-summaries.html</id><summary type="html">&lt;p&gt;WEMS Coding Diary&lt;/p&gt;</summary><content type="html">&lt;h1&gt;WEMS Coding Winter 2019 - Weekly Summary&lt;/h1&gt;
&lt;h2&gt;Day 1 (12/06/2018)&lt;/h2&gt;
&lt;p&gt;For the last couple weeks the kids have wanted to do more iPads, surprising right? We have done &lt;a href="http://lightbot.com"&gt;Lightbot&lt;/a&gt; in the past, but haven't ever heavily focused on the last levels, and the concepts because it takes a while to get through all the levels, and reach these levels. The game probably has over forty levels total. One of the first things we had to make sure the kids understood was Procedures and re-usable code. Lightbot allows you to use Procedure 1 and Procedure 2 as a block of code that can be re-used in (&lt;em&gt;called&lt;/em&gt; by) your &lt;em&gt;main&lt;/em&gt; program. Later in the game we start messing around with using our Procedure 1, as a supporting block of code.&lt;/p&gt;
&lt;h2&gt;Day 2 (12/13/2018)&lt;/h2&gt;
&lt;p&gt;We continued to work on understanding and using Procedures. The cool thing is that when you create a procedure, it might be different from the one your classmate used to beat the level. There can be different ways that you arrange the instructions to complete the level. We also practiced using loops within our procedures to make our programs smaller and more efficient.&lt;/p&gt;
&lt;h2&gt;Day 3 (01/03/2019)&lt;/h2&gt;
&lt;p&gt;This was the last week we played with Lightbot. We did a little refreshing when we got back from break and made sure that we had procedures and loops down. There is another app called CargoBot that is very similar, but pretty much requires you to use &lt;em&gt;prodecures&lt;/em&gt; and &lt;em&gt;loops&lt;/em&gt; at every level. We also learned about a concept called &lt;em&gt;mutual recursion&lt;/em&gt; -- when Procedure1 calls Procedure2 and then Procedure2 calls Procedure1. That was interesting!&lt;/p&gt;
&lt;h2&gt;Day 4 (01/10/2019)&lt;/h2&gt;
&lt;p&gt;Even the tutorial and beginner levels for Cargobot are pretty intense. They really require you to break down the whole operation and split it into different procedures. You have around five Procedures for each level to use, compared to LightBots two. This is where we really learned to practice our problem-solving, and perserverance. Many times when we would start working on a level, we would get a little bit through and figure out that there was actually a better way to solve it and start over. This happens in Lightbot but not in such an impactful way. Cargobot forces you to look at the level, break it down into pieces, and then seperate those pieces into re-usable blocks of code that go into your various Procedures.&lt;/p&gt;
&lt;h2&gt;Day 5 (01/17/2019)&lt;/h2&gt;
&lt;p&gt;Some of the kids at the end of last class who were getting frustrated with Cargobot and started working on Hopscotch. This is the next app we transition to in our objective to teach programming and comes right before the actual typing programming languages. Hopscotch is still a drag and drop visual programming app, but within those drag and drop &lt;em&gt;Rules&lt;/em&gt; as Hopscotch calls them, there are parameters that need to be typed in. We all started on Hopscotch this class and built the basic skelton for a &lt;em&gt;Crossy Road&lt;/em&gt; or what used to be called Frogger!!! We started by programming our up arrow, left arrow, and right arrow to move around our character. Then we programmed two cars that were on a &lt;em&gt;repeat forever loop&lt;/em&gt; to go back and forth in the middle of the screen as our obstacles. And finally we learned about a collision event and programmed the character to restart at the starting point when it collided with either of the cars going back and forth. This was a lot of fun, allowing the kids to add in some personal touch along the way unlike the last two apps had.&lt;/p&gt;
&lt;h2&gt;Day 6 (01/24/2019)&lt;/h2&gt;
&lt;p&gt;We started our adventure through Github and typing on the laptops! We started off going over Github, and talking about how it works, and why we would need to use it. Once everyone was set up on their laptops, we looked through the repository at the different files there. We edited the index.html file which will be our home page for the website, and also looked at our personal pages. The kids should be starting to understand the concept of commiting a change, and that change is now reflected as the most recent version of the file. Including the conflicts that would arise if we all tried to edit, and commit changes at the same time!!!&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="aws"></category><category term="cloud9"></category></entry><entry><title>WEMS Coding Winter 2019 Day 6</title><link href="/wems-coding-winter-2019-day-6.html" rel="alternate"></link><published>2019-01-26T00:00:00-05:00</published><updated>2019-01-26T00:00:00-05:00</updated><author><name>Chris Kefalas</name></author><id>tag:None,2019-01-26:/wems-coding-winter-2019-day-6.html</id><summary type="html">&lt;p&gt;WEMS Coding Day 6&lt;/p&gt;</summary><content type="html">&lt;h1&gt;WEMS Coding: Kids &amp;amp; Github&lt;/h1&gt;
&lt;p&gt;For class today our goal was to become comfortable with Github and version control. Our first objective -- log into Github. After a couple minutes of "Mr. Chris, wrong password", and me responding with try again, try again. It clicked that something was off, "Oh yeah, sorry. Github required me to use a numeral so the password has a number at the end of it." Finally, we were in, well almost. One laptop logged in, the others all said "Please wait some time, your account was accessed with the wrong password repeatedly, and is now locked." Thinking there is no way we can all do this with just one laptop, let's switch it up. Off to the carpet, or as H. corrected me, "The Multi-Purpose Area" to go over version control in a more visual, engaging way. I handed everyone a piece of paper, and a folder. The paper had some code on it, the couple lines of HTML we were going to be playing around with. The folder was just a normal folder, nothing fancy. I asked L. to play the role of my repository, and she held a folder that said &lt;em&gt;MyFirstWebsite&lt;/em&gt;, this is where we all would commit, and push our code! Next to L., sat a folder that had written on it &lt;em&gt;Github.&lt;/em&gt; I explained how when someone wants to submit code to the folder, or repository, they would code it all up, write on the folder what it contained, or our &lt;em&gt;commit message&lt;/em&gt;, and then push it up to Github. The folder would fly through the air and land on the Github folder, and I would explain that at the Github folder it would &lt;em&gt;ask&lt;/em&gt; Github, "Hey, I got this code, and it's suppose to go to this folder called MyFirstWebsite, will you show me the way?" And with that, the folder was then moved over to folder L. was holding, and now put inside L.'s folder. And I explain that is how we would submit code, And by doing that, the version of the code had now changed, to the newer version. We went kid by kid, each adding the piece of paper to their folder, writing a description on the folder, and then the folder flying to meet Github, and then Github sending it to the &lt;em&gt;MyFirstWebsite&lt;/em&gt; folder that L. was holding. When we had done all the students, I laid all the folders down on the ground, one in front of the other. This allowed the kids to see the history tree that the code had gone through, starting at one version, and now being on the final version that we just submitted to the repository.&lt;/p&gt;
&lt;p&gt;I have got to say, I'm pretty happy that Github locked us out for a bit and we went over to the &lt;em&gt;Multi-Purpose Area&lt;/em&gt; to act out the whole process. Because the kids totally were starting to understand what was going on. We have one folder, or repository, that all of us are submitting code too, and working on together. Back to the table, and on the laptops we go.&lt;/p&gt;
&lt;p&gt;In groups of two the kids log in, with the right password this time, and the Github gates open, we are in! I tell them to go over to the left side of the screen, and they will see the folder we are looking for, &lt;em&gt;MyFirstWebsite&lt;/em&gt;. We all click on it, and then navigate to the folder inside named docs. In there we have a list of HTML files, one for each student, and one called &lt;em&gt;index.&lt;/em&gt; I let all the kids know that we are going to be building a website for WEMS, kind of like an information page. We all navigate to the index file and look over it. It has a heading, and a list of about 5 questions with blanks. I tell the first group, you will fill in the first question, and commit your work, and the second group, you will fill in the second question, and submit your work, and so on. And it was at this time that the truely remarkable happened. They all knew they had this one document, that they all would work on together, but on different laptops. J. starts, and fills in the first blank, writes his commit message, and clicks the green button. He is stoked when the site reloads and he sees his work has been written in stone, it is now official. L. and R. are next, they have two blanks they need to take care of in their sentence. They start working on the first blank, the underscores make it tricky, and after a couple minutes J. pipes up and says "Wait, I can just edit that on mine. I'll do it." So he does, filling in the first blank with the word snack. And submits it. I notice that the word isn't suppose to be snack, it's suppose to be snake. The sentence was, "Our class pet is a [blank] and his name is [blank]. Currently in the repository, after the last commit, "Our class pet is a snack, and his name is Candycane." L. and R. had refreshed after J.'s commit, and added Candycane, the name of the class pet snake. When we see this, everyone starts laughing. H/ speaks up and says he can fix it, and goes to change snack to snake. L. and I. filled in the last two questions, and we all submitted. We all refresh, and there are the new changes! We had a couple conflicts, but I told the kids they just needed to refresh, grab the latest version, and they could go and add their changes and commit. I think one of the best parts was when one of the students said "I commited it!" We moved over to our personal HTML files so that we didn't cause conflict drama, and worked on adding some things about ourselves, writing our commit messaging, and clicking the big green commit button. The kids loved seeing the file be updated, it was now an official change to the document, that they had made, they had a commit with their name on it!&lt;/p&gt;
&lt;p&gt;This whole process of version control, and Github, and Git, command line vs. using the Web UI, or desktop app can be so overwhelming. I really didn't know what to expect, but I just keep going with it, and repeating myself to try to explain it in a slightly different way. I think what really helped was acting it out visually on the carpet. They could really see that they were adding code to the repository in the way that they would put their piece of paper in the folder, write their commit message on it, and push it up to Github. Were it would finally end up in the &lt;em&gt;MyFirstWebsite&lt;/em&gt; folder, and now be updated with their changes. They started to understand how we were making a history of all the changes to the file, and that if we had too, we could just revert back to a commit before if we had made a mistake, like a spelling error. Or, we could fix it on our laptop, and then do &lt;em&gt;another&lt;/em&gt; commit that would update the software, and fix the error. My goal was for them to understand the basic idea of version control, and pick up some of the vocabulary words like commit, commit message, push. And I think seeing it in person, with the folders, and then moving to the laptops and doing it for real, having them all make changes to the same file, at the same time really helped to connect the dots. To start next class we will go over our new text editor we will be using, and then clone the class repository. We were around 23 commits I think when we ended, I know that this will become a competition and we will probably have to see how high we can get that number. I wouldn't be surprised if we break 100 commits next Thursday, and from there onto a 1000!&lt;/p&gt;
&lt;p&gt;You can go check out our simple little site at &lt;a href="http://wems.techemstudios.com"&gt;http://wems.techemstudios.com&lt;/a&gt;! Check back each week to see how we have changed it, and what has been added.&lt;/p&gt;</content><category term="computer science"></category><category term="coding"></category><category term="github"></category><category term="aws"></category><category term="cloud9"></category></entry></feed>